{% extends "layouts/layout-dashboard.twig" %}
{% set page_group = "unit" %}

{# Set page properties (page.*) here. #}
{% block page %}
    {# By putting this in a special block, we ensure that it will be set AFTER the default values are set in the parent template,
    but BEFORE the page itself is rendered. #}
    {% set page = page | merge({
        "title"       : "Units",
        "description" : "unit desc"
    }) %}
    {{ parent() }}
{% endblock %}

{% block content %}
<!-- start reservation modal -->
<!-- reservation modal -->
{% set documentTypes = ["","بطاقة هوية فلسطينية", "بطاقة هوية 48", "بطاقة هوية مقدسية", "بطاقة هوية", "رخصة قيادة", "جواز سفر"] %}
<!DOCTYPE html>
<html>
<head>
    <script src="https://unpkg.com/jspdf@latest/dist/jspdf.min.js"></script>
    <script src="node_modules/jspdf-customfonts/dist/jspdf.customfonts.min.js"></script>
    <script src="node_modules/jspdf-customfonts/dist/default_vfs.js"></script>
    <link rel="stylesheet" href="pace-theme-center-radar.css"/>
    <script src="pace.min.js"></script>
    <!--    <link rel="stylesheet" href="img.css">-->
    <style>

        @media all and (min-width: 769px) {
            .row {
                margin-top: 0px;
                padding: 0 10px;
            }
        }

        .clickable {
            cursor: pointer;
        }

        .panel-heading span {
            margin-top: -20px;
            font-size: 15px;

        }

        .w3-btn, .w3-button {
            border: none;
            display: inline-block;
            outline: 0;
            padding: 8px 16px;
            vertical-align: middle;
            overflow: hidden;
            text-decoration: none;
            color: inherit;
            background-color: inherit;
            text-align: center;
            cursor: pointer;
            white-space: nowrap
        }

        .w3-btn:hover {
            box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)
        }

        .w3-disabled, .w3-btn:disabled, .w3-button:disabled {
            cursor: not-allowed;
            opacity: 0.3
        }

        .w3-disabled *, :disabled * {
            pointer-events: none
        }

        .w3-button:first-child, .w3-dropdown-click:hover > .w3-button:first-child {
            background-color: #ccc;
            color: #000
        }

        .w3-dropdown-content {
            cursor: auto;
            color: #000;
            background-color: #fff;
            display: none;
            position: absolute;
            min-width: 160px;
            margin: 0;
            padding: 0
        }

        .w3-check, .w3-radio {
            width: 24px;
            height: 24px;
            position: relative;
            top: 6px
        }

        .w3-sidebar {
            height: 100%;
            width: 200px;
            background-color: #fff;
            position: fixed !important;
            z-index: 1;
            overflow: auto
        }

        .w3-bar-block .w3-dropdown-hover, .w3-bar-block .w3-dropdown-click {
            width: 100%
        }

        .w3-bar-block .w3-dropdown-hover .w3-dropdown-content, .w3-bar-block .w3-dropdown-click .w3-dropdown-content {
            min-width: 100%
        }

        .w3-bar-block .w3-dropdown-hover .w3-button, .w3-bar-block .w3-dropdown-click .w3-button {
            width: 100%;
            text-align: left;
            padding: 8px 16px
        }

        .w3-left {
            float: left !important
        }

        .w3-right {
            float: right !important
        }

        .w3-button:hover {
            color: #000 !important;
            background-color: #ccc !important;
            position: absolute;
            top: 50%;
        }

        .w3-content {
            max-width: 980px;
            margin: auto
        }

        .w3-rest {
            overflow: hidden
        }

        .w3-display-container:hover .w3-display-hover {
            display: block
        }

        .w3-display-container:hover span.w3-display-hover {
            display: inline-block
        }

        .w3-display-hover {
            display: none
        }

        .w3-display-left {
            position: absolute;
            top: 50%;
            left: 0%;
            transform: translate(0%, -50%);
            -ms-transform: translate(-0%, -50%)
        }

        .w3-display-right {
            position: absolute;
            top: 50%;
            right: 0%;
            transform: translate(0%, -50%);
            -ms-transform: translate(0%, -50%)
        }

        .w3-black, .w3-hover-black:hover {
            color: #fff !important;
            background-color: rgba(0, 0, 0, 0.55) !important;
        }

        .w3-grey, .w3-hover-grey:hover, .w3-gray, .w3-hover-gray:hover {
            color: #000 !important;
            background-color: #bbb !important
        }

        .p-l-0 {
            padding-left: 0;
        }

        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            margin: 0;
        }

        #payment-content {
            width: 700px !important;
        }
    </style>

</head>

<body>


<div class="modal fade" id="img" tabindex="-1" role="dialog" aria-labelledby="edit" aria-hidden="true">
    <div class="modal-content">
        <!--        <div class="modal-header">-->
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"><span
                    class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>
        <!--            <h4 class="modal-title custom_align" id="Heading">Images And Description</h4>-->
        <!--        </div>-->
        <div class="modal-body" style='width:100%;'>

            <div class="w3-content w3-display-container" style="resize:none;">
                <div id="images">
                    <img class="mySlides" id="image0" style="width:100% " hidden="true">
                </div>

                <button class="w3-button w3-black w3-display-left" onclick="plusDivs(-1)">&#10094;</button>
                <button class="w3-button w3-black w3-display-right" onclick="plusDivs(1)">&#10095;</button>
            </div>
            <div id='description' style="height:70px ; overflow-y: scroll; margin-bottom: 15px;
    margin-top: 15px;"></div>
            <button id='deleteimg'
                    {#                    onclick='deleteimg(self);' #}
                    class="btn btn-default"
                    data-imagid="0"
                    {% if user.primary_group_id == 1 %}style="display: none;" {% endif %} > {{ translate('delete_image') }}
            </button>
            <input id='imgid' type="text" hidden="true">
        </div>

    </div>
</div>


<div class="modal fade " id="ParkingStorageModal" tabindex="-1" role="dialog" aria-labelledby="edit" aria-hidden="true">
    <div class="modal-content" style="width: 700px !important;">
        <!--        <div class="modal-header">-->
        <button style="margin: 15px;" type="button" class="close" data-dismiss="modal" aria-hidden="true"
                onclick="resetModel()"><span
                    class="glyphicon glyphicon-remove" aria-hidden="true"></span></button>

        <div class="modal-body" style='width:100%;'>

            <div class="w3-content w3-display-container" style="resize:none;">

                <div class="row form-group">
                    <div class="col-xs-8 col-xs-offset-2">
                        <select id="ParkingStorageSelect" class="form-control ParkingStorageSelect">
                            <option disabled selected value="0">{{ translate('select_item') }}</option>
                            <option value="parking">{{ translate('parking') }}</option>
                            <option value="extra-parking">{{ translate('extra_parking') }}</option>
                            <option value="storage">{{ translate('storage') }}</option>

                        </select>
                    </div>
                </div>


            </div>

            <hr>

            <div class="row text-center" id="parking-content" style="display: none">
                <div class="row form-group">
                    <div class="col-xs-8 col-xs-offset-2">
                        <select id="ParkingSelect" class="form-control ParkingSelect">
                            <option disabled selected value="0"> -- {{ translate('select_parking') }} --</option>

                        </select>
                    </div>
                </div>


                <hr>
                <div class="row" id="parkingContent">

                    <div class="col-xs-12">
                        <div class="form-group" style="display: block;">
                            <div class="form-group col-xs-6 col-md-6 pull-right">
                                <input type="hidden" id="parkingid" class="form-control" readonly>
                            </div>
                        </div>
                    </div>

                    <div class="col-xs-12">
                        <div class="form-group" style="display: block;">
                            <div class="col-xs-4 col-md-4 pull-right">
                                <label for="leadID"> {{ translate('description') }}</label>
                            </div>
                            <div class="form-group col-xs-6 col-md-6 pull-right">
                                <input type="text" id="parkingdesc" class="form-control" readonly>
                            </div>
                        </div>
                    </div>

                    <div class="col-xs-12">
                        <div class="form-group" style="display: block;">
                            <div class="col-xs-4 col-md-4 pull-right">
                                <label for="leadID"> {{ translate('floor') }} </label>
                            </div>
                            <div class="form-group col-xs-6 col-md-6 pull-right">
                                <input type="text" id="parkingfloor" class="form-control" readonly>
                            </div>
                        </div>
                    </div>

                    <div class="col-xs-12">
                        <div class="form-group" style="display: block;">
                            <div class="col-xs-4 col-md-4 pull-right">
                                <label for="leadID">{{ translate('parking_number') }}</label>
                            </div>
                            <div class="form-group col-xs-6 col-md-6 pull-right">
                                <input type="text" id="parking_number" class="form-control" readonly>
                            </div>
                        </div>
                    </div>

                    {#                    <div class="col-xs-12"> #}
                    {#                        <div class="form-group" style="display: block;"> #}
                    {#                            <div class="col-xs-4 col-md-4 pull-right"> #}
                    {#                                <label for="leadID"> {{ translate('price') }}</label> #}
                    {#                            </div> #}
                    {#                            <div class="form-group col-xs-6 col-md-6 pull-right"> #}
                    {#                                <input type="text" id="parkingprice" class="form-control" readonly> #}
                    {#                            </div> #}

                    {#                        </div> #}
                    {#                    </div> #}

                    <div class="col-xs-12 col-md-12 ">
                        <div class="form-group">
                            <div class="col-xs-12 col-md-4 pull-right">
                                <label for="dateOfRes">{{ translate('price') }}</label>
                            </div>
                            <div class="col-xs-4 col-md-4 pull-right">
                                <div class='input-group date ' id='reservationDate'>
                                    <input type='number' class="form-control" id="parkingprice" disabled="disabled"/>
                                    <span class="input-group-addon" id="parkingCurrency">

                                                     </span>
                                </div>
                            </div>
                            <div class="col-xs-2 col-md-2 pull-right">
                                <button class="btn btn-primary" id="paymentsModal">payments</button>
                            </div>
                        </div>
                    </div>

                    <div class="row" style="margin-top: 215px;">
                        <div class="col-xs-12">
                            <div class="form-group" style="display: block;">
                                <div class="col-xs-4 col-md-4 pull-right">
                                    <label for="leadID">{{ translate('exchange_rate') }}</label>
                                </div>
                                <div class="form-group col-xs-6 col-md-6 pull-right">
                                    <input type='number' class="form-control" id="currency_exchange_parking"
                                           disabled="disabled"/>
                                    <span id="currnecy_should_change"></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xs-12">
                            <div class="form-group" style="display: block;">
                                <div class="col-xs-4 col-md-4 pull-right">
                                    <label for="leadID">{{ translate('final_price') }}</label>
                                </div>
                                <div class="form-group col-xs-6 col-md-6 pull-right">
                                    <input type='text' class="form-control" id="final_price_parking"
                                           disabled="disabled"/>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-xs-12" id="parkingImg" style="display: none">

                    </div>

                    <div class="row text-right pull-left" style="margin: 1px;">
                        <button class="btn btn-danger" id="reserveParking">
                            reserve
                        </button>
                    </div>

                </div>
            </div>


            <div class="row text-center" id="storage-content" style="display: none">
                <div class="row form-group">
                    <div class="col-xs-8 col-xs-offset-2">
                        <select id="StorageSelect" class="form-control StorageSelect">
                            <option disabled selected value="0"> -- {{ translate('select_storage') }} --</option>

                        </select>
                    </div>
                </div>

                <div class="col-xs-12">
                    <div class="form-group" style="display: block;">
                        <div class="form-group col-xs-6 col-md-6 pull-right">
                            <input type="hidden" id="storageid" class="form-control" readonly>
                        </div>
                    </div>
                </div>

                <div class="col-xs-12">
                    <div class="form-group" style="display: block;">
                        <div class="col-xs-4 col-md-4 pull-right">
                            <label for="leadID"> {{ translate('tabu_number') }}</label>
                        </div>
                        <div class="form-group col-xs-6 col-md-6 pull-right">
                            <input type="text" id="Storagetabu" class="form-control" readonly>
                        </div>
                    </div>
                </div>

                <div class="col-xs-12">
                    <div class="form-group" style="display: block;">
                        <div class="col-xs-4 col-md-4 pull-right">
                            <label for="leadID"> {{ translate('description') }}</label>
                        </div>
                        <div class="form-group col-xs-6 col-md-6 pull-right">
                            <input type="text" id="Storagedesc" class="form-control" readonly>
                        </div>
                    </div>
                </div>

                <div class="col-xs-12">
                    <div class="form-group" style="display: block;">
                        <div class="col-xs-4 col-md-4 pull-right">
                            <label for="leadID"> {{ translate('floor') }} </label>
                        </div>
                        <div class="form-group col-xs-6 col-md-6 pull-right">
                            <input type="text" id="Storagefloor" class="form-control" readonly>
                        </div>
                    </div>
                </div>

                <div class="col-xs-12">
                    <div class="form-group" style="display: block;">
                        <div class="col-xs-4 col-md-4 pull-right">
                            <label for="leadID"> {{ translate('area') }} </label>
                        </div>
                        <div class="form-group col-xs-6 col-md-6 pull-right">
                            <input type="text" id="Storagearea" class="form-control" readonly>
                        </div>
                    </div>
                </div>

                <div class="col-xs-12">
                    <div class="form-group" style="display: block;">
                        <div class="col-xs-4 col-md-4 pull-right">
                            <label for="leadID">{{ translate('storage_number') }}</label>
                        </div>
                        <div class="form-group col-xs-6 col-md-6 pull-right">
                            <input type="text" id="Storage_number" class="form-control" readonly>
                        </div>
                    </div>
                </div>

                {#                <div class="col-xs-12"> #}
                {#                    <div class="form-group" style="display: block;"> #}
                {#                        <div class="col-xs-4 col-md-4 pull-right"> #}
                {#                            <label for="leadID"> {{ translate('price') }}</label> #}
                {#                        </div> #}
                {#                        <div class="form-group col-xs-6 col-md-6 pull-right"> #}
                {#                            <input type="text" id="Storageprice" class="form-control" readonly> #}
                {#                        </div> #}
                {#                    </div> #}
                {#                </div> #}

                <div class="col-xs-12 col-md-12 ">
                    <div class="form-group">
                        <div class="col-xs-12 col-md-4 pull-right">
                            <label for="dateOfRes">{{ translate('price') }}</label>
                        </div>
                        <div class="col-xs-4 col-md-4 pull-right">
                            <div class='input-group date ' id='reservationDate'>
                                <input type='number' class="form-control" id="Storageprice" disabled="disabled"/>
                                <span class="input-group-addon" id="StoragepriceCurrency">

                                                     </span>
                            </div>
                        </div>
                        <div class="col-xs-2 col-md-2 pull-right">
                            <button class="btn btn-primary" id="paymentsModal2">payments</button>
                        </div>
                    </div>
                </div>

                <div class="row" style="margin-top: 325px;">
                    <div class="col-xs-12">
                        <div class="form-group" style="display: block;">
                            <div class="col-xs-4 col-md-4 pull-right">
                                <label for="leadID">{{ translate('exchange_rate') }}</label>
                            </div>
                            <div class="form-group col-xs-6 col-md-6 pull-right">
                                <input type='number' class="form-control" id="currency_exchange_storage"
                                       disabled="disabled"/>
                                <span id="currnecy_should_change_storage"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-xs-12">
                        <div class="form-group" style="display: block;">
                            <div class="col-xs-4 col-md-4 pull-right">
                                <label for="leadID">{{ translate('final_price') }}</label>
                            </div>
                            <div class="form-group col-xs-6 col-md-6 pull-right">
                                <input type='text' class="form-control" id="final_price_storage" disabled="disabled"/>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xs-12" id="StorageImg" style="display: none">

                </div>

                <div class="row text-right pull-left" style="margin: 1px;">
                    <button class="btn btn-danger" id="reserveStorage">
                        {{ translate('reserve') }}
                    </button>
                </div>
            </div>


        </div>


    </div>


</div>


{# reservation modal #}
{% include 'modals/create-reservation.twig' %}
{# cancellation modal #}
{% include 'modals/cancel-reservation.twig' %}
{# UnitDeletion modal #}
{% include 'modals/unit-delete.twig' %}
{# Contract Deletion Modal #}
{% include 'modals/contract-delete.twig' %}
{# Contract Deletion Modal #}
{% include 'modals/contract-delete-signed.twig' %}
{# Already Reserved Modal #}
{% include 'modals/check-reservation.twig' %}
{# Show History Modal #}
{% include 'modals/history-modal.twig' %}
{# Edit Contract1 Modal #}
{% include 'modals/edit-contract1.twig' %}
{# Edit Contract2 Modal #}
{% include 'modals/edit-contract2.twig' %}
{# Edit Contract3 Modal #}
{% include 'modals/edit-contract3.twig' %}

{% include 'components/reservation/reservation_form_previewer.twig' %}


<div class="modal fade" id="payment-content" data-keyboard="true" tabindex="-1" role="dialog"
     aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content" style="padding: 15px;">
            <div class="row">
                <div class="col-xs-12">

                    <div class="form-group">

                        <div class="col-xs-12 col-md-12">
                            <div class="form-group cform-group ">
                                <div class="col-xs-12 col-md-4 ">
                                    <label value="" for="numOfPayments">  {{ translate('number_of_payment') }} </label>
                                </div>
                                <div class="col-xs-12 col-md-8 ">
                                    <input type="number" id="_numOfPayments" class="form-control" required="">
                                </div>
                            </div>
                        </div>

                        <div class="col-xs-12 col-md-12">
                            <div class="form-group cform-group ">
                                <div class="col-xs-12 col-md-4 ">
                                    <label value="" for="numOfPayments">  {{ translate('total_amount') }} </label>
                                </div>


                                <div class="col-xs-12 col-md-8 ">
                                    <div class='input-group'>

                                        <input type="number" id="_totalPrice" class="form-control" value=""
                                               readonly>

                                    </div>
                                </div>

                            </div>
                        </div>


                    </div>

                    <div class="form-group">

                        <div class="col-xs-12 col-md-6 ">
                            <div class="form-group cform-group class-margin">
                                <div class="col-xs-12 col-md-5 ">
                                    <label for="_paymentStartDate"> {{ translate('start_date') }}  </label>
                                </div>
                                <div class="col-xs-12 col-md-7 ">
                                    <div class="input-group date datepicker">
                                        <input type="date" class="form-control ltr" id="_paymentStartDate" required="">
                                        <span class="input-group-addon">
                                       </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <br/>
                        <div class="row form-group">

                            <div class="col-xs-12 col-md-12"
                                 style="text-align: right; margin-top: 10px; margin-bottom: 8px;">
                                <button type="button" class="clear-payment btn btn-default "
                                        onclick="$('#_paymentTable tbody tr:gt(0)').remove()">
                                    {{ translate('clear_payments') }}
                                </button>

                                <button type="button" class="generate btn btn-primary "
                                        onclick="_generate('add');">
                                    {{ translate('generate') }}
                                </button>
                            </div>
                        </div>

                    </div>

                </div>

                <div class="col-xs-12">
                    <form id="contractsForm" class="form-horizontal-payments" role="form">
                        <table id="_paymentTable" class="table display table-striped table-bordered"
                               cellspacing="0" width="100%">
                            <thead class="btn-primary">
                            <tr>
                                <th>
                                    <h4 class="text-center">{{ translate('payment') }}</h4>
                                </th>
                                <th>
                                    <h4 class="text-center">{{ translate('payment_amount') }}</h4>
                                </th>
                                <th>
                                    <h4 class="text-center">{{ translate('payment_date') }}</h4>
                                </th>
                                <th>
                                    <h4 class="text-center">{{ translate('options') }}</h4>
                                </th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td>
                                    <input type="text" id="_payment" value=" " class="form-control" readonly/>
                                </td>
                                <td>
                                    <input type="number" id="_paymentAmount" class="form-control"/>
                                </td>
                                <td>
                                    <div class='input-group date datepicker'>
                                        <input type='date' class="form-control" id="_paymentDate"/>
                                        <span class="input-group-addon">
              </span>
                                    </div>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-primary" id="checkNewRow" onclick="_addRow()">
                                        <strong> {{ translate('add_payment') }} </strong></button>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </form>
                    <span id="error_msg" style="color:red;"></span>

                    <div dir="ltr" id="_payments_save_success" class="alert alert-success display-none" role="alert">
                        {{ translate('payment_saved') }}
                    </div>

                    <div dir="ltr" id="_payments_save_error" class="alert alert-danger display-none" role="alert">
                        {{ translate('payment_unsaved') }}
                    </div>


                    <div class="row">
                        <button class="btn btn-primary" onclick="savePayments()">save</button>
                    </div>

                </div>
            </div>


        </div>


    </div>
</div>


<div class="modal fade print-modal-lg" data-backdrop="static" data-keyboard="true" tabindex="-1" role="dialog"
     aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="row">
                <div class="col-xs-8 col-xs-offset-2">
                    <div class="form-group">
                        <h2 class="text-center">تنزيل العقد</h2>
                        <div class="col-xs-12 " style="margin-top: 30px;margin-bottom: 20px">
                            <select style="margin-bottom: 20px" id="printcontract"
                                    class="form-control contracts-select">
                                <option value="0">اختر العقد</option>
                                <option value="1">عقد إيجار منتهي بخيار الشراء</option>
                                <option value="2">الكمبيالات</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="pull-left">
                    <button class="btn btn-danger" data-dismiss="modal" id="cancelContractsModal">إلغاء</button>
                    <button id="print" class="btn btn-primary" onclick="checkContract()">طباعة</button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- spinner loader  loader-modal-lg modal -->
{% include 'components/common/spinnerLoader.twig' %}


<!-- Modal -->
<div class="modal fade" id="showPriceModal" data-backdrop="static" data-keyboard="true" tabindex="-1" role="dialog"
     aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="row">
                <div class="col-xs-8 col-xs-offset-2">
                    <div class="form-group">
                        <h2 class="text-center">متابعة العمليات على سعر الشقة</h2>
                        <p style="margin-bottom: 20px;text-align: right;">
                            &nbsp;لقد تم التحقق من العمليات على سعر الشقة وتبين أن سعر الشقة بعد الحجز

                            <span id="total-price"></span>
                            &nbsp; ومجموع مبالغ الدفعات هو
                            <span id="summation-payment"></span>


                        </p>
                        <div class="pull-left" style="margin: 20px;">
                            <button class="btn btn-danger pull-left" data-dismiss="modal" id="showPriceModal">الرجوع
                            </button>
                        </div>
                    </div>
                </div>
            </div>


        </div>


    </div>
</div>


<div class="row">

    <div class="col-lg-12 col-xs-12">
        <!-- class for table >> nowrap
        {% if user.primary_group_id == 1 %}
            <div class="col-xs-12 col-md-3 p-l-0">
                <div class="form-group">
                    <div class="col-xs-12 col-md-3 p-l-0">
                        <label for="customSearchBox">{{ translate('search') }}:</label>
                    </div>
                    <div class="col-xs-12 col-md-9">
                        <input type="text" id="customSearchBox" class="form-control">
                    </div>
                </div>
            </div>
        {% endif %}
        -->
        <table id="unitTable" class="table display " cellspacing="0" width="100%">
            <thead class="btn-primary">
            <tr id="pdf">
                <th>{{ translate('add_storage_or_parking') }}</th>
                <th>{{ translate('neighborhood') }}</th>
                <!-- <th data-priority="1" hidden="true">Unit</th>-->
                <th>{{ translate('company_code') }}</th>
                <th>{{ translate('tabu_code') }}</th>
                <th>{{ translate('area') }}</th>
                <th>{{ translate('status') }}</th>
                <th>{{ translate('building_type') }}</th>
                <th>{{ translate('last_modified_user') }}</th>
                <th>{{ translate('reservation_user') }}</th>
                <th style="display: none">{{ translate('building') }}</th>
                <th style="display: none">{{ translate('price') }}</th>
                <!-- <th>Neighborhood</th>
                <th>Floor</th>-->
                <th data-priority="2"></th>
                <th class="no-sort"></th>
                <th></th>
                <th>{{ translate('client_name') }}</th>
                <th>{{ translate('reservation_price') }}</th>
                <th>{{ translate('reservation_date') }}</th>
                <th>{{ translate('sales_guide_name') }}</th>
                <th>{{ translate('contract_price') }}</th>
                <th>{{ translate('finishing_price') }}</th>
                <th>{{ translate('contract_date') }}</th>
                <th></th>
            </tr>
            </thead>
            <tbody>

            </tbody>
        </table>
        <!-- canvas and div with id invoiceTemplate are two behind the scenes tags the second which contains the template for pdf print and the first is needed to print the pdf in correct form
        -->
        {% include 'unit/contract1_newStyle.twig' %}
        {% include 'unit/contract2_newStyle.twig' %}

        {% include 'unit/contract3.twig' %}
        {% include 'unit/IslamicBankContractNewStyle.twig' %}
        {% include 'unit/drafts_newStyle.twig' %}

    </div>
</div>
{# Sign  Contract Modal #}
{% include 'modals/contract-sign.twig' %}
{# Cancle Reason Modal #}
{% include 'modals/cancel-reaseon.twig' %}
{# Cancle Reason Modal #}
{% include 'modals/cancel-signed-reason.twig' %}
{# Cancel Information Modal #}
{% include 'modals/cancel-info.twig' %}
{% endblock %}

{% block page_scripts %}
    <script type="text/javascript">
        var csrf_token = $("meta[name=csrf_token]").attr("content");

        var flagg = 0, allow = 0;
        var prevRow;
        var paymentIndex = 1;
        // Edit By Ahmad , mssql_connection value based on success or fail connection
        var mssql_connection = 0;
        var mssql_data = 2;


        $(document).ready(function () {
            $.ajax({
                beforeSend: function () {
                    // Handle the beforeSend event
                    Pace.start();
                },
                complete: function () {
                    // Handle the complete event
                    Pace.stop();
                }
            });

            // Edit By Ahmad Tome >> clear error msg when select option not need connection with mssql db
            $("body").on("keyup change", "#pricePart3", function () {

                var tashteeb = parseInt($(this).val());
                var book = parseInt($("#pricePart0").val());

                $("#priceTotal").val(tashteeb + book);

                if (isNaN(parseInt($("#priceTotal").val()))) {
                    $("#priceTotal").val($("#pricePart0").val());
                }

                $('#pricePart1').val(Math.ceil($("#priceTotal").val() * 0.7));
                $('#pricePart2').val(Math.floor($("#priceTotal").val() * 0.3));

                var damageFine = Math.round((parseInt($("#priceTotal").val()) * 25 / 100));
                $("#penaltyClause").val(damageFine);
                $("#damageFine").val(damageFine);

            });

            var current_selected_row = "";
            $(document).on('click', '.addParkingOrReservation', function () {
                $("#ParkingStorageModal").modal("show")

                var data = $('#unitTable').DataTable().row(this).data();
                if (data == null) {
                    data = $('#unitTable').DataTable().row($(this).closest('td').parent()).data();
                }

                current_selected_row = data;
                console.log(data)
            });

            $('#paymentsModal, #paymentsModal2').on('click', function () {


                $('#_paymentTable tbody tr:gt(0)').remove();
                $('#_numOfPayments').val('');
                $('#_paymentStartDate').val('');
                $("#_payments_save_error").addClass('display-none')
                $("#_payments_save_success").addClass('display-none')


                var selection = $('#ParkingStorageSelect').val();

                if (selection == "parking") {
                    var selectedParking = $('#ParkingSelect').val();

                    // var selectedParkingFlag = $('option:selected', '#ParkingSelect').css('background-color') == "rgb(195, 155, 155)" ;
                    // if (!selectedParkingFlag) {
                    //     alert('Please reserve the parking first');
                    //     return;
                    // }

                    if (selectedParking) {
                        var parkingPrice = $('#final_price_parking').val() || 0;
                        var parkingCurrency = $('#parkingCurrency').text();
                        $('#_totalPrice').val(parkingPrice);
                        //$('#_selected_currency').text(parkingCurrency);

                        $.ajax({
                            type: "get",
                            url: site['uri']['public'] + "/parkingStorage/payments/" + selectedParking,
                            data: {
                                target: "parking",
                            }
                        }).done(function (data) {
                            data = JSON.parse(data);

                            data.forEach(function ($payment, index) {
                                var rowToAdd = '<tr><td><input type="text" id="_payment' + $payment['id'] + '" dir="auto" class="form-control" readonly="" value="' + (parseInt(index) + 1) + '"></td><td><input type="text" id="_paymentAmount' + $payment['id'] + '" dir="auto" class="form-control" value="' + addCommaToTheNumber($payment['amount']) + '"></td><td><input type="text" id="_paymentDate' + $payment['id'] + '" class="form-control" value="' + $payment['payment_date'] + '"></td><td><button onclick="$(this).parent().parent().remove()" class="btn btn-danger">Delete</button></td></tr>';
                                $("#_paymentTable").append(rowToAdd);
                            });

                            $('#payment-content').modal('show');
                        })

                    } else {
                        alert('Please Select Parking');
                    }
                } else if (selection == "extra-parking") {
                    var selectedParking = $('#ParkingSelect').val();

             
                    if (selectedParking) {
                        var parkingPrice = $('#final_price_parking').val() || 0;
                        var parkingCurrency = $('#parkingCurrency').text();
                        $('#_totalPrice').val(parkingPrice);

                        $.ajax({
                            type: "get",
                            url: site['uri']['public'] + "/parkingStorage/payments/" + selectedParking,
                            data: {
                                target: "parking",
                            }
                        }).done(function (data) {
                            data = JSON.parse(data);

                            data.forEach(function ($payment, index) {
                                var rowToAdd = '<tr><td><input type="text" id="_payment' + $payment['id'] + '" dir="auto" class="form-control" readonly="" value="' + (parseInt(index) + 1) + '"></td><td><input type="text" id="_paymentAmount' + $payment['id'] + '" dir="auto" class="form-control" value="' + addCommaToTheNumber($payment['amount']) + '"></td><td><input type="text" id="_paymentDate' + $payment['id'] + '" class="form-control" value="' + $payment['payment_date'] + '"></td><td><button onclick="$(this).parent().parent().remove()" class="btn btn-danger">Delete</button></td></tr>';
                                $("#_paymentTable").append(rowToAdd);
                            });

                            $('#payment-content').modal('show');
                        })

                    } else {
                        alert('Please Select Extra Parking');
                    }
                } else if (selection == "storage") {
                    var selectedStorage = $('#StorageSelect').val();

                    // var selectedStorageFlag = $('option:selected', '#StorageSelect').css('background-color') == "rgb(195, 155, 155)" ;
                    // if (!selectedStorageFlag) {
                    //     alert('Please reserve the storage first');
                    //     return;
                    // }


                    if (selectedStorage) {
                        var Storageprice = $('#final_price_storage').val() || 0;
                        var StoragepriceCurrency = $('#StoragepriceCurrency').text();
                        $('#_totalPrice').val(Storageprice);
                        // $('#_selected_currency').text(StoragepriceCurrency);


                        $.ajax({
                            type: "get",
                            url: site['uri']['public'] + "/parkingStorage/payments/" + selectedStorage,
                            data: {
                                target: "storage",
                            }
                        }).done(function (data) {
                            data = JSON.parse(data);

                            data.forEach(function ($payment, index) {
                                var rowToAdd = '<tr><td><input type="text" id="_payment' + $payment['id'] + '" dir="auto" class="form-control" readonly="" value="' + (parseInt(index) + 1) + '"></td><td><input type="text" id="_paymentAmount' + $payment['id'] + '" dir="auto" class="form-control" value="' + addCommaToTheNumber($payment['amount']) + '"></td><td><input type="text" id="_paymentDate' + $payment['id'] + '" class="form-control" value="' + $payment['payment_date'] + '"></td><td><button onclick="$(this).parent().parent().remove()" class="btn btn-danger">Delete</button></td></tr>';
                                $("#_paymentTable").append(rowToAdd);
                            });

                            $('#payment-content').modal('show');
                        })


                    } else {
                        alert('Please Select Storage');
                    }
                }

            });


            $('#ParkingStorageSelect').on("change", function () {

                var building = current_selected_row.building;
                var neighborhood = current_selected_row.neighborhood;

                $('#parkingdesc').val('')
                $('#parkingfloor').val('')
                $('#parking_number').val('')
                $('#parkingprice').val('')

                $('#Storagedesc').val('')
                $('#Storagearea').val('')
                $('#Storagefloor').val('')
                $('#Storagetabu').val('')
                $('#Storageprice').val('')
                $('#Storage_number').val('')

                $('#StorageImg').empty()
                $('#parkingImg').empty()

                if ($(this).val() == "storage") {
                    $('#parking-content').hide();
                    $('#storage-content').show();

                    var csrf_token = $("meta[name=csrf_token]").attr("content");
                    var url = site['uri']['public'] + "/getStorages/";
                    var params = {
                        building: building,
                        neighborhood: neighborhood,
                        csrf_token: encodeURIComponent(csrf_token)
                    };
                    $.ajax({
                        type: "get",
                        url: url,
                        data: params
                    }).done(function (data) {
                        if (data.length > 0) {
                            data = JSON.parse(data);
                            console.log(data)

                            $('#StorageSelect').empty();
                            $('#StorageSelect').append('<option disabled selected value="0">' + _translate('select_storage') + '</option>');
                            for (var i = 0; i < data.length; i++) {
                                if (data[i]["available"] == "0" || data[i]["available"] == 0) {
                                    $('#StorageSelect').append('<option value="' + data[i]["id"] + '">' + data[i]["rawabi_code"] + '</option>"');
                                } else {
                                    $('#StorageSelect').append('<option style="background-color: #c39b9b;"  value="' + data[i]["id"] + '">' + data[i]["rawabi_code"] + '</option>"');

                                }
                            }


                        } else {
                            $('#StorageSelect').empty();
                            $('#StorageSelect').append('<option disabled selected value="0">' + _translate('select_storage') + '</option>');

                            console.log("no data")

                        }
                    })
                        .fail(function (err) {
                            alert(_translate('error'))
                            console.log("err", err);
                        });


                } else if ($(this).val() == "parking") {
                    $('#parking-content').show();
                    $('#storage-content').hide();


                    var csrf_token = $("meta[name=csrf_token]").attr("content");
                    var url = site['uri']['public'] + "/getParkings/";
                    var params = {
                        building: building,
                        neighborhood: neighborhood,
                        csrf_token: encodeURIComponent(csrf_token)
                    };
                    $.ajax({
                        type: "get",
                        url: url,
                        data: params
                    }).done(function (data) {
                        if (data.length > 0) {
                            data = JSON.parse(data);
                            console.log(data)

                            $('#ParkingSelect').empty();
                            $('#ParkingSelect').append('<option disabled selected value="0">' + _translate('select_parking') + '</option>');
                            for (var i = 0; i < data.length; i++) {
                                if (data[i]["available"] == "0" || data[i]["available"] == 0) {
                                    $('#ParkingSelect').append('<option value="' + data[i]["id"] + '">' + data[i]["rawabi_code"] + '</option>"');
                                } else {
                                    $('#ParkingSelect').append('<option style="background-color: #c39b9b;"  value="' + data[i]["id"] + '">' + data[i]["rawabi_code"] + '</option>"');
                                }
                            }


                        } else {
                            $('#ParkingSelect').empty();
                            $('#ParkingSelect').append('<option disabled selected value="0">' + _translate('select_parking') + '</option>');

                            console.log("no data")

                        }
                    })
                        .fail(function (err) {
                            alert(_translate('error'))
                            console.log("err", err);
                        });


                }
                else if ($(this).val() == "extra-parking") {
                    $('#parking-content').show();
                    $('#storage-content').hide();


                    var csrf_token = $("meta[name=csrf_token]").attr("content");
                    var url = site['uri']['public'] + "/getExtraParkings/";
                    var params = {
                        building: building,
                        neighborhood: neighborhood,
                        csrf_token: encodeURIComponent(csrf_token)
                    };
                    $.ajax({
                        type: "get",
                        url: url,
                        data: params
                    }).done(function (data) {
                        if (data.length > 0) {
                            data = JSON.parse(data);
                            console.log(data)

                            $('#ParkingSelect').empty();
                            $('#ParkingSelect').append('<option disabled selected value="0">' + _translate('select_parking') + '</option>');
                            for (var i = 0; i < data.length; i++) {
                                if (data[i]["available"] == "0" || data[i]["available"] == 0) {
                                    $('#ParkingSelect').append('<option value="' + data[i]["id"] + '">' + data[i]["rawabi_code"] + '</option>"');
                                } else {
                                    $('#ParkingSelect').append('<option style="background-color: #c39b9b;"  value="' + data[i]["id"] + '">' + data[i]["rawabi_code"] + '</option>"');
                                }
                            }


                        } else {
                            $('#ParkingSelect').empty();
                            $('#ParkingSelect').append('<option disabled selected value="0">' + _translate('select_parking') + '</option>');

                            console.log("no data")

                        }
                    })
                        .fail(function (err) {
                            alert(_translate('error'))
                            console.log("err", err);
                        });


                }
            });


            $('#StorageSelect').on("change", function () {


                $.ajax({
                    type: "get",
                    url: site['uri']['public'] + '/currency/Unit_Reservation/' + current_selected_row.id,
                    async: true
                }).done(function (data) {
                    data = parseInt(data);
                    if (data) {
                        $('#currency_exchange_storage').prop('disabled', true);
                    } else {
                        $('#currency_exchange_storage').prop('disabled', false);
                    }
                });


                if ($('option:selected', this).css('background-color') == "rgb(195, 155, 155)") {
                    $('#reserveStorage').text('delete reservation');
                    $('#currency_exchange_storage').prop('disabled', true);
                } else {
                    $('#reserveStorage').text('reserve');
                    //$('#currency_exchange_storage').prop('disabled', false);
                }

                $('#StorageImg').empty()
                $('#parkingImg').empty()

                var id = $(this).val();
                var csrf_token = $("meta[name=csrf_token]").attr("content");
                var url = site['uri']['public'] + "/getStorageInfo/";
                var params = {id: id, csrf_token: encodeURIComponent(csrf_token)};
                $.ajax({
                    type: "get",
                    url: url,
                    data: params
                }).done(function (data) {
                    if (data.length > 0) {
                        data = JSON.parse(data);
                        console.log(data)
                        $('#storageid').val(data[0]['id'])
                        $('#Storagedesc').val(data[0]['tabu_description'])
                        $('#Storagearea').val(data[0]['area'])
                        $('#Storagefloor').val(data[0]['floor'])
                        $('#Storagetabu').val(data[0]['tabu_code'])
                        $('#Storageprice').val(data[0]['price'])
                        $('#Storage_number').val(data[0]['storage_number'])
                        $('#StoragepriceCurrency').text("$");


                        if (data[1]) {

                            for (var j = 0; j < data[1].length; j++) {
                                $('#StorageImg').append('<div class="col-sm-12 col-md-12"> <img style="width:85%; height: 280px; text-align: center; margin: 5px;" src="' + site['uri']['public'] + "/" + data[1][j].filepath + '" /><button class="deletePlan" class="btn btn-default" data-type="storage" data-id="' + data[1][j].id + '"> ' + _translate('delete_image') + '</button>  <hr/></div>')
                            }
                            $('#StorageImg').show()

                        }

                        $.ajax({
                            type: "get",
                            url: site['uri']['public'] + '/currency/UnitByReservation/' + current_selected_row.id,
                            data: params,
                            async: true
                        }).done(function (data) {

                            // if (data == "Nis") {
                            //     // $('#currency_exchange_parking').val(0);
                            //     $('#currency_exchange_storage').prop("disabled", false);
                            //     $('#currnecy_should_change_storage').text("the currency should change to NIS Please enter the exchange rate");
                            // } else {
                            //     $('#currency_exchange_storage').prop("disabled", true);
                            //     $('#currnecy_should_change_storage').text("");
                            //
                            // }


                            $.ajax({
                                type: "get",
                                url: site['uri']['public'] + '/getReservation/unit/' + current_selected_row.id + '/parking/' + id,
                                data: {parkingStorageId: id, unitId: current_selected_row.id},
                                async: true
                            }).done(function (data) {
                                data = JSON.parse(data);
                                if (data.length) {
                                    $('#currency_exchange_storage').val(data[0]['exchange_rate']);
                                    $('#final_price_storage').val(parseFloat($('#Storageprice').val()) * parseFloat(data[0]['exchange_rate']));
                                } else {
                                    $('#currency_exchange_storage').val(1);
                                    $('#final_price_storage').val(parseFloat($('#Storageprice').val()));
                                }

                            });
                        });


                    } else {

                        console.log("no data")
                    }
                })
                    .fail(function (err) {
                        alert(_translate('error'))
                        console.log("err", err);
                    });

            });


            $('#ParkingSelect').on("change", function () {

                $.ajax({
                    type: "get",
                    url: site['uri']['public'] + '/currency/Unit_Reservation/' + current_selected_row.id,
                    async: true
                }).done(function (data) {
                    data = parseInt(data);
                    if (data) {
                        $('#currency_exchange_parking').prop('disabled', true);
                    } else {
                        $('#currency_exchange_parking').prop('disabled', false);
                    }
                });

                    if ($('option:selected', this).css('background-color') == "rgb(195, 155, 155)") {
                        $('#reserveParking').text('delete reservation');
                        $('#currency_exchange_parking').prop('disabled', true);
                    } else {
                        $('#reserveParking').text('reserve')
                        // $('#currency_exchange_parking').prop('disabled', false);

                    }
                    $('#StorageImg').empty()
                    $('#parkingImg').empty()

                    var id = $(this).val();
                    var csrf_token = $("meta[name=csrf_token]").attr("content");
                    var url = site['uri']['public'] + "/getParkingInfo/";

                    var selection = $('#ParkingStorageSelect').val();

                    if(selection == 'extra-parking'){
                        url = site['uri']['public'] + "/getExtraParkingInfo/";
                    }

                    var params = {id: id, csrf_token: encodeURIComponent(csrf_token)};
                    $.ajax({
                        type: "get",
                        url: url,
                        data: params
                    }).done(function (data) {
                        if (data.length > 0) {
                            data = JSON.parse(data);
                            console.log(data)

                            $('#parkingid').val(data[0]['id'])
                            $('#parkingdesc').val(data[0]['description'])
                            $('#parkingfloor').val(data[0]['floor'])
                            $('#parking_number').val(data[0]['parking_number'])
                            $('#parkingprice').val(data[0]['price']);
                            $('#parkingCurrency').text("$");


                            if (data[1]) {

                                for (var j = 0; j < data[1].length; j++) {
                                    $('#parkingImg').append('<div class="col-sm-12 col-md-12"> <img style="width:85%; height: 280px; text-align: center; margin: 5px;" src="' + site['uri']['public'] + "/" + data[1][j].filepath + '" /><button class="deletePlan" class="btn btn-default" data-type="parking" data-id="' + data[1][j].id + '" > ' + _translate('delete_image') + '</button><hr/></div>')
                                }
                                $('#parkingImg').show()

                            }

                            $.ajax({
                                type: "get",
                                url: site['uri']['public'] + '/currency/UnitByReservation/' + current_selected_row.id,
                                data: params,
                                async: true
                            }).done(function (data) {

                                // if (data == "Nis") {
                                //     // $('#currency_exchange_parking').val(0);
                                //     $('#currency_exchange_parking').prop("disabled", false);
                                //     $('#currnecy_should_change').text("the currency should change to NIS Please enter the exchange rate");
                                // } else {
                                //     $('#currency_exchange_parking').prop("disabled", true);
                                //     $('#currnecy_should_change').text("");
                                //
                                // }


                                $.ajax({
                                    type: "get",
                                    url: site['uri']['public'] + '/getReservation/unit/' + current_selected_row.id + '/parking/' + id,
                                    data: {parkingStorageId: id, unitId: current_selected_row.id},
                                    async: true
                                }).done(function (data) {
                                    data = JSON.parse(data);
                                    if (data.length) {
                                        $('#currency_exchange_parking').val(data[0]['exchange_rate']);
                                        $('#final_price_parking').val(parseFloat($('#parkingprice').val()) * parseFloat(data[0]['exchange_rate']));
                                    } else {
                                        $('#currency_exchange_parking').val(1);
                                        $('#final_price_parking').val(parseFloat($('#parkingprice').val()));
                                    }

                                });
                            });


                        } else {

                            console.log("no data")
                        }
                    })
                        .fail(function (err) {
                            alert(_translate('error'))
                            console.log("err", err);
                        });
                });


            $('#currency_exchange_parking').on('keyup', function () {
                $('#final_price_parking').val(parseFloat($('#currency_exchange_parking').val()) * parseFloat($('#parkingprice').val()));
                if (isNaN($('#final_price_parking').val())) {
                    $('#final_price_parking').val($('#parkingprice').val())
                }
            });

            $('#currency_exchange_storage').on('keyup', function () {
                $('#final_price_storage').val(parseFloat($('#currency_exchange_storage').val()) * parseFloat($('#Storageprice').val()));
                if (isNaN($('#final_price_storage').val())) {
                    $('#final_price_storage').val($('#Storageprice').val())
                }
            });

            $('#reserveParking').on("click", function () {

                var id = $('#parkingid').val();
                var rawabi_code = $("#ParkingSelect option:selected").html()

                if (id == "" || id == null) {
                    alert(_translate('please_select_parking'))
                } else {
                    $('.loader-modal-lg').modal('show')


                    if ($('#reserveParking').text() == "delete reservation") {
                        var csrf_token = $("meta[name=csrf_token]").attr("content");
                        var url = site['uri']['public'] + "/DeleteparkingStorageReservation/";
                        var params = {
                            id: id,
                            uid: current_selected_row.id,
                            type: "parking",
                            rawabi_code: rawabi_code,
                            csrf_token: encodeURIComponent(csrf_token)
                        };

                        $.ajax({
                            type: "post",
                            url: url,
                            data: params
                        }).done(function (data) {
                            $('.loader-modal-lg').modal('hide')
                            $("#ParkingStorageModal").modal("hide");
                            resetModel();
                            //Ajax request
                            //$('#unitTable').DataTable().ajax.reload(null, false);
                            if (data === 'no reservation') {
                                alert(_translate('no_reservation_msg'))
                            } else {
                                alert(_translate('delete_reservation_msg'))
                            }

                        })
                            .fail(function (err) {
                                $('.loader-modal-lg').modal('hide')
                                alert(_translate('error'))
                                console.log("err", err);
                            });


                    } else {

                        //adawoud

                        $('#ParkingStorageSelect').val()

                        var selection = $('#ParkingStorageSelect').val();

                        var parkingType = "parking"; 

                        if (selection == "extra-parking") 
                        {
                            parkingType = "extra-parking";
                        }

                        var csrf_token = $("meta[name=csrf_token]").attr("content");
                        var url = site['uri']['public'] + "/parkingStorageReservation/";
                        var params = {
                            id: id,
                            uid: current_selected_row.id,
                            type: parkingType,
                            rawabi_code: rawabi_code,
                            currency_exchange_parking: $('#currency_exchange_parking').val(),
                            csrf_token: encodeURIComponent(csrf_token)
                        };

                        $.ajax({
                            type: "post",
                            url: url,
                            data: params
                        }).done(function (data) {
                            $('.loader-modal-lg').modal('hide')
                            $("#ParkingStorageModal").modal("hide");
                            resetModel();
                            //Ajax request
                            //$('#unitTable').DataTable().ajax.reload(null, false);
                            if (data === 'no reservation') {
                                alert(_translate('no_reservation_msg'))
                            } else {
                                alert(_translate('success_reservation_msg'))
                            }

                        })
                            .fail(function (err) {
                                $('.loader-modal-lg').modal('hide')
                                alert(_translate('error'))
                                console.log("err", err);
                            });
                    }


                }
            })

            $('#reserveStorage').on("click", function () {
                var id = $('#storageid').val()
                var rawabi_code = $("#StorageSelect option:selected").html()


                if (id == "" || id == null) {
                    alert(_translate('please_select_storage'))
                } else {
                    $('.loader-modal-lg').modal('show')


                    if ($('#reserveStorage').text() == "delete reservation") {
                        var csrf_token = $("meta[name=csrf_token]").attr("content");
                        var url = site['uri']['public'] + "/DeleteparkingStorageReservation/";
                        var params = {
                            id: id,
                            uid: current_selected_row.id,
                            type: "storage",
                            rawabi_code: rawabi_code,
                            csrf_token: encodeURIComponent(csrf_token)
                        };

                        $.ajax({
                            type: "post",
                            url: url,
                            data: params
                        }).done(function (data) {
                            $('.loader-modal-lg').modal('hide')
                            $("#ParkingStorageModal").modal("hide");
                            resetModel();
                            //Ajax request
                            //$('#unitTable').DataTable().ajax.reload(null, false);
                            if (data === 'no reservation') {
                                alert(_translate('no_reservation_msg'))
                            } else {
                                alert(_translate('delete_reservation_msg'))
                            }

                        })
                            .fail(function (err) {
                                $('.loader-modal-lg').modal('hide')
                                alert(_translate('error'))
                                console.log("err", err);
                            });


                    } else {


                        var csrf_token = $("meta[name=csrf_token]").attr("content");
                        var url = site['uri']['public'] + "/parkingStorageReservation/";
                        var params = {
                            id: id,
                            uid: current_selected_row.id,
                            type: "storage",
                            rawabi_code: rawabi_code,
                            currency_exchange_parking: $('#currency_exchange_storage').val(),
                            csrf_token: encodeURIComponent(csrf_token)
                        };

                        $.ajax({
                            type: "post",
                            url: url,
                            data: params
                        }).done(function (data) {
                            $('.loader-modal-lg').modal('hide')
                            console.log(data);
                            $("#ParkingStorageModal").modal("hide");
                            resetModel();
                            //Ajax request
                            //$('#unitTable').DataTable().ajax.reload(null, false);
                            if (data === 'no reservation') {
                                alert(_translate('no_reservation_msg'))
                            } else {
                                alert(_translate('success_reservation_msg'))
                            }
                        })
                            .fail(function (err) {
                                $('.loader-modal-lg').modal('hide')
                                alert(_translate('error'))
                                console.log("err", err);
                            });
                    }
                }
            });


            $(document).on("click", '.deletePlan', function () {
                var ele = $(this);
                var id = $(this).attr('data-id');
                var csrf_token = $("meta[name=csrf_token]").attr("content");
                var url = site['uri']['public'] + "/deletePlan/";
                var type = $(this).attr('data-type');
                ;

                var params = {id: id, type: type, csrf_token: encodeURIComponent(csrf_token)};

                $.ajax({
                    type: "post",
                    url: url,
                    data: params
                }).done(function (data) {
                    alert(_translate('image_deleted_successfully'))
                    ele.parent().empty();
                })
                    .fail(function (err) {
                        alert(_translate('error'))
                        console.log("err", err);
                    });
            })


            $("#cancelReservationBtn , #tempSave, #modalcanclereservation").on("click", function () {
                $("#additionalTemp>ul").empty();
                $("#DiscountTemp>ul").empty();
                $("#directInstallmentAdded").val('');
                $("#directInstallmentAdded").attr('disabled', 'disabled')
                $("#PaymentMethod_select")[0].selectedIndex = 0;
            });

            $("#openCustomerDetailsBtn").on("click", function () {
                if ($(this).text() == _translate('confirm_and_send_email')) {
                    $("#additionalTemp>ul").empty();
                    $("#DiscountTemp>ul").empty();
                    $("#directInstallmentAdded").val('');
                    $("#directInstallmentAdded").attr('disabled', 'disabled')
                    $("#PaymentMethod_select")[0].selectedIndex = 0;

                }
            })

            // Edited By Ahmad Tome
            $("body").on("keyup change", "#releasePeriod", function () {
                if (!isNaN(parseInt($(this).val()))) {
                    // var now = new Date();
                    var now = new Date($("#contract2Date").val());

                    var day = ("0" + now.getDate()).slice(-2);
                    var month = ("0" + (now.getMonth() + 1)).slice(-2);

                    var today = now.getFullYear() + "-" + (month) + "-" + (day);

                    $('#startRentDate').val(today);

                    var tt = document.getElementById('startRentDate').value;

                    var date = new Date(tt);

                    var newdate = new Date(date);

                    newdate.setDate(newdate.getDate() + parseInt($(this).val()));

                    var dd = newdate.getDate();
                    var mm = newdate.getMonth() + 1;
                    var y = newdate.getFullYear();

                    var someFormattedDate = mm + '/' + dd + '/' + y;
                    document.getElementById('startRentDate').value = someFormattedDate;
                }

                var $splitD = $('#startRentDate').val().split('/'),
                    $endDate = $('#endRentDate'),
                    $monthN = $('#rentPeriod'),
                    sDay = Number($splitD[1]);
                $('#startRentDate').val()
                    ? $endDate.val(checkMonth($splitD, Number($monthN.val()), sDay)[0])
                    : $endDate.val('Please Enter Input Date');
            })

            // Edited By Ahmad Tome
            $("body").on("keyup change", "#rentPeriod", function () {
                var $splitD = $('#startRentDate').val().split('/'),
                    $endDate = $('#endRentDate'),
                    $monthN = $('#rentPeriod'),
                    sDay = Number($splitD[1]);
                $('#startRentDate').val()
                    ? $endDate.val(checkMonth($splitD, Number($monthN.val()), sDay)[0])
                    : $endDate.val('Please Enter Input Date');
            })

            // Edit By Ahmad Tome >> clear error msg when select option not need connection with mssql db
            $("body").on("keyup change", "#damageFine", function () {
                $("#penaltyClause").val($("#damageFine").val());
            });

            $("body").on("keyup change", "#extraAdditions3", function () {

                var originprice = parseInt($('#pricePart0').val());
                $('#price3Total').val(parseInt($(this).val()) + originprice);

                $('#price3Part2').val(Math.floor(parseInt($('#price3Total').val()) * 0.3));
                $('#price3Part1').val(Math.ceil(parseInt($('#price3Total').val()) * 0.7));

                if (isNaN($('#price3Total').val())) {
                    $('#price3Total').val(originprice);
                    $('#price3Part2').val(Math.floor(parseInt($('#price3Total').val()) * 0.3));
                    $('#price3Part1').val(Math.ceil(parseInt($('#price3Total').val()) * 0.7));
                }

            });


            $("body").on("keyup change", "#arabon,#carabon", function () {
                $("#paymentTable tbody").empty();
                $("#cpaymentTable tbody").empty();
            });

            $("#cpaymentTable").on("keyup change", ".form-control", function () {
                $(this).closest("tr").addClass("new-apend");

            });

            var filtersAndSearchData = function (data) {
                data.statusFilter = getAvailableFilterValue();
                data.neigimageshborhoodFilter = getNeighborhoodFilterFilterValue();
                data.buildingTypeFilter = getBuildingTypeFilterValue();
                data.searchText = getSearchText();
            };

            var buttonCommon = {
                exportOptions: {
                    format: {
                        body: function (data, row, column, node) {
                            debugger
                            // Strip $ from salary column to make it numeric
                            return column === 5 ?
                                data.replace(/[$,]/g, '') :
                                data;
                        }
                    }
                }
            };
            var $customTable = $('#unitTable').DataTable({


                "processing": false,
                "serverSide": true,
                "bPaginate": true,
                "paging": true,
                'ajax': {
                    "type": "Get",
                    "url": site['uri']['public'] + '/unit/data/',
                    "data": filtersAndSearchData,
                    "dataSrc": function (json) {
                        return json['data'];
                    }
                },
                "columns": [
                    {
                        "data": function (row, type, val, meta) {

                            var labelClass = "label-danger";

                            if (row.available != 1) {
                                return '<span style="color: white; font-size: 15px;"  class="addParkingOrReservation btn btn-sm ' + labelClass + '">' + '+' + '</span >';
                            } else {
                                return '<span style="display: none;" class="label label-sm ' + labelClass + '">' + '+' + '</span>';
                            }
                        }

                    },
                    {"data": "neighborhood"},
                    {"data": "rawabi_code"},
                    {"data": "tapu_code"},
                    {"data": "size"},
                    {
                        "data": function (row, type, val, meta) {
                            // return row.available.toString();
                            var status, labelClass;
                            if (row.available == 1) {
                                status = _translate('available');
                                labelClass = "label-success";
                            } else if (row.available == 0) {
                                status = _translate('reserved');
                                labelClass = "label-danger";
                            } else if (row.available == 2) {
                                status = _translate('pending');
                                labelClass = "label-warning";
                            } else if (row.available == 3) {
                                status = _translate('purchased');
                                labelClass = "label-primary";
                            } else if (row.available == 4) {
                                status = _translate('rented');
                                labelClass = "label-rented";
                            } else if (row.available == 5) {
                                status = _translate('signed');
                                labelClass = "label-rented";
                            } else if (row.available == 6) {
                                status = "Signed Cancellation";
                                labelClass = "label-warning";
                            }

                            if (row.local_neighborhood != "") {
                                row.local_neighborhood = row.neighborhood;
                            }

                            if (row.neighborhood) {

                                row.neighborhood = row.neighborhood.split("-")[0];

                            }


                            return '<span class="label label-sm ' + labelClass + '">' + status + '</span>';

                        }, "className": "myclass"
                    },

                    {"data": "building_type"},
                    {"data": "last_modified_user"},
                    {"data": "reservation_user"},
                    {"visible": false, "data": "building"},
                    {"visible": false, "data": "price"},
                    {
                        "data": function (row, type, val, meta) {
                            if (row.available == 0)//reserved
                            {
                                if ({{ primary_group }} == "1"
                            )
                                {
                                    return "<button style=' margin : 0 2px 0 0 ; width : 100px; background-color: #5cb85c;border-color: #5cb85c;' class='btn btn-primary receipt-btn purchase-unit center-item ' data-toggle='tooltip' data-placement='bottom' title='Purchase Unit' onclick='showContractModal(this)'>" + _translate('purchase') + "</button><button id='reqTocancel' style='    display: inline-block; width: 103px;' class='btn btn-danger reserve-now {% if user.primary_group_id == 1 %}btn-block{% endif %}' onclick='requestToCancel(this)'> " + _translate('req_cancel_reservation') + "</button>";
                                }
                                return "<button style=' margin : 0 2px 0 0 ; width : 100px; background-color: #5cb85c;border-color: #5cb85c;' class='btn btn-primary receipt-btn purchase-unit center-item ' data-toggle='tooltip' data-placement='bottom' title='Purchase Unit' onclick='showContractModal(this)'>" + _translate('purchase') + "</button><button style='width : 100px; margin-left: 10px; margin : 0 2px 0 0;' class='btn btn-danger margin-right-5px cancel-reservation ' id='cancelresv' onclick='showCancellationModal(this)'> &nbsp;" + _translate('cancel_reservation') + "&nbsp;</button>";
                            } else if (row.available == 1)//available
                                return "<button style ='background-color:#5cb85c' class='btn btn-success margin-right-5px btn-width reserve-now {% if user.primary_group_id == 1 %}btn-block{% endif %}' onclick='reserveNow(this);'> " + _translate('reserve_now') + "<i class='fa fa-hand-o-up' aria-hidden='true'></i></button>";

                            else if (row.available == 2) {
                                if ({{ primary_group }} == "1"
                            )
                                {
                                    return "<span class='label label-warning btn-width label-lg {% if user.primary_group_id == 1 %}label-block{% endif %}'>" + _translate('pending_to_cancel') + "</span>";
                                }
                                return "<button style=' margin : 0 5px 0 0 ; width : 200px; background-color: #5cb85c;border-color: #5cb85c;' class='btn btn-warning margin-right-5px btn-width-2 approve' onclick='showReasonModal(this, false)'> " + _translate('approve_cancellation') + " <i class='fa fa-thumbs-up' aria-hidden='true'></i></button>";

                            } else if (row.available == 4)//Rented
                                return "<span class='label label-rented btn-width label-lg label-block'>" + _translate('rented') + "</span>";
                            else if (row.available == 5)//Signed
                                return "<span class='label label-rented btn-width label-lg label-block'>" + _translate('signed') + "</span>";
                            else if (row.available == 6) {//Cancelled Purchased
                                if ({{ primary_group }} == "1"
                            )
                                {
                                    return "<span class='label label-warning btn-width label-lg {% if user.primary_group_id == 1 %}label-block{% endif %}'>" + _translate('pending_to_cancel') + "</span>";
                                }
                                return "<button style=' margin : 0 5px 0 0 ; width : 200px; background-color: #5cb85c;border-color: #5cb85c;' class='btn btn-warning margin-right-5px btn-width-2 approve' onclick='showReasonModal(this, false)'> " + _translate('approve_cancellation') + " <i class='fa fa-thumbs-up' aria-hidden='true'></i></button>";
                            } else // purchased -> we need to enable edit button
                                return "<button  style='margin : 0 5px 0 0 ; width : 97px; background-color: #0e1a35;'type='button' id='edit-contract' class='btn  btn-primary' data-toggle='modal' onclick='showContractModal(this, true)'>" + _translate('edit') + "</button><button style='margin : 0 5px 0 0 ; width : 97px; background-color: #0e1a35;' type='button' id='edit-contract' class='btn  btn-primary' data-toggle='modal' onclick='showSignModel(this)'>" + _translate('sign') + "</button>";

                        }
                    },
                    {
                        "data": function (row, type, val, meta) {


                            if (row.available == 0) {//reserved
                                var start = "<div class='btn-group'>\
                                        <button  type='button' class='btn btn-primary  dropdown-toggle print-menue' data-toggle='dropdown' id='actionmenu'>\
                                         " + _translate('print') + " \
                                         <span class='caret'></span>\
                                         </button>\
                                         <ul style='min-width:150px; margin: 2px 0 10px -40px ;' class='dropdown-menu '  role='menu' aria-labelledby='actionmenu'>\
                                         <li>\n                                                 <button style='width :130px; margin:2px 2px 8px 10px' class='btn btn-primary receipt-btn'\n\n \
                                                                                                data-toggle='tooltip' data-placement='bottom' title='Print Receipt'\n\n                           \
                                                                                                                             onclick='return pdfFunctionality($(this).parent().parent().parent(),\"receipt\");' >\n\n " + _translate('receipt') + "  <i class='fa fa-file-pdf-o fa-lg' aria-hidden='true'></i></button>\n                                             </li>";
                                var mid = "";

                                if (row.parkingId) {
                                    mid += "<li>\n" +
                                        " <button style='width :130px; margin:2px 2px 8px 10px' class='btn btn-primary receipt-btn'\n\n \n " +
                                        " data-toggle='tooltip' data-placement='bottom' title='Print Parking Receipt'\n\n onclick='return pdfFunctionalityForParking($(this).parent().parent().parent(),\"Parkingreceipt\" ," + row.parkingId + ");' >\n\n  " +
                                        " Parking Receipt   <i class='fa fa-file-pdf-o fa-lg' aria-hidden='true'></i></button></li>";
                                }
                                if (row.storageId) {
                                    mid += "<li>\n" +
                                        " <button style='width :130px; margin:2px 2px 8px 10px' class='btn btn-primary receipt-btn'\n\n \n " +
                                        " data-toggle='tooltip' data-placement='bottom' title='Print Storage Receipt'\n\n onclick='return pdfFunctionalityForStorage($(this).parent().parent().parent(),\"Storagereceipt\"," + row.storageId + ");' >\n\n  " +
                                        " Storage Receipt   <i class='fa fa-file-pdf-o fa-lg' aria-hidden='true'></i></button></li>";
                                }


                                var end = "</ul></div>";


                                return start + mid + end;

                            }

                            if (row.available == 1)//Available
                                return "<div class='btn-group'><button  type='button' class='btn btn-primary  dropdown-toggle' style='width:70px;' disabled> " + _translate('print') + " </button></div>"

                            if (row.available == 4)//Rented
                                return "<div class='btn-group'><button  type='button' class='btn btn-primary  dropdown-toggle' style='width:70px;' disabled> " + _translate('print') + " </button></div>"

                            if (row.available == 5)//Signed
                                return "<div class='btn-group'><button  type='button' class='btn btn-primary  dropdown-toggle' style='width:70px;' disabled> " + _translate('print') + " </button></div>";


                            else {
                                var start = "<div class='btn-group'>" +
                                    "<button  type='button' class='btn btn-primary  dropdown-toggle print-menue' data-toggle='dropdown' id='actionmenu'>" +
                                    " " + _translate('print') + "" +
                                    " <span class='caret'></span>" +
                                    "</button>" +
                                    "<ul style='min-width:150px; margin: 2px 0 10px -40px ;' class='dropdown-menu '  role='menu' aria-labelledby='actionmenu'><li><button style='width :130px; margin:2px 2px 8px 10px' class='btn btn-primary receipt-btn'\n\n                                    data-toggle='tooltip' data-placement='bottom' title='Print Receipt'\n\n                                    onclick='return pdfFunctionality($(this).parent().parent().parent(),\"receipt\");' >\n\n                             Receipt   <i class='fa fa-file-pdf-o fa-lg' aria-hidden='true'></i></button></li><li><button style='width :130px; margin:2px 2px 2px 10px' class='btn btn-primary print-btn' data-toggle='tooltip' data-placement='bottom' title='Download Contract' onclick='checkContractType($(this).parent().parent().parent())'> Contract <i class='fa fa-file-pdf-o fa-lg' aria-hidden='true'></i></button></li>";
                                var mid = "";

                                if (row.parkingId) {
                                    mid += "<li>\n" +
                                        " <button style='width :130px; margin:2px 2px 8px 10px' class='btn btn-primary receipt-btn'\n\n \n " +
                                        " data-toggle='tooltip' data-placement='bottom' title='Print Parking Receipt'\n\n onclick='return pdfFunctionalityForParking($(this).parent().parent().parent(),\"Parkingreceipt\" ," + row.parkingId + ");' >\n\n  " +
                                        " " + _translate('parking_receipt') + "  <i class='fa fa-file-pdf-o fa-lg' aria-hidden='true'></i></button></li>";
                                }
                                if (row.storageId) {
                                    mid += "<li>\n" +
                                        " <button style='width :130px; margin:2px 2px 8px 10px' class='btn btn-primary receipt-btn'\n\n \n " +
                                        " data-toggle='tooltip' data-placement='bottom' title='Print Storage Receipt'\n\n onclick='return pdfFunctionalityForStorage($(this).parent().parent().parent(),\"Storagereceipt\"," + row.storageId + ");' >\n\n  " +
                                        " " + _translate('storage_receipt') + "   <i class='fa fa-file-pdf-o fa-lg' aria-hidden='true'></i></button></li>";
                                }


                                var end = "</ul></div>";


                                return start + mid + end;
                            }


                        }
                    },


                    {
                        "data": function (row, type, val, meta) {

                            return " <div class='btn-group'><button  type='button' class='btn btn-primary glyphicon glyphicon-picture   id='imgbutton' onclick='showImg(this)'> </button>";
                        }
                    },
                    // display none
                    {

                        "visible": false,
                        "searchable": false,
                        "data": function (row, type, val, meta) {
                            if (row.available == 0 || row.available == 3) {
                                if (row.customer_name == null || row.customer_name == "undefined")
                                    row.customer_name = "";
                                return ' <td>' + row.customer_name + '</td>';
                            } else {
                                return '';
                            }

                        }
                    },
                    // display none
                    {

                        "visible": false,
                        "searchable": false,
                        "data": function (row, type, val, meta) {
                            if (row.available == 0 || row.available == 3) {
                                if (row.Reservation_price == null || row.Reservation_price == "undefined")
                                    row.Reservation_price = "";
                                return ' <td>' + row.Reservation_price + '</td>';
                            } else {
                                return '';
                            }

                        }
                    },
                    // display none
                    {

                        "visible": false,
                        "searchable": false,
                        "data": function (row, type, val, meta) {
                            if (row.available == 0 || row.available == 3) {
                                if (row.reservation_date == null || row.reservation_date == "undefined")
                                    row.reservation_date = "";
                                return ' <td>' + row.reservation_date + '</td>';
                            } else {
                                return '';
                            }

                        }
                    },
                    // display none
                    {

                        "visible": false,
                        "searchable": false,
                        "data": function (row, type, val, meta) {
                            if (row.available == 0 || row.available == 3) {
                                if (row.user_name == null || row.user_name == "undefined")
                                    row.user_name = "";
                                return ' <td>' + row.user_name + '</td>';
                            } else {
                                return '';
                            }

                        }
                    },
                    // display none
                    {

                        "visible": false,
                        "searchable": false,
                        "data": function (row, type, val, meta) {
                            if (row.available == 3) {
                                if (row.contract_price == null || row.contract_price == "undefined")
                                    row.contract_price = "";
                                return ' <td>' + row.contract_price + '</td>';
                            } else {
                                return '';
                            }

                        }
                    },
                    // display none
                    {

                        "visible": false,
                        "searchable": false,
                        "data": function (row, type, val, meta) {
                            if (row.available == 3) {
                                if (row.finishing_price == null || row.finishing_price == "undefined")
                                    row.finishing_price = "";
                                return ' <td>' + row.finishing_price + '</td>';
                            } else {
                                return '';
                            }

                        }
                    },
                    // display none
                    {

                        "visible": false,
                        "searchable": false,
                        "data": function (row, type, val, meta) {
                            if (row.available == 3) {
                                if (row.contractDate == null || row.contractDate == "undefined")
                                    row.contractDate = "";
                                return ' <td>' + row.contractDate + '</td>';
                            } else {
                                return '';
                            }

                        }
                    }
                ],
                // lengthMenu: [[25, 100, 1], [25, 100, "All"]],
                // pageLength: 25,
                pageLength: 12,
                "order": [[2, "asc"]],
                responsive: true,
                columnDefs: [
                    {responsivePriority: 1, targets: 0}
                ],
                dom: '<"available-filter-style"B>f <"available-filter">rtip',
                buttons: [
                    // $.extend(true, {}, buttonCommon, {
                    //     extend: 'copyHtml5'
                    // }),
                    //
                    // {
                    //     extend: 'csv',
                    //     exportOptions: {columns: [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16]},
                    //     "action": newexportaction
                    //
                    // },
                    {
                        extend: 'excel',
                        exportOptions: {columns: [1, 2, 3, 4, 5, 6, 10/*, 11, 12, 13*/, 14, 15, 16]},
                        "action": newexportaction,
                    },
                    // {extend: 'pdf', exportOptions: {columns: [1, 2, 3, 4, 5, 6]},
                    //         "action": newexportaction
                    // },
                    // {extend: 'print', exportOptions: {columns: [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16]}}
                ]
                ,
                "initComplete": function (settings, json) {
                    $("div.available-filter").html('<div class="form-group margin-left-5">\
                      <label for="availableFilter" class="filter-by"> Filter By:</label>\
                      <select class="form-control width-12 input-sm" id="availableFilter">\
                        <option value="">' + _translate('all') + '</option>\
                        <option value="Available">' + _translate('available') + '</option>\
                        <option value="Reserved">' + _translate('reserved') + '</option>\
                        <option value="Pending">' + _translate('pending') + '</option>\
                        <option value="Purchased">' + _translate('purchased') + '</option>\
                        \<option value="Rented">' + _translate('rented') + '</option>\
                        \<option value="Signed">' + _translate('signed') + '</option>\
                        \<option value="Signed Cancellation">' + _translate('signed_cancellation') + '</option>\
                      </select>\
                      <label for="neighborhoodFilter" class="filter-by neighborhood-by"> ' + _translate('neighborhood') + ':</label>\
                      <select class="form-control width-12 input-sm" id="neighborhoodFilter">\
                        <option value="">' + _translate('all') + '</option>\
                      </select>\
                     <label for="buildingTypeFilter" class="filter-by buildingType-by"> ' + _translate('building_type') + ':</label>\
                      <select class="form-control width-12 input-sm" id="buildingTypeFilter">\
                        <option value="">' + _translate('all') + '</option>\
                      </select>\
                    </div>');
                    getDiscountListItems();
                    getAdditionListItems();
                    getneighborhoodFilterOptions();
                    getbuildingTypeFilterOptions();
                    addFilterFunctionalities();

                    // get hashtag from url if exist apply filter
                    // this is needed when admin clicks on dashboard links
                    applyHashtagFilters();
                    /*
                     * this is to fix error if user refreshed page after click reserve and didnt finish reserve so that no lock
                     * this is for checking the reserved appartments and uid in local storage but not reserved must be removed
                     */

                    var csrf_token = $("meta[name=csrf_token]").attr("content");
                    var params = {csrf_token: encodeURIComponent(csrf_token)};
                    var url = site['uri']['public'] + "/unit/reserved/";
                    // Append page CSRF token
                    var req1 = $.ajax({
                        type: "GET",
                        url: url,
                        data: params

                    }).done(function (unitsId) {


                        for (var i = 0, len = localStorage.length; i < len; i++) {
                            var key = localStorage.key(i);
                            var value = localStorage[key];

                            if (!unitsId.includes(key)) {
                                localStorage.removeItem(key)
                            }
                        }
                    })
                        .fail(failureCallback);
                },
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {

                    if (prevRow == aData.id) {
                        $(nRow).hide();
                    }
                    prevRow = aData.id;

                    /*primary_group 1 is sales*/
                    if ({{ primary_group }} == "1"
                )
                    {

                        flagg = 0;
                        switch (aData.available) {
                            case 0:
                                $(nRow).find('.cancel-reservation').replaceWith("<button id='reqTocancel' style='    display: inline-block; width: 103px;' class='btn btn-danger reserve-now {% if user.primary_group_id == 1 %}btn-block{% endif %}' onclick='requestToCancel(this)'>" + _translate('req_cancel_reservation') + "</button>")
                                $(nRow).find('.cancel-reservation').hide();
                                $(nRow).find('.print-btn').hide();
                                break;
                            case 1:
                                $(nRow).find('.cancel-reservation').hide();
                                disableButton($(nRow).find('.print-menue'));

                                $(nRow).find('.print-btn').hide();
                                $(nRow).find('.receipt-btn').hide();
                                break;
                            case 2:
                                $(nRow).find('.approve').replaceWith("<span class='label label-warning btn-width label-lg {% if user.primary_group_id == 1 %}label-block{% endif %}'>" + _translate('pending_to_cancel') + "</span>")
                                $(nRow).find('.reject').hide();
                                $(nRow).find('.print-btn').hide();
                                break;
                            case 3:
                                $(nRow).find('.purchase-unit').replaceWith("<button class='btn btn-primary center-item' data-toggle='tooltip' data-placement='bottom' title='Download Contract' onclick='checkContractType(this)'><i class='fa fa-file-pdf-o fa-lg' aria-hidden='true'></i></button>")
                                disableButton($(nRow).find('.reserve-now'));
                                $(nRow).find('.cancel-reservation').hide();
                                break;
                        }
                    }
                    /*primary_group 2 is admin*/
                    if ({{ primary_group }} == "2"
                )
                    {

                        flagg = 1;
                        switch (aData.available) {
                            case 0:
                                disableButton($(nRow).find('.reserve-now'));
                                $(nRow).find('.print-btn').hide();
                                break;
                            case 1:
                                disableButton($(nRow).find('.print-menue'));
                                disableButton($(nRow).find('.print-btn'));
                                $(nRow).find('.print-btn').hide();
                                $(nRow).find('.receipt-btn').hide();
                                $(nRow).find('.cancel-reservation').hide();
                                break;
                            case 2:
                                $(nRow).find('.reserve-now').replaceWith("<button class='btn btn-warning margin-right-5px btn-width' onclick='rejectPending(this)'> " + _translate('reject_cancellation') + " <i class='fa fa-thumbs-down' aria-hidden='true'></i></button>")
                                $(nRow).find('.cancel-reservation').replaceWith("<button class='btn btn-warning margin-right-5px btn-width' onclick='showCancellationModal(this)' > " + _translate('approve_cancellation') + "<i class='fa fa-thumbs-up' aria-hidden='true'></i></button>")
                                $(nRow).find('.print-btn').hide();
                                break;
                            case 3:
                                $(nRow).find('.purchase-unit').replaceWith("<button class='btn btn-primary center-item' data-toggle='tooltip' data-placement='bottom' title='Download Contract' onclick='checkContractType(this)'><i class='fa fa-file-pdf-o fa-lg' aria-hidden='true'></i></button>")
                                disableButton($(nRow).find('.reserve-now'));
                                disableButton($(nRow).find('.cancel-reservation'));
                                break;
                        }
                    }

                }

            });


            // Edited By Ahmad Tome
            var user = document.getElementById('usernameinfo').innerHTML;
            if (user != "admin") {
                 // $(".available-filter-style").hide();

            }


            $('#customSearchBox, #unitTable_filter input[type="search"]').keyup(function (event) {
                // if (event.target.id === 'customSearchBox') {
                //     $customTable.search($(this).val()).draw();
                // }
                // $('#unitTable').find('tbody tr').css({'display': 'table-row'});
            });

            //handle the user's double click----HistoryTable
            var counter = 0;
            $('#unitTable tbody').on('click', 'tr td:not(:nth-child(7))', function (e) {
                var data_index = $(e.target).data('dtr-index') == undefined ? $(e.target).closest("li").data('dtr-index') : $(e.target).data('dtr-index');

                if (data_index == "6" || data_index == "7" || data_index == "8") {
                    return;
                }
                var data = $('#unitTable').DataTable().row(this).data();
                var cols = $(this).index(); //to exclude the last two buttons clicked
                if (cols == 0 || cols == 9 || cols == 10 || cols == 11)
                    return;
                counter++;
                if (counter == 2) {

                    counter = 0;
                    if (data == null) {
                        var myClass = $(this).closest('td').parent().prev().attr("class");
                        data = $('#unitTable').DataTable().row($(this).closest('td').parent().prev()).data();
                    }
                    showHistoryModal(data.id, data.available, data);
                }


            });


        });


        /// *** Added by Ayat Salman ***  ///
        var slideIndex = 1;
        showDivs(slideIndex);

        function plusDivs(n) {
            showDivs(slideIndex += n);
        }


        function showDivs(n) {
            var i;
            var x = document.getElementsByClassName("mySlides");
            if (n > x.length) {
                slideIndex = 1
            }

            console.log(i, x, n, slideIndex);
            if (n < 1) {
                slideIndex = x.length
            }
            for (i = 0; i < x.length; i++) {
                x[i].style.display = "none";
            }
            // console.log(x[slideIndex - 1]);
            if (x[slideIndex - 1]) {
                x[slideIndex - 1].style.display = "block";
                $('#imgid').val(x[slideIndex - 1].src);
            }
        }

        function resetModel() {
            $('#StorageSelect').empty();
            $('#StorageSelect').append('<option disabled selected value="0">' + _translate('select_storage') + '</option>');

            $('#ParkingSelect').empty();
            $('#ParkingSelect').append('<option disabled selected value="0">' + _translate('select_parking') + '</option>');

            $('#ParkingStorageSelect')[0].selectedIndex = 0;

            $('#parkingdesc').val('')
            $('#parkingfloor').val('')
            $('#parking_number').val('')
            $('#parkingprice').val('')

            $('#Storagedesc').val('')
            $('#Storagearea').val('')
            $('#Storagefloor').val('')
            $('#Storagetabu').val('')
            $('#Storageprice').val('')
            $('#Storage_number').val('')

            $('#StorageImg').empty()
            $('#parkingImg').empty()


            $('#parking-content').hide();
            $('#storage-content').hide();
        }

        $("#deleteimg").click(function () {
            let imagid = $(this).data('imagid');
            console.log('imagid', imagid);
            $('.loader-modal-lg').modal('show')
            $('#img').modal("hide");
            var name = $('#imgid').val();
            var xx = name.lastIndexOf("uploads");
            name = name.slice(xx + 8, name.length);

            console.log('site', site);
            var imgid;
            var req1 = $.ajax({

                url: site['uri']['public'] + '/deleteImage',
                data: {
                    imagid: imagid,
                    name: name,
                    csrf_token: encodeURIComponent(csrf_token)
                },
                type: "DELETE"
            }).done(function (data) {

                console.log(data);
                // data = JSON.parse(data);
                // console.log(data);
                // img_id = data[0].id;
                //
                // var params = {img_id: img_id, uid: uid, csrf_token: encodeURIComponent(csrf_token)};
                // var url = site['uri']['public'] + "/deleteimg/?";
                // // Append page CSRF token

                alert('Image Deleted Successfuly')

                $('.loader-modal-lg').modal('hide')


                // var req1 = $.ajax({
                //     type: "POST",
                //     url: url,
                //     data: params
                // }).done(function (data) {
                //
                //     data = JSON.parse(data);
                //
                //     for (var i = 0; i < data.length; i++)
                //         if (data[i].unit_id == uid)
                //             var id = data[i].id;
                //
                //     var params = {id: id, csrf_token: encodeURIComponent(csrf_token)};
                //     var url = site['uri']['public'] + "/delimg/";
                //     // Append page CSRF token
                //     req2 = $.ajax({
                //         type: "post",
                //         url: url,
                //         data: params
                //     }).done(function (data) {
                //         $('.loader-modal-lg').modal('hide')
                //     });
                //
                // });
            });


        });
        // function deleteimg(self) {
        //
        //     $('.loader-modal-lg').modal('show')
        //     $('#img').modal("hide");
        //     var name = $('#imgid').val();
        //
        //     var xx = name.lastIndexOf("uploads");
        //     // name = name.slice(xx + 8, name.length - 4);
        //     name = name.slice(xx + 8, name.length);
        //
        //     var imgid;
        //     var req1 = $.ajax({
        //         url: site['uri']['public'] + '/imagesname/' + name,
        //         type: "get"
        //     }).done(function (data) {
        //
        //         data = JSON.parse(data);
        //         // img_id = data[0].id;
        //         //
        //         // var csrf_token = $("meta[name=csrf_token]").attr("content");
        //         // var params = {img_id: img_id, uid: uid, csrf_token: encodeURIComponent(csrf_token)};
        //         // var url = site['uri']['public'] + "/deleteimg/?";
        //         // // Append page CSRF token
        //
        //         $('.loader-modal-lg').modal('hide')
        //
        //
        //         // var req1 = $.ajax({
        //         //     type: "POST",
        //         //     url: url,
        //         //     data: params
        //         // }).done(function (data) {
        //         //
        //         //     data = JSON.parse(data);
        //         //
        //         //     for (var i = 0; i < data.length; i++)
        //         //         if (data[i].unit_id == uid)
        //         //             var id = data[i].id;
        //         //
        //         //     var params = {id: id, csrf_token: encodeURIComponent(csrf_token)};
        //         //     var url = site['uri']['public'] + "/delimg/";
        //         //     // Append page CSRF token
        //         //     req2 = $.ajax({
        //         //         type: "post",
        //         //         url: url,
        //         //         data: params
        //         //     }).done(function (data) {
        //         //         $('.loader-modal-lg').modal('hide')
        //         //     });
        //         //
        //         // });
        //     });
        // }

        function showImg(self) {
            $('#images').empty();
            var img_id = [];
            var src1, html;
            searchPic = new Image(100, 100);
            var x = -1;
            var html = "";
            var data = extractDataFromRow($(self).parent().parent());
            uid = data.id;
            document.getElementById('deleteimg').dataset.imagid = uid;
            // $('#deleteimg').data('imagid', uid)
            // console.log('unitId,uid', uid);
            var i = 0, z;
            var req1 = $.ajax({
                url: site['uri']['public'] + '/imgsid/' + uid,
                type: "get"
            }).done(function (data) {
                var result = JSON.parse(data);
                $("#description").empty();
                $("#description").append('<p>' + result['unitDescription'] + '</p>' + '<p>' + result['description'] + '</p>');


                data = JSON.parse(data)
                {# if (data['img'] == "[]") { #}
                {#    $('#deleteimg').attr('disabled', true); #}
                {#    src1 = "/{{ project_name }}/public/images/rawabi2.png"; #}
                {#    searchPic.src = src1; #}
                {#    for (var h = 0; h < 6; h++) { #}
                {#        var imgg = "#image" + h; #}
                {#        $(imgg).attr("src", searchPic.src); #}
                {#    } #}
                {# } else #}
                {#    $('#deleteimg').attr('disabled', false); #}

                data = data['img'];
                // for (i = 0; i < data.length; i++) img_id[i] = data[i].img_id;
                for (let image_index = 0; image_index < data.length; image_index++) {
                    img_id[image_index] = data[image_index].image.filepath;
                    src1 = '/{{ project_name }}/public/' + data[image_index].image.filepath;
                    console.log(data, src1);
                    searchPic.src = src1;
                    x++;
                    z = "none";
                    if (x == 0) z = "block";
                    html += "<img class='mySlides' id='image" + x + "' src='" + src1 + "' style='width:100%; display:" + z + ";'>";
                    var imgg = "#image" + x;
                    var src2;
                    $('#images').html(html);
                    $(imgg).attr("src", searchPic.src);
                    $('#imgid').val(img_id[image_index]);
                    src2 = "/{{ project_name }}" + src1;
                    $('#imgid').val(src2);
                }


            });
            $('#description').html(data.description);

            $('#img').modal("show");

        }

        function InitHistoryDataTable(dataID) {
            historyDataTable = $('#historyTable').DataTable(
                {
                    searching: false,
                    retrieve: true,
                    "bInfo": false,
                    "iDisplayLength": -1,
                    "bPaginate": true,
                    "pageLength": 10,
                    "iDisplayLength": 10,
                    "responsive": true,
                    'sDom': 'rtip',
                    "bFilter": true,
                    "order": [[2, "asc"]],
                    'ajax': {
                        "type": "Get",
                        "url": site['uri']['public'] + '/unit/unitHistory/' + dataID,
                        "dataSrc": function (json) {
                            return json;
                        }
                    },
                    "columns": [
                        {"data": "action"},
                        {"data": "user_name"},
                        {"data": "date"},
                        {"data": "customer_name"},
                    ]
                });
        }

        function showHistoryModal(dataID, available, data) {
            $('.show-history-modal-lg').modal("show");

            //hide/show delete button according to the available state

            $("#unitID").text(dataID);
            $("#unitID").hide();

            $("#available").text(available);
            $("#available").hide();

            InitHistoryDataTable(dataID); //Initialize histroy table
            $("#unitTitle").text("History for unit: " + data.rawabi_code);
            var url = site['uri']['public'] + '/unit/unitHistory/' + dataID;
            $('#historyTable').DataTable().ajax.url(url).load();
            //$('#historyTable').DataTable().ajax.reload();
            if (data.available == 3 || data.available == 5) {

                $('#availableUnit').show();
                $("#deleteDiv").hide();
                $('#signedUnit').hide();

            } else if (data.available == 1) {
                $("#deleteDiv").show();
                $('#signedUnit').show();

                $('#availableUnit').hide();
            } else {

                $("#deleteDiv").hide();
                $('#signedUnit').hide();
                $('#availableUnit').hide();

            }

            /*
            if(data.available == 5){
                $('#signedUnit').hide();
            }else{
                $('#signedUnit').show();
            }
            */
            $('#changeStatus').on('click', function () {
                console.log('changeStatus');

                var available = $("#available").text();

                if (available == 5) {
                    if ({{ primary_group }} == "2"
                )
                    {
                        $('.signedContractDeletion-modal-lg').modal('show');
                    }
                else
                    {
                        requestToCancelSigned(self);
                    }

                } else {
                    $('.contractDeletion-modal-lg').modal('show');
                }
                //1.delete reservation
                //2.delete the attached contract ??how

            });

            $('#changeToSigned').unbind('click').bind('click', function () {
                var csrf_token = $("meta[name=csrf_token]").attr("content");
                var url = site['uri']['public'] + "/unit/ChangeToSigned/?";
                var params = {unitID: dataID, csrf_token: encodeURIComponent(csrf_token)};
                $.ajax({
                    type: "put",
                    url: url,
                    data: params
                }).done(function (data) {
                    location.reload();
                })
                    .fail(function (err) {
                        alert(_translate('error'))
                        console.log("err", err);
                    });

            });


        }

        //function to delete Unit from units table
        function DeleteUnit() {
            var unitID = $("#unitID").text();
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {unitID: unitID, csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + "/unit/?";

            var req1 = $.ajax({
                type: "DELETE",
                url: url,
                data: params,
                beforeSend: function () {
                    $('.loader-modal-lg').modal('show');
                }
            }).done(function (data) {
                $('.show-history-modal-lg').modal("hide");
                setTimeout(function () {
                    $('.loader-modal-lg').modal('hide');
                    $('.unitDeletion-modal-lg').modal('hide');
                    $('#unitTable').DataTable().ajax.reload();
                }, 3000)
            })
                .fail(function (err) {
                    $('.loader-modal-lg').modal('hide');
                    console.log("err", err);
                });

        }

        //function to delete the contract-unit information
        function DeleteContract() {

            var unitID = $("#unitID").text();
            var available = $("#available").text();

            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {unitId: unitID, csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + "/unit/changeToAvailable/";

            if (available == 5) {
                url = site['uri']['public'] + "/unit/changeSignedToAvailable/";
            }

            var req1 = $.ajax({
                type: "POST",
                url: url,
                data: params,
                beforeSend: function () {
                    $('.loader-modal-lg').modal('show');
                }
            }).done(function (data) {
                console.log(data)
                setTimeout(function () {
                    $('.loader-modal-lg').modal('hide');
                    $('.contractDeletion-modal-lg').modal('hide');
                    $('.signedContractDeletion-modal-lg').modal('hide');
                    $('#availableUnit').hide();

                    // get current date
                    var today = new Date();
                    var dd = String(today.getDate()).padStart(2, '0');
                    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var yyyy = today.getFullYear();
                    today = yyyy + '/' + mm + '/' + dd;

                    // save history
                    saveHistory("", unitID, today, "", "Changed To Available");

                    var url = site['uri']['public'] + '/unit/data/';
                    $('#unitTable').DataTable().ajax.url(url).load();
                    //reload the history table with the new data
                    var url = site['uri']['public'] + '/unit/unitHistory/' + unitID;
                    $('#historyTable').DataTable().ajax.url(url).load();
                    $('.show-history-modal-lg').modal("hide");

                }, 2500);

            }).fail(function (err) {
                console.log("err", err);
            });

        }

        // function showContractModal(self) {
        //     initializeContractModal();
        //     var serverURL = site['uri']['public'] + '/mssqlConfig/getPrice/?';
        //     var csrf_token = $("meta[name=csrf_token]").attr("content");
        //     var data = extractDataFromRow($(self).parent().parent()),
        //         unitId = data.unit,
        //         uid = data.id,
        //         building = data.building,
        //         neighborhood = data.neighborhood,
        //         size = data.tabo_area,
        //         floor = data.floor,
        //         rawabiCode = data.rawabi_code;
        //
        //
        //     localStorage.setItem('uid', JSON.stringify(data.id));
        //
        //     var req1 = $.ajax({
        //         url: site['uri']['public'] + '/reservation/' + uid,
        //         type: "get"
        //     }).done(function (data) {
        //         console.log(data);
        //         var req2 = $.ajax({
        //             url: site['uri']['public'] + '/neighborhoodData/' + neighborhood,
        //             type: "get"
        //         }).done(function (data2) {
        //             $.ajax({
        //                 type: 'GET',
        //                 url: site['uri']['public'] + '/unit/data/?'
        //             }).done(function (newData) {
        //
        //                 //Ajax request to get the additional costs
        //                 $('#pricePart0').val(JSON.parse(data).total_price);
        //                 $("#pricePart0").prop('disabled', true);
        //                 // Edited By Ahmad Tome (add unit id not depend on rwabicode)
        //                 //alert(uid)
        //                 var params = {uid: uid, rwabicode: rawabiCode, csrf_token: encodeURIComponent(csrf_token)};
        //
        //
        //                 $.ajax({
        //                     type: "POST",
        //                     url: serverURL,
        //                     data: params,
        //                 }).done(function (Additionsdata) {
        //                     console.log(Additionsdata)
        //                     console.log('success')
        //                     //Edited By Ahmad Tome
        //                     mssql_connection = 1;
        //                     if (Additionsdata == "FALSE" || Additionsdata == "") {
        //                         // Edited by Ahmad ( mssql = 1 ) mean no connection
        //                         mssql_data = 1;
        //                         mssql_connection = 0;
        //                         $('#pricePart3').val(Additionsdata);
        //                         $('#pricePart3').prop('disabled', false);
        //                         $('#pricePart3').val("0");
        //                         $('#extraAdditions, #extraAdditions3').val("0");
        //                         $('#extraAdditionsError, #extraAdditions3Error').show();
        //                         $("#price3Error").show();
        //
        //                         $("#price3Error").html("<p>"+ _translate('finishing_system_not_connected') +"!</p>");
        //                         var totalPrice = $('#pricePart0').val();
        //                         $('#priceTotal,#price3Total')
        //                             .val(totalPrice)
        //                             .attr('disabled', true);
        //                         $('#pricePart1,#price3Part1, #cprice3Part1').val(Math.ceil(totalPrice * 0.7));
        //
        //                         $('#pricePart2,#price3Part2, #cpice3Part2').val(Math.floor(totalPrice * 0.3));
        //
        //                     } else if (Additionsdata == "empty") {
        //
        //                         $('#pricePart3').prop('disabled', false);
        //                         // Edited by Ahmad ( mssql = 0 ) mean no data
        //                         mssql_data = 0;
        //                     } else {
        //                         mssql_data = 2;
        //                         mssql_connection = 1;
        //                         $("#pricePart3").prop('disabled', true);
        //                         $('#pricePart3').val(Additionsdata);
        //                         $('#extraAdditions, #extraAdditions3').val(Math.round(Additionsdata));
        //                         $('#extraAdditionsError, #extraAdditions3Error').hide();
        //                         $("#price3Error").hide();
        //                         var resPrice = $("#pricePart0").val();
        //                         var additionPrice = $("#pricePart3").val();
        //                         var totalPrice = Number(resPrice) + Number(additionPrice);
        //                         $('#priceTotal,#price3Total')
        //                             .val(totalPrice)
        //                             .attr('disabled', true);
        //                         $('#pricePart1,#price3Part1, #cprice3Part1').val(Math.ceil(totalPrice * 0.7));
        //
        //                         $('#pricePart2,#price3Part2, #cprice3Part2').val(Math.floor(totalPrice * 0.3));
        //                     }
        //
        //                 }).fail(function (error) {
        //                     //edit by Ahmad Tome
        //                     //   alert('error')
        //
        //                     console.log(error)
        //                     console.log('error')
        //                     mssql_connection = 0;
        //
        //
        //                     console.log(error);
        //                     $('#extraAdditions3').val("0");
        //                     $('#extraAdditions3Error').show();
        //                 });
        //
        //                 data = JSON.parse(data);
        //                 data2 = JSON.parse(data2);
        //                 newData = JSON.parse(newData);
        //
        //
        //                 // Create a new set of data
        //                 for (var i = 0; i < newData.length; i++) {
        //                     if (newData[i].id == uid)
        //                         data3 = newData[i];
        //                 }
        //                 if ($('.contract-modal-lg').data('old-template')) {
        //                     $(".contract-modal-lg").html($('.contract-modal-lg').data('old-template'))
        //                 }
        //                 console.log(data)
        //                 var template = $(".contract-modal-lg").html().replace(new RegExp('&lt;', 'g'), '<').replace(new RegExp('&gt;', 'g'), '>');
        //                 var oldTemplate = template;
        //                 var htmlReciptTempl = _.template(template)({
        //                     unitId: unitId,
        //                     building: building,
        //                     neighborhood: neighborhood,
        //                     floor: floor,
        //                     size: size,
        //                     uuid: uid,
        //                     purchaser1: data.customer_name,
        //                     //idType1: data.customer_type_of_id,
        //                     idNum1: data.customer_id,
        //                     mobileNum1: data.mobile,
        //                     homePhone1: data.phone_number,
        //                     idPlace1: data.issued_by,
        //                     priceTotal: data.total_price,
        //                     haiArabicName: data2.haiArabicName,
        //                     haiEnglishName: data2.haiEnglishName,
        //                     haiArea: data2.haiArea,
        //                     HAO_date: data2.HAO_date,
        //                     HAO_num: data2.HAO_num,
        //                     haiBuildingsNum: data2.haiBuildingsNum,
        //                     estContractDate: data2.estContractDate,
        //                     land: data2.land,
        //                     unitDescription: '',
        //                     country: data.country,
        //                     city: data.city,
        //                     region: data.region,
        //                     street: data.street,
        //                     work_phone: data.workphone,
        //                     mailbox: data.mailbox,
        //                     email: data.email_address,
        //                     postalcode: data.postalcode
        //
        //
        //                 });
        //                 localStorage.setItem('uid', JSON.stringify(uuid));
        //                 // save unit this to dialog to pass it to cancelReservation function
        //                 $('.contract-modal-lg').data('old-template', oldTemplate);
        //                 $('.contract-modal-lg').html(htmlReciptTempl).modal("show");
        //                 // added by Moath
        //                 $("#idType1").val(data.customer_type_of_id);
        //                 $("#r_idType1").val(data.customer_type_of_id);
        //                 // end of editing
        //                 //$('.contract-modal-lg').modal("show");
        //                 $('.datepicker').datetimepicker({
        //                     viewMode: 'days',
        //                     format: 'MM/DD/YYYY'
        //
        //                 });
        //                 $('.contractsDate').each(function () {
        //                     $(this).data("DateTimePicker").date(moment());
        //                 });
        //                 $("#payment").val(paymentIndex);
        //                 $('.contract-modal-lg').data("Uid", uid);
        //
        //
        //                 //Adding event for each handler -> in that case we can do this
        //                 //Setting LocalStorage to make it publicly available
        //                 localStorage.setItem('total-price', JSON.stringify(data.total_price));
        //
        //                 var damageFine = Math.round((parseInt(data.total_price) * 25 / 100) * 1000) / 1000;
        //                 $("#penaltyClause").val(damageFine);
        //                 $("#damageFine").val(damageFine);
        //                 //Getting stored value -> conver it to number
        //                 var totalPrice = Number(localStorage.setItem);
        //                 //Showing the total Price to perform some calculations
        //
        //                 $('#pricePart0,#price3Part0')
        //                     .val(data.total_price)
        //                     .attr('disabled', true);
        //
        //                 $('#priceTotal,#price3Total')
        //                     .val(totalPrice)
        //                     .attr('disabled', true);
        //             }).fail(failureCallback);
        //         }).fail(failureCallback);
        //     }).fail(failureCallback);
        // }
        //
        // function initializeContractModal() {
        //     var target = $('#contractsForm');
        //     target.closest('form').find("input[type=text],input[type=number],input[type=email], textarea").val("");
        //     $("#contractDetails").removeClass("display-none");
        //     $('#contracts').val("0");
        //     paymentIndex = 1;
        //     $("#paymentTable").find("tr:gt(1)").remove();
        //     $("#contract1").addClass("display-none");
        //     $("#contract2").addClass("display-none");
        //     $(".must-be-hidden").addClass("display-none");
        //     $("#pageNum").html("");
        //     $("#prePage").addClass("display-none");
        //     $("#openSelectedContract").attr("onclick", 'checkSelectedContract()');
        //     $("#openSelectedContract").html("متابعة");
        //     $('.rtl-direction').css({
        //         'direction': 'rtl',
        //         'max-height': '200px',
        //         'min-height': '200px',
        //         'overflow-y': 'auto'
        //     });
        // }
        //
        // function checkSelectedContract() {
        //     var contracts = $('#contracts');
        //     switch (contracts.val()) {
        //         case "1":
        //             //Edited By Ahmad Tome
        //             $('#price3Error').empty();
        //
        //             $('.rtl-direction').css({
        //                 'direction': 'rtl',
        //                 'max-height': '550px',
        //                 'min-height': '550px',
        //                 'overflow-y': 'auto'
        //             });
        //             $("#contractDetails").addClass("display-none begin");
        //             $("#contract1").removeClass("display-none");
        //             $("#contract1Part1").removeClass("display-none");
        //             $("#pageNum").html("<h5>صفحة رقم 1 من 9</h5>");
        //             $("#openSelectedContract").html('التالي');
        //             // disable button after moving to insure validation
        //             $("#openSelectedContract").attr({
        //                 onclick: 'viewNextPage("2")'
        //             });
        //             $("#prePage").removeClass("display-none");
        //             $("#prePage").attr("onclick", 'viewPrevPage("1")');
        //
        //             // Edit By Ahmad to check connection of MSSQL Database
        //             if (mssql_connection == 0) {
        //                 $('#price3Error').append("لم يتم الحصول على سعر التشطيبات لحدوث خطأ في الاتصال , الرجاء ادخال مبلغ التشطيبات في الخانة").show();
        //             } else if (mssql_data == 0) {
        //                 $('#price3Error').append("لا يتوفر معلومات عن التشطيب لهذه الشقة, الرجاء ادخال مبلغ التشطيبات في الخانة ").show();
        //             }
        //             break;
        //         case "2":
        //
        //
        //             $("#contractDetails").addClass("display-none begin2");
        //             $("#contract1").addClass("display-none");
        //             $("#contract2").removeClass("display-none");
        //             $("#contract2Part1").removeClass("display-none");
        //             $("#pageNum").html("<h5>صفحة رقم 1 من 8</h5>");
        //             $("#openSelectedContract").attr({
        //                 onclick: 'viewNextPageContract2("2")'
        //             }).html('التالي');
        //             $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("2")');
        //             $('.rtl-direction').css({
        //                 'direction': 'rtl',
        //                 'max-height': '550px',
        //                 'min-height': '550px',
        //                 'overflow-y': 'auto'
        //             });
        //             $("#prePage").removeClass("display-none");
        //             $("#prePage").attr("onclick", 'viewPrevPageContract2("1")');
        //
        //             break;
        //         case "3":
        //
        //             $("#contractDetails").addClass("display-none begin2");
        //             $("#contract1").addClass("display-none");
        //             $("#contract3").removeClass("display-none");
        //             $("#contract3Part1").removeClass("display-none");
        //             $("#pageNum").html("<h5>صفحة رقم 1 من 4</h5>");
        //             $("#openSelectedContract").attr({
        //                 onclick: 'viewNextPageContract3("2")',
        //             }).html('التالي');
        //             $("#openSelectedContract").attr("onclick", 'viewNextPageContract3("2")');
        //             $('.rtl-direction').css({
        //                 'direction': 'rtl',
        //                 'max-height': '250px',
        //                 'min-height': '250px',
        //                 'overflow-y': 'auto'
        //             });
        //             $("#prePage").removeClass("display-none");
        //             $("#prePage").attr("onclick", 'viewPrevPageContract3("1")');
        //
        //             break;
        //         default:
        //     }
        // }

        function viewNextPage(pageNum) {
            switch (pageNum) {
                case "1":
                    $("#contractDetails").hide();
                    $("#contract1Part1").addClass("display-none");
                    $("#contract1").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 1 من 9</h5>");
                    $("#openSelectedContract");
                    $("#prePage").attr("onclick", 'viewPrevPage("1")');
                    $("#openSelectedContract").attr({onclick: 'viewNextPage("2")'}).html("التالي");
                case "2":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part2").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 2 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("2")');
                    $("#openSelectedContract").attr({onclick: 'viewNextPage("3")'});
                    break;
                case "3":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part3").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 3 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("3")');
                    $("#openSelectedContract").attr({onclick: 'viewNextPage("4")'});
                    break;
                case "4":
                    // Edited By Ahmad Tome
                    if (isNaN(parseInt($("#priceTotal").val()))) {
                        $("#priceTotal").val($("#pricePart0").val());
                        $('#pricePart1').val(Math.ceil($("#priceTotal").val() * 0.7));
                        $('#pricePart2').val(Math.floor($("#priceTotal").val() * 0.3));
                    }
                    if ($("#pricePart3").val() == "") {
                        $("#openSelectedContract").attr({
                            onclick: 'viewNextPage("5")',
                            // disabled: true
                        });
                    } else {
                        $("#openSelectedContract").attr({
                            onclick: 'viewNextPage("5")',
                            disabled: false
                        });
                    }
                    $("body").on("keyup change", "#pricePart3", function () {
                        if ($("#pricePart3").val() == "") {
                            $("#openSelectedContract").attr({
                                onclick: 'viewNextPage("5")',
                                //   disabled: true
                            });
                            $("#priceTotal").val($("#pricePart0").val());
                        } else {
                            $("#openSelectedContract").attr({
                                onclick: 'viewNextPage("5")',
                                disabled: false
                            });
                        }

                    });

                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part5").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 4 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("4")');


                    break;
                case "5":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part4").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 5 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("5")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPage("6")',
                    });

                    break;
                case "6":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part6").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 6 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("6")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPage("7")',
                    });
                    break;
                case "7":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part7").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 7 من 9</h5>");
                    $("#systemUser").prop(" ", true);
                    $("#prePage").attr("onclick", 'viewPrevPage("7")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPage("8")',
                    });
                    break;
                case "8":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part8").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 8 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("8")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPage("9")',
                    });
                    break;
                case "9":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part9").removeClass("display-none");
                    $("#openSelectedContract").html("تأكيد وحفظ");
                    $("#pageNum").html("<h5>صفحة رقم 9 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("9")');
                    $("#openSelectedContract").attr("onclick", 'saveContract1()');
                    break;
                default:
            }
        }

        function viewPrevPage(pageNum) {
            switch (pageNum) {
                case "1":
                    $("#contractDetails").removeClass("display-none begin");
                    $("#contract1").addClass("display-none");
                    $("#pageNum").html("");
                    $('.rtl-direction').css({
                        'direction': 'rtl',
                        'max-height': '200px',
                        'min-height': '200px',
                        'overflow-y': 'auto'
                    });
                    $("#prePage").addClass("display-none");
                    $("#openSelectedContract").attr("onclick", 'checkSelectedContract()').removeAttr('disabled');
                    $("#openSelectedContract").html("متابعة");
                    break;
                case "2":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part1").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 1 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("1")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPage("2")');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "3":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part2").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 2 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("2")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPage("3")');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "4":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part3").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 3 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("3")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPage("4")');
                    $("#openSelectedContract").html("التالي").attr({disabled: false});
                    break;
                case "5":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part5").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 4 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("4")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPage("5")');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "6":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part4").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 5 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("5")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPage("6")');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "7":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part6").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 6 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("6")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPage("7")');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "8":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part7").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 7 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("7")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPage("8")');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "9":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract1Part8").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 8 من 9</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPage("8")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPage("9")');
                    $("#openSelectedContract").html("التالي");
                    break;
                default:
            }
        }

        function viewNextPageContract2(pageNum) {
            switch (pageNum) {
                case "1":
                    $("#contractDetails").addClass("display-none");
                    $("#contract1").removeClass("display-none");
                    $("#contract1Part1").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 1 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("1")');
                    $("#openSelectedContract").attr({onclick: 'viewNextPageContract2("2")'}).html("التالي");

                case "2":
                    $("#contract2Part1").addClass("display-none");
                    $("#contract2Part2").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 2 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("2")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPageContract2("3")'
                    });
                    break;
                case "3":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part3").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 3 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("3")');
                    $("#openSelectedContract").attr({onclick: 'viewNextPageContract2("4")'});
                    break;
                case "4":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part4").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 4 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("4")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPageContract2("5")',
                        disabled: 'disabled'
                    });
                    break;
                case "5":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part5").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 5 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("5")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPageContract2("6")',
                        disabled: 'disabled'
                    });

                    // Edited By Ahmad Tome
                    $('#extraAdditionsError').empty();
                    if (mssql_connection == 0) {
                        $('#extraAdditionsError').append("لم يتم الحصول على سعر التشطيبات لحدوث خطأ في الاتصال , الرجاء ادخال مبلغ التشطيبات في الخانة اعلاه").show();
                        $('#extraAdditions').attr({disabled: false});

                        //var originprice = parseInt($('#pricePart0').val());
                        //$('#price3Total').val(originprice);
                        //$('#price3Part2').val( Math.floor(parseInt($('#price3Total').val()) * 0.3));
                        //$('#price3Part1').val( Math.floor(parseInt($('#price3Total').val()) * 0.7));
                    } else if (mssql_data == 0) {
                        $('#extraAdditionsError').append("لا يتوفر معلومات عن التشطيب لهذه الشقة, الرجاء ادخال مبلغ التشطيبات في الخانة اعلاه").show();
                        $('#extraAdditions').attr({disabled: false});

                        //var originprice = parseInt($('#pricePart0').val());
                        //$('#price3Total').val(originprice);
                        //$('#price3Part2').val( Math.floor(parseInt($('#price3Total').val()) * 0.3));
                        //$('#price3Part1').val( Math.floor(parseInt($('#price3Total').val()) * 0.7));
                    }

                    break;
                case "6":

                    var total_price = parseInt($('#r_totalPrice').val()) + parseInt($('#extraAdditions').val())

                    var paymentA = parseInt($('#paymentA').val()) || 0;
                    var paymentAPeriod = parseInt($('#paymentAPeriod').val()) || 0;

                    var paymentB = parseInt($('#paymentB').val()) || 0;
                    var paymentBPeriod = parseInt($('#paymentBPeriod').val()) || 0;

                    var paymentC = parseInt($('#paymentC').val()) || 0;
                    var paymentCPeriod = parseInt($('#paymentCPeriod').val()) || 0;


                    var summation_Of_payment = parseInt($('#rentPrice').val()) + parseInt(paymentA * paymentAPeriod) + parseInt(paymentB * paymentBPeriod) + parseInt(paymentC * paymentCPeriod);

                    var txt = 'ويساوي ' + ((summation_Of_payment / total_price) * 100).toFixed(2) + '% من المبلغ الكلي';

                    $('#total-price').text(total_price);
                    $('#summation-payment').text(summation_Of_payment + ' ' + txt);
                    $('#showPriceModal').modal('show');


                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part6").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 6 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("6")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPageContract2("7")',
                    });
                    break;
                case "7":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part7").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 7 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("7")');
                    $("#openSelectedContract").html("تأكيد وحفظ");
                    $("#openSelectedContract").attr("onclick", 'saveContract2()');
                    break;
                default:
            }
        }

        function viewPrevPageContract2(pageNum) {
            switch (pageNum) {
                case "1":
                    $(".must-be-hidden").addClass("display-none ");
                    $("#contract2").addClass("display-none");
                    $("#contractDetails").removeClass("display-none begin2");
                    $("#pageNum").html("");
                    $('.rtl-direction').css({
                        'direction': 'rtl',
                        'max-height': '200px',
                        'min-height': '200px',
                        'overflow-y': 'auto'
                    });
                    $("#prePage").addClass("display-none");
                    $("#openSelectedContract").attr({
                        onclick: 'checkSelectedContract()',
                    }).removeAttr('disabled');
                    $("#openSelectedContract").html("متابعة");

                    break;
                case "2":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part1").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 1 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("1")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("2")')
                        .removeAttr('disabled');
                    $("#openSelectedContract").html("التالي");
                    break;

                case "3":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part2").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 2 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("2")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("3")')
                        .removeAttr('disabled');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "4":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part3").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 3 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("3")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("4")')
                        .removeAttr('disabled');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "5":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part4").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 4 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("4")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("5")')
                        .removeAttr('disabled');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "6":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part5").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 5 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("5")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("6")')
                        .removeAttr('disabled');
                    ;
                    $("#openSelectedContract").html("التالي");
                    break;
                case "7":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part6").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 6 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("6")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("7")')
                        .removeAttr('disabled');
                    ;
                    $("#openSelectedContract").html("التالي");
                    break;
                default:
            }
        }

        function viewNextPageContract3(pageNum) {
            switch (pageNum) {
                case "1":
                    $("#contractDetails").addClass("display-none");
                    $("#contract3").removeClass("display-none");
                    $("#contract3Part1").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 1 من 4</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract3("1")');
                    $("#openSelectedContract").attr({onclick: 'viewNextPageContract3("2")'}).html("التالي");

                case "2":
                    $("#contract3Part1").addClass("display-none");
                    $("#contract3Part2").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 2 من 4</h5>");
                    $('.rtl-direction').css({
                        'direction': 'rtl',
                        'max-height': '550px',
                        'min-height': '550px',
                        'overflow-y': 'auto'
                    });
                    $("#prePage").attr("onclick", 'viewPrevPageContract3("2")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPageContract3("3")'
                    });
                    break;
                case "3":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract3Part3").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 3 من 4</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract3("3")');
                    $("#openSelectedContract").attr({onclick: 'viewNextPageContract3("4")'});

                    // Edited By Ahmad Tome
                    $('#extraAdditions3Error').empty();
                    if (mssql_connection == 0) {
                        $('#extraAdditions3Error').append("لم يتم الحصول على سعر التشطيبات لحدوث خطأ في الاتصال , الرجاء ادخال مبلغ التشطيبات في الخانة").show();
                        $('#extraAdditions3').attr({disabled: false});
                        var originprice = parseInt($('#pricePart0').val());
                        $('#price3Total').val(originprice);
                        $('#price3Part2').val(Math.floor(parseInt($('#price3Total').val()) * 0.3));
                        $('#price3Part1').val(Math.ceil(parseInt($('#price3Total').val()) * 0.7));
                    } else if (mssql_data == 0) {
                        $('#extraAdditions3Error').append("لا يتوفر معلومات عن التشطيب لهذه الشقة, الرجاء ادخال مبلغ التشطيبات في الخانة ").show();
                        $('#extraAdditions3').attr({disabled: false});
                        var originprice = parseInt($('#pricePart0').val());
                        $('#price3Total').val(originprice);
                        $('#price3Part2').val(Math.floor(parseInt($('#price3Total').val()) * 0.3));
                        $('#price3Part1').val(Math.ceil(parseInt($('#price3Total').val()) * 0.7));
                    }


                    break;
                case "4":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract3Part4").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 4 من 4</h5>");
                    $("#openSelectedContract").html("تأكيد وحفظ");
                    $("#prePage").attr("onclick", 'viewPrevPageContract3("4")');

                    $("#openSelectedContract").attr("onclick", 'saveContract3()');
                    break;
                case "5":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part5").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 5 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("5")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPageContract2("6")',
                        disabled: 'disabled'
                    });
                    break;
                case "6":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part6").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 6 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("6")');
                    $("#openSelectedContract").attr({
                        onclick: 'viewNextPageContract2("7")',
                    });
                    break;
                case "7":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part7").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 7 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("7")');
                    $("#openSelectedContract").html("تأكيد وحفظ");
                    $("#openSelectedContract").attr("onclick", 'saveContract2()');
                    break;
                default:
            }
        }

        function viewPrevPageContract3(pageNum) {
            switch (pageNum) {
                case "1":
                    $("#contract3").addClass("display-none");
                    $("#contractDetails").removeClass("display-none begin2");
                    $(".must-be-hidden").addClass("display-none ");
                    $("#contract3Part1").addClass("display-none");

                    $("#pageNum").html("");
                    $('.rtl-direction').css({
                        'direction': 'rtl',
                        'max-height': '200px',
                        'min-height': '200px',
                        'overflow-y': 'hidden'
                    });
                    $("#prePage").addClass("display-none");
                    $("#openSelectedContract").attr({
                        onclick: 'checkSelectedContract()',
                    }).removeAttr('disabled');
                    $("#openSelectedContract").html("متابعة");

                    break;
                case "2":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract3Part1").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 1 من 4</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract3("1")');
                    $('.rtl-direction').css({
                        'direction': 'rtl',
                        'max-height': '250px',
                        'min-height': '250px',
                        'overflow-y': 'auto'
                    });
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract3("2")')
                        .removeAttr('disabled');
                    $("#openSelectedContract").html("التالي");
                    break;

                case "3":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract3Part2").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 2 من 4</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract3("2")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract3("3")')
                        .removeAttr('disabled');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "4":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract3Part3").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 3 من 4</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract3("3")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract3("4")')
                        .removeAttr('disabled');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "5":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part4").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 4 من 4</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("4")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("5")')
                        .removeAttr('disabled');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "6":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part5").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 5 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("5")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("6")')
                        .removeAttr('disabled');
                    $("#openSelectedContract").html("التالي");
                    break;
                case "7":
                    $(".must-be-hidden").addClass("display-none");
                    $("#contract2Part6").removeClass("display-none");
                    $("#pageNum").html("<h5>صفحة رقم 6 من 7</h5>");
                    $("#prePage").attr("onclick", 'viewPrevPageContract2("6")');
                    $("#openSelectedContract").attr("onclick", 'viewNextPageContract2("7")')
                        .removeAttr('disabled');
                    ;
                    $("#openSelectedContract").html("التالي");
                    break;
                default:
            }
        }

        (function () {
            // get all the inputs into an array.
            var inputs = $('#contractsForm input');

            inputs.each(function () {
                $(this).attr('name', $(this).attr('id'));
            });
        })();

        var discountType = $('#selectDiscount'),
            discountPassField = $('#discountPass'),
            proceedbtn = $("#openCustomerDetailsBtn");
        discountType.change(function () {
            if (discountType.val() == '25') {
                discountPassField.attr('disabled', 'disabled').val('');
                $("#password-alerts").html("");
            } else {
                discountPassField.removeAttr('disabled');
            }
        }).trigger('change');

        // check if part 6 of appendix 4 is need to be added
        $("body").on('click', "#addPart6", function (e) {
            var $checkbox = $(this);
            if ($checkbox.prop('checked')) {
                $("#penefit").removeClass("display-none")
            } else {
                $("#penefit").addClass("display-none")
            }
        });


        //get discounted price
        function getDiscountAmount() {
            var price = $("#price").val();
            var pass = $("#discountPass").val();
            var discount_elements = document.querySelectorAll('#DiscountTemp>ul>div>li');
            var discount_id_arr = [];
            for (var i = 0; i < discount_elements.length; i++) {
                discount_id_arr[i] = discount_elements[i].getAttribute('data-id');
            }

            var csrf_token = $("meta[name=csrf_token]").attr("content"),
                params = {
                    csrf_token: encodeURIComponent(csrf_token),
                    'discount_id_arr': discount_id_arr,
                    "price": price,
                    dis_pass: pass
                },
                url = site['uri']['public'] + "/reservation/getDiscountCatigory/";


            $.ajax({
                type: "POST",
                url: url,
                data: params
            }).done(function (data) {
                console.log("data is", data)
                if ("FALSE" === data) {
                    $("#password-alerts").html(_translate('incorrect_password'));
                    return false;
                    $("#priceVal").val("");
                } else {
                    debugger;
                    var totalAfterDiscount = parseInt(data);
                    totalAfterDiscount = roundToNearestThousand(totalAfterDiscount);


                    $("#totalPrice").val(totalAfterDiscount);
                    finalTotalPrice = totalAfterDiscount;

                    //$("#totalPrice").val(totalAfterDiscount);
                    $("#priceVal").val(totalAfterDiscount);
                }

            });


        }

        function roundToNearestThousand(number) {
            return Math.ceil(number / 1000) * 1000;
        }
        function getAdditionalAmount() {
            var price = $("#price").val();
            var Addition_elements = document.querySelectorAll('#additionalTemp>ul>div>li');
            var Addition_id_arr = [];
            for (var i = 0; i < Addition_elements.length; i++) {
                Addition_id_arr[i] = Addition_elements[i].getAttribute('data-id');
            }

            var csrf_token = $("meta[name=csrf_token]").attr("content"),
                params = {
                    csrf_token: encodeURIComponent(csrf_token),
                    'Addition_id_arr': Addition_id_arr,
                    "price": price
                },
                url = site['uri']['public'] + "/reservation/getAdditionCatigory/";
            $.ajax({
                type: "POST",
                url: url,
                data: params
            }).done(function (data) {
                console.log("price after addition is ", data)
                var priceAddition = parseInt(data);
                priceAddition = Math.ceil(priceAddition);


                $("#totalPrice").val(priceAddition);
                finalTotalPrice = $("#totalPrice").val();


                //$("#totalPrice").val(priceAddition);
                $("#priceVal").val(priceAddition);
                $('.save-btn:contains("Proceed")').html("Save");

            });


        }

        $("#currencies").on("change", function () {
            var selected = $("#currencies option[value='" + $(this).val() + "']").attr("data-currencies");

            $('#addValueCurrency').text($("#currencies option:selected").text());
            $('#directInstallmentAdded').val(0);

            if (selected) {
                $('#exchange_rate').val('1');
                $('#exchange_rate').prop("disabled", true);
                $('#totalPrice').val(finalTotalPrice);
            } else {
                $('#exchange_rate').val('');
                $('#exchange_rate').prop("disabled", false);
            }
        });


        $('#exchange_rate').on("keyup", function () {
            var factor = parseFloat($('#exchange_rate').val());
            var price = parseFloat(finalTotalPrice);
            $('#totalPrice').val((price * factor).toFixed(0));
        });


        $("#reservePrePage").click(function () {
            if ($(".modal.in #reservationEmailContent").is(':visible')) {

                $('#openCustomerDetailsBtn').html(_translate('save'));
                $("#openCustomerDetailsBtn").attr("onclick", "saveReservationModal()");

                $("#reservePrePage").removeClass("hide");
                $("#customerDetails").show();
                $(".more-option").removeClass("hide");
                $("#reservationEmailContent").hide();
            } else {
                $("#reservePrePage").addClass("hide");
                $("#tempSave").addClass("hide");

                $("#customerDetails").hide();
                $(".more-option").addClass("hide");
                $("#priceDetails").show();
                $("#openCustomerDetailsBtn").html(_translate('next'));
                $("#openCustomerDetailsBtn").attr("onclick", "openCustomerDetailsModal()");
            }
        });

        $("#tempSave").on("click", function () {
            var uid = $('.reservation-modal-lg').data("Uid");
            var reservation = getValuesFromContract('.reservation-modal');
            console.log(reservation)

            var reservationTemp = {
                customer_address: reservation.address,
                customer_type_of_payment: reservation.typeofpayment,
                customer_type_of_id: reservation.typeOfId,
                customer_id: reservation.idNumber,
                customer_name: reservation.customerName,
                reservation_date: formatDateToDDMMYYYY(reservation['dateOfRes']),
                reservation_email_note: reservation.reservationEmailNote,
                collected_fees: reservation.collectedFees_select,
                uid: uid,
                phone_number: reservation.phoneNum,
                mobile: reservation.Mobile,
                issued_by: reservation.Issuedby,
                leadID: reservation.leadID,
                country: reservation.country,
                city: reservation.city,
                region: reservation.region,
                street: reservation.street,
                Mailbox: reservation.Mailbox,
                postalcode: reservation.postalcode,
                email: reservation.email,
                workphone: reservation.workphone,
                csrf_token: encodeURIComponent(csrf_token)
            };
            console.log(reservationTemp)


            var csrf_token = $("meta[name=csrf_token]").attr("content"),
                params = {uid: uid, csrf_token: encodeURIComponent(csrf_token), 'reservationTemp': reservationTemp},
                url = site['uri']['public'] + "/reservation/Temp/";


            $.ajax({
                type: "POST",
                url: url,
                data: params
            }).done(function (data) {
                alert(_translate('reserved_data_saved'))
                $('.reservation-modal-lg').modal("hide");
                console.log(data)
            });

        });

        function checkUser(userPassword) {
            var csrf_token = $("meta[name=csrf_token]").attr("content"),
                params = {user_pass: userPassword.val(), csrf_token: encodeURIComponent(csrf_token)},
                url = site['uri']['public'] + "/reservation/checkUserPass/";

            $.ajax({
                type: "POST",
                url: url,
                data: params
            }).done(function (data) {
                var userPassed = data === "1"; // This is equ to var userPassed = false; userPassed = data ===1 ? true: false;
                localStorage.setItem('userPassed', JSON.stringify(userPassed));
                userPassed
                    ? userPassword.parent().removeClass('has-success has-error').addClass("has-success")
                    : userPassword.parent().removeClass('has-success has-error').addClass("has-error")
                ;
            });
        }

        var finalTotalPrice = 0;

        function openCustomerDetailsModal() {
            var uid = $('.reservation-modal-lg').data("Uid");

            $.ajax({
                url: site['uri']['public'] + '/currency/unit/' + uid
            }).done(function (data) {
                var currency = data;
                $('#currencies').val(data);
                $('#addValueCurrency').text($("#currencies option:selected").text());
                $('#directInstallmentAdded').val(0);

                $("#currencies > option").each(function () {
                    $(this).removeAttr('data-currencies');
                });

                $("#currencies option[value='" + data + "']").attr("data-currencies", "true");
                $('#exchange_rate').val(1);
            });


            $.ajax({
                url: site['uri']['public'] + '/reservation/getTemp/' + uid
            }).done(function (data) {
                if (data != "no data")
                    data = JSON.parse(data)
                $("#leadID").empty();
                $("#leadID").val(data[0].leadID);

                $("#customerName").empty();
                $("#customerName").val(data[0].customer_name);

                $("#Issuedby").empty();
                $("#Issuedby").val(data[0].issued_by);

                $("#idNumber").empty();
                $("#idNumber").val(data[0].customer_id);

                if (data[0].customer_type_of_id != "")
                    $("#typeOfId").val(data[0].customer_type_of_id);

                $("#country").empty();
                $("#country").val(data[0].country);

                $("#city").empty();
                $("#city").val(data[0].city);

                $("#address").empty();
                $("#address").val($("#country").val() + "/ " + $("#city").val())

                $("#region").empty();
                $("#region").val(data[0].region);

                $("#street").empty();
                $("#street").val(data[0].street);

                $("#Mailbox").empty();
                $("#Mailbox").val(data[0].mailbox);

                $("#postalcode").empty();
                $("#postalcode").val(data[0].postalcode);

                $("#email").empty();
                $("#email").val(data[0].email_address);

                $("#workphone").empty();
                $("#workphone").val(data[0].workphone);

                $("#Mobile").empty();
                $("#Mobile").val(data[0].mobile);

                $("#phoneNum").empty();
                $("#phoneNum").val(data[0].phone_number);

                $("#reservationEmailNote").empty();
                $("#reservationEmailNote").val(data[0].note);


                console.log(data)
            });

            //document.getElementById("discountPass").click();
            //document.getElementById("user_pass").click();
            var discountPass = $("#discountPass"),
                discountType = $('#selectDiscount'),
                additionVal = $('#additionDetails'),
                priceNoDiscount = $("#price"),
                userPassword = $("#user_pass"),
                nextButton = $('.save-btn:contains(' + _translate('next') + ')');

            userPassword.parent().removeClass("has-success valid");
            discountPass.parent().removeClass("has-error");

            //ensure u enter current user password
            if (userPassword.val() === "") {
                userPassword.parent().addClass("has-error");
                return;
            } else {
                // Check what kind of operations selected, additions, discounts both or none
                if (JSON.parse(localStorage.getItem('userPassed'))) {

                    console.log('hey');
                    if ((discountType.val() === '25') && (additionVal.val() === '0') && nextButton.length) {
                        console.log("nothing")
                        var finalPrice = Math.ceil(priceNoDiscount.val());
                        nextButton.html(_translate('save'));
                        $("#openCustomerDetailsBtn").attr("onclick", "saveReservationModal()");
                        $("#priceDetails").hide();
                        $("#customerDetails").show();
                        $("#totalPrice").val(finalPrice);
                        finalTotalPrice = $("#totalPrice").val();

                        $("label[for='totalPrice']").text(_translate('total_price'));
                        $("#reservePrePage, .more-option").removeClass("hide");
                        $("#tempSave").removeClass("hide");

                    }
                    //if a discount type only is chosen check password
                    else if ((discountType.val() !== '25') && (discountPass.val() !== "") && (additionVal.val() === '0') && nextButton.length) {
                        console.log("discount")
                        getDiscountAmount();
                        nextButton.html(_translate('save'));
                        $("#openCustomerDetailsBtn").attr("onclick", "saveReservationModal()");
                        $("#priceDetails").hide();
                        $("#customerDetails").show();
                        $("label[for='totalPrice']").text(_translate('total_price'));
                        $("#reservePrePage").removeClass("hide");
                        $("#tempSave").removeClass("hide");
                        $(".more-option").removeClass("hide");
                    }
                    //if the additionVal only isChosen
                    else if ((additionVal.val() !== '0') && (discountType.val() === '25') && nextButton.length) {
                        console.log("addition")
                        getAdditionalAmount();
                        nextButton.html(_translate('save'));
                        $("#openCustomerDetailsBtn").attr("onclick", "saveReservationModal()");
                        $("#priceDetails").hide();
                        $("#customerDetails").show();
                        $("label[for='totalPrice']").text(_translate('total_price'));
                        $("#reservePrePage").removeClass("hide");
                        $("#tempSave").removeClass("hide");
                        $(".more-option").removeClass("hide");
                    }
                    //if both areChosen
                    else if ((discountType.val() !== '25') && (discountPass.val() !== "") && (additionVal.val() !== '0') && nextButton.length) {
                        console.log("both")
                        getTotalPrice();
                        nextButton.html(_translate('save'));
                        $("#tempSave").removeClass("hide");
                    }
                    //password field is empty
                    else {
                        discountPass.addClass(' -input');
                        discountPass.parent().addClass("has-error");
                    }


                    // Edited by Ahmad Tome
                    var pricetotal_forapproximate = $("#totalPrice").val() + "";
                    finalTotalPrice = $("#totalPrice").val();

                    console.log(pricetotal_forapproximate)

                    var datawewantoapproximate = pricetotal_forapproximate.substring(pricetotal_forapproximate.length - 3, pricetotal_forapproximate.length);
                    console.log(datawewantoapproximate)

                    if (parseInt(datawewantoapproximate) != 0) {
                        pricetotal_forapproximate = setCharAt(pricetotal_forapproximate, pricetotal_forapproximate.length - 1, '0');
                        console.log(pricetotal_forapproximate)
                        pricetotal_forapproximate = setCharAt(pricetotal_forapproximate, pricetotal_forapproximate.length - 2, '0');
                        console.log(pricetotal_forapproximate)
                        pricetotal_forapproximate = setCharAt(pricetotal_forapproximate, pricetotal_forapproximate.length - 3, '0');
                        console.log(pricetotal_forapproximate)
                    }
                    if (parseInt(datawewantoapproximate) > 0) {
                        datawewantoapproximate = 1000;
                        console.log(datawewantoapproximate)

                    } else {
                        datawewantoapproximate = "";
                    }

                    var final_price_approximated = parseInt(pricetotal_forapproximate) + datawewantoapproximate;
                    console.log(final_price_approximated);

                    $("#totalPrice").val(final_price_approximated);
                    // $("#totalPrice").val("ahnsuhfushafushafuhsafu");
                }

                finalTotalPrice = $("#totalPrice").val();
            }


        }

        function setCharAt(str, index, chr) {
            if (index > str.length - 1) return str;
            return str.substr(0, index) + chr + str.substr(index + 1);
        }

        function getSelectedCategory() {


            var discountPass = $("#discountPass").val();
            var discountType = $('#selectDiscount').val();
            var additionVal = $('#additionDetails').val();
            var priceNoDiscount = $("#price").val();

            if ((discountType == '25') && (additionVal == '0')) {
                return;
            }
            //if a discount type only is chosen check password
            if ((discountType != '25') && (additionVal == '0') && (discountPass != "")) {
                getDiscountAmount();
                return;
            }
            //if the additionVal only isChosen
            if ((additionVal != '0') && (discountType == '25')) {
                getAdditionalAmount();
                return;
            }
            //if both areChosen
            if ((discountType != '25') && (additionVal != '0')) {
                getTotalPrice();
            }
            //password field is empty
            else {
                $("#discountPass").addClass(' -input');
            }

        }

        function getTotalPrice() {

            var price = $("#price").val();
            var pass = $("#discountPass").val();
            var discount_elements = document.querySelectorAll('#DiscountTemp>ul>div>li');
            var discount_id_arr = [];
            for (var i = 0; i < discount_elements.length; i++) {
                discount_id_arr[i] = discount_elements[i].getAttribute('data-id');
            }
            var Addition_elements = document.querySelectorAll('#additionalTemp>ul>div>li');
            var Addition_id_arr = [];
            for (var i = 0; i < Addition_elements.length; i++) {
                Addition_id_arr[i] = Addition_elements[i].getAttribute('data-id');
            }


            var csrf_token = $("meta[name=csrf_token]").attr("content"),
                params = {
                    csrf_token: encodeURIComponent(csrf_token),
                    'Addition_id_arr': Addition_id_arr, 'discount_id_arr': discount_id_arr,
                    "price": price, dis_pass: pass
                },
                url = site['uri']['public'] + "/reservation/getAdditionAndDiscountCatigory/";
            $.ajax({
                type: "POST",
                url: url,
                data: params
            }).done(function (data) {

                var finalPrice = parseInt(data);
                finalPrice = Math.ceil(finalPrice);


                $("#totalPrice").val(finalPrice);
                finalTotalPrice = $("#totalPrice").val();


                //$("#totalPrice").val(finalPrice);
                $("#priceVal").val(finalPrice);
                if ($("#user_pass").val() == "" && !$("#user_pass").parent().hasClass("valid")) {
                    $("#user_pass").parent().addClass("has-error")
                }
                if (!$("#user_pass").parent().hasClass("has-error") && !$("#discountPass").parent().hasClass("has-error")) {
                    $('.save-btn:contains("Proceed")').html("Save");
                    $("#openCustomerDetailsBtn").attr("onclick", "saveReservationModal()");
                    $("#priceDetails").hide();
                    $("#customerDetails").show();
                    $("label[for='totalPrice']").text(_translate('total_price'));
                    $("#reservePrePage").removeClass("hide");
                    $(".more-option").removeClass("hide");
                }


            });

        }

        function getDiscountListItems() {
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + '/discount/all/';
            var req1 = $.ajax({
                type: "GET",
                url: url,
                data: params

            }).done(function (discounts) {
                discounts = JSON.parse(discounts);
                for (var index in discounts) {
                    $(".discountList").append(new Option(discounts[index].name, discounts[index].id));

                    //  $('.discountList').append('<label for="one"><input type="checkbox" id="one" value="'+ discounts[index].id +'"/>'+ discounts[index].name +'</label>')
                }
            })
                .fail(function (err) {
                    console.log("err", err)
                });
        }

        function getAdditionListItems() {
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + '/addition/all/';
            var req1 = $.ajax({
                type: "GET",
                url: url,
                data: params
            }).done(function (additions) {
                additions = JSON.parse(additions);
                for (var index in additions) {
                    $(".additionsList").append(new Option(additions[index].addition_name, additions[index].id));
                    // $('.additionList').append('<label for="one"><input type="checkbox" id="one" value="'+ additions[index].id +'"/>'+ additions[index].addition_name +'</label>')


                }
            })
                .fail(function (err) {
                    console.log("err", err)
                });
        }

        // End of additions-discounts functionality

        function applyHashtagFilters() {
            var hash = window.location.hash;
            var filter = "";
            if (hash.length > 0) {
                filter = hash.substring(hash.indexOf('#') + 1);
                $('#availableFilter').val(filter).change();

            }
        }

        function getneighborhoodFilterOptions() {
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + "/charts/get-neighborhoods/";
            var req1 = $.ajax({
                type: "GET",
                url: url,
                data: params

            }).done(function (data) {
                data = JSON.parse(data);
                for (var propertyName in data) {
                    $("#neighborhoodFilter").append(new Option(propertyName, propertyName));
                }
            }).fail(function (err) {
                console.log("err", err)
            });
        }

        function getAdditionInfo() {
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var additionID = $("#additionDetails").val();
            var price = $("#price").val();
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {addition_id: additionID, csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + "/reservation/getAdditionDescrption/";
            var $this = $(this);
            var isClicked = 0;
            var req1 = $.ajax({
                type: "POST",
                url: url,
                data: params
            }).done(function (data) {
                $('#additionDescr').text(data);
                if (additionID != 0)
                    $('#additiontDiv').toggle();

            }).fail(function (err) {
                console.log("err", err)
            });

        }

        function getDicsountInfo() {

            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var discountID = $("#selectDiscount").val();
            var params = {discount_id: discountID, csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + "/reservation/getDiscountDescrption/";

            var req1 = $.ajax({
                type: "POST",
                url: url,
                data: params

            }).done(function (data) {
                $('#discountDescr').text(data);
                if (discountID != 25)
                    $('#discountDiv').toggle();
            }).fail(function (err) {
                console.log("err", err)
            });

        }


        function getbuildingTypeFilterOptions() {
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + "/charts/get-buildingTypes/";
            var req1 = $.ajax({
                type: "GET",
                url: url,
                data: params

            }).done(function (data) {
                data = JSON.parse(data);
                for (var propertyName in data) {
                    $("#buildingTypeFilter").append(new Option(propertyName, propertyName));
                }
            }).fail(function (err) {
                console.log("err", err)
            });
        }

        function getAvailableFilterValue() {
            var selectedStatus = $('#availableFilter').val();
            switch (selectedStatus) {
                case "Available":
                    return 1;
                case "Reserved":
                    return 0;
                case "Pending":
                    return 2;
                case "Purchased":
                    return 3;
                case "Rented":
                    return 4;
                case "Signed":
                    return 5;
                case "Signed Cancellation":
                    return 6;
            }
            return null;
        }

        function getNeighborhoodFilterFilterValue() {
            return $('#neighborhoodFilter').val();
        }

        function getBuildingTypeFilterValue() {
            return $('#buildingTypeFilter').val();
        }

        function getSearchText() {
            var value = $('.dataTables_filter input').val();
            return value;
        }

        function addFilterFunctionalities() {
            $('#availableFilter').on('change', function () {
                $('#unitTable')
                    .DataTable().columns(5)
                    .search(this.value)
                    .draw();
            });
            $('#neighborhoodFilter').on('change', function () {
                var searchQuery = "^" + this.value + "$";
                if (!this.value) {
                    searchQuery = "";
                }
                $('#unitTable')
                    .DataTable().columns(1)
                    .search(searchQuery, true, false, true)
                    .draw();
            })
            $('#buildingTypeFilter').on('change', function () {
                var searchQuery = "^" + this.value + "$";
                if (!this.value) {
                    searchQuery = "";
                }
                $('#unitTable')
                    .DataTable().columns(6)
                    .search(searchQuery, true, false, true)
                    .draw();
            })
        }

        function cancelReservationModal() {
            var target = $('.form-horizontal');
            // clear form
            target.closest('form').find("input[type='text'], textarea").val("");
            target.closest('form').find("input[type='password'], textarea").val("");
            var unitId = $('.reservation-modal-lg').data('Uid');
            // hide modal
            $('.reservation-modal-lg').modal("hide");
            // remove all red line borders from values
            target.find('input,textarea,select').each(function () {
                $(this).removeClass(' -input');
            });
            $("#password-alerts").html("");
            $("#selectDiscount").val("25");
            $("#additionDetails").val("0");
            $("#discountPass").attr("disabled", "disabled");
            $("#discountPass").removeClass(" -input");
            //$("#totalPriceDiv").hide();
            $('.save-btn:contains(' + _translate('confirm_and_send_email') + ')').html(_translate('next'));
            $('.save-btn:contains(' + _translate('save') + ')').html(_translate('next'));
            $("#priceDetails").show();
            $("#customerDetails").hide();
            // $("#reservationEmailNoteDiv").hide();
            $("#reservationEmailContent").hide();
            $(".more-option").addClass("hide");
            $("#openCustomerDetailsBtn").attr("onclick", "openCustomerDetailsModal()");
            /*remove item from local storage after cancellation*/
            localStorage.removeItem(unitId);
            //localStorage.clear();
            // added by moath
            $("#typeOfId").val("");
            // end of editing
        }

        function cancelCancellationModal() {
            $('.cancellation-modal-lg').modal("hide");
        }

        function modalValidityCheck(targetSelector) {
            var flag = true;

            var target = $(targetSelector);
            // checks for empty fields when flag is true
            if (!target[0].checkValidity()) {
                target.find('input[required]').each(function () {
                    if (!$(this)[0].checkValidity()) {
                        $(this).closest('.form-group').addClass('has-error');
                    } else {
                        $(this).closest('.form-group').removeClass('has-error');
                    }
                });
                return false;
            }
            // check for number input
            if (!$("#collectedFees_select").val().match(/^\d+(\.\d{1,2})?$/)) {
                $(this).closest('.form-group').addClass('has-error');
                flag = false;
            } else {
                $(this).closest('.form-group').removeClass('has-error');
            }
            $('.reservation-modal-lg').on('mouseenter', function () {
                var $items = $(this).find('input[required]');
                $items.each(function () {
                    if ($(this).val()) {
                        $(this).closest('.form-group').removeClass('has-error');
                    }
                });
            });
            return flag
        }

        function currencyToWords(receiptCurrency, lang) {
            var langIndex = (lang == "ar") ? 1 : 0;
            var currencyObj = {
                "$": ["Dollars", ""],
                "JD": ["Dinars", "دينار"],
                "₪": ["Shekels", "شيكل"]
            }
            return currencyObj[receiptCurrency][langIndex];
        }

        function inWordsEnglish(num, receiptCurrency, lang) {
            var decimalPart = (num - parseInt(num)).toFixed(2);
            var decimalPartFormatted = (decimalPart * 100).toString() + "/100";
            var num = parseInt(num);
            // number to words
            var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];
            var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
            if ((num = num.toString()).length > 9) return 'overflow';
            n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
            if (!n) return;
            var str = '';
            str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Ten Million ' : '';
            str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Hundred  ' : '';//hundred thousand
            str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';
            str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';
            str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + '' : '';
            if (decimalPart > 0) {
                str += " and " + decimalPartFormatted + ' ' + currencyToWords(receiptCurrency, lang) + ' Only ';
            } else {
                str += ' ' + currencyToWords(receiptCurrency, lang) + ' Only '
            }
            return str;
        }

        function inWordsArabic(num, receiptCurrency, lang) {
            var billons = ["", "مليار", "ملياران", "ثلاثة مليارات", "اربعة مليارات", "خمسة مليارات", "ست مليارات", "سبعة مليارات", "ثمنية مليارات", "تسعة مليارات"]
                ,
                millions = ["", "مليون", "مليونان", "ثلاثة ملايين", "اربعة ملايين", "خمسة ملايين", "ست ملايين", "سبعة ملايين", "ثمنية ملايين", "تسعة ملايين"]
                ,
                thousands = ["", "الف", "الفان", "ثلاثة الاف", "اربعة الاف", "خمسة الاف", "ست الاف", "سبعة الاف", "ثمانية الاف", "تسعة الاف"]
                , unit = ["", "واحد", "اثنان", "ثلاثة", "اربعة", "خمسة", "ستة", "سبعة", "ثمانية", "تسعة"]
                ,
                tens = ["عشرة", "أحدا عشر", "اثنا عشر", "ثلاثة عشر", "اربعة عشر", "خمسة عشر", "ستة عشر", "سبعة عشر", "ثمانية عشر", "تسعة عشر"]
                , decs = ["", "عشرة", "عشرون", "ثلاثون", "اربعون", "خمسون", "ستون", "سبعون", "ثمانون", "تسعون"]
                ,
                hundreds = ["", "مائه", "مئتان", "ثلثمائة", "اربعمائة", "خمسمائة", "ستمائة", "سبعمائة", "ثمانمائة", "تسعمائة"];

            var map = {
                '0': 'unit',
                '1': 'tens',
                '2': 'decs',
                '3': 'hundreds',
                '4': 'thousands',
                '5': 'millions'
            };

            if (num == "NaN" || num == "لا يوجد" || num == null || num == "") {
                return "لا يوجد";
            }
            var NumberValue = $.trim(num);
            var NumberLength = NumberValue.length;

            var out = '';
            var numcat = map[NumberLength];
            if (NumberLength == 1) {
                out = unit[NumberValue];
            } else if (NumberLength == 2) {
                if (NumberValue[0] == 1) {
                    out = out + tens[NumberValue[1]];
                } else {
                    out = out + unit[NumberValue[1]] + ' و ' + decs[NumberValue[0]];
                }
            } else if (NumberLength == 3) {
                for (var i = 1; i <= NumberLength; i++) {
                    if (i == NumberLength - 2) {
                        out = out + hundreds[NumberValue[i - 1]];
                    } else if (i == NumberLength - 1) {
                        if (NumberValue[i - 1] != 0 && NumberValue[i - 1] == 1) {
                            out = out + ' و ' + tens[NumberValue[i]];
                        }
                    } else if (i == NumberLength) {
                        if (NumberValue[i - 2] != 1) {
                            if (NumberValue[i - 1] != 0 && NumberValue[i - 2] != 0) {
                                out = out + ' و ' + unit[NumberValue[i - 1]] + ' و ' + decs[NumberValue[i - 2]];
                            } else {
                                if (NumberValue[i - 1] != 0 && NumberValue[i - 2] == 0) {
                                    out = out + ' و ' + unit[NumberValue[i - 1]];
                                } else {
                                    if (NumberValue[i - 1] == 0 && NumberValue[i - 2] == 0) {

                                    } else {
                                        out = out + ' و ' + decs[NumberValue[i - 2]];
                                    }
                                }

                            }

                        }
                    }

                }

            } else if (NumberLength == 4) {
                for (var i = 1; i <= NumberLength; i++) {
                    if (i == NumberLength - 3) {
                        out = out + thousands[NumberValue[i - 1]];
                    } else if (i == NumberLength - 2) {
                        if (NumberValue[i - 1] != 0) {
                            out = out + ' و ' + hundreds[NumberValue[i - 1]];
                        }
                    } else if (i == NumberLength - 1) {
                        if (NumberValue[i - 1] == 0 && NumberValue[i] == 0) {

                        } else {
                            if (NumberValue[i - 1] == 1) {
                                out = out + ' و ' + tens[NumberValue[i]];
                                i++;
                            } else if (NumberValue[i - 1] != 0 && NumberValue[i] != 0) {
                                out = out + ' و ' + unit[NumberValue[i]] + ' و ' + decs[NumberValue[i - 1]];
                                i++;
                            } else if (NumberValue[i - 1] != 0 && NumberValue[i] == 0) {
                                out = out + ' و ' + decs[NumberValue[i - 1]];
                                i++;
                            } else {
                                out = out + ' و ' + unit[NumberValue[i]];
                                i++;
                            }
                        }
                    }

                }


            } else if (NumberLength == 5) {
                for (var i = 1; i <= NumberLength; i++) {
                    if (i == NumberLength - 4) {
                        if (NumberValue[i - 1] == 1) {
                            out = out + tens[NumberValue[i]] + ' الف ';
                        } else {
                            if (NumberValue[i] == 0) {
                                out = out + decs[NumberValue[i - 1]] + ' الف ';
                            } else {
                                out = out + unit[NumberValue[i]] + ' و ' + decs[NumberValue[i - 1]] + ' الف ';
                            }

                        }
                        i++;

                    } else if (i == NumberLength - 2) {
                        if (NumberValue[i - 1] != 0) {
                            out = out + ' و ' + hundreds[NumberValue[i - 1]];
                        }
                    } else if (i == NumberLength - 1) {
                        if (NumberValue[i - 1] == 0 && NumberValue[i] == 0) {

                        } else {

                            if (NumberValue[i - 1] == 1) {
                                out = out + ' و ' + tens[NumberValue[i]];
                            } else if (NumberValue[i - 1] != 0) {
                                if (NumberValue[i] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i]] + ' و ' + decs[NumberValue[i - 1]];
                                    //i++;
                                } else {

                                    out = out + ' و ' + decs[NumberValue[i - 1]];
                                }

                            }

                        }
                    } else if (i == NumberLength) {
                        if (NumberValue[i - 2] == 0) {
                            if (NumberValue[i - 1] != 0) {
                                out = out + ' و ' + unit[NumberValue[i - 1]];
                            }

                        }
                    }

                }


            } else if (NumberLength == 6) {
                for (var i = 1; i <= NumberLength; i++) {
                    if (i == NumberLength - 5) {
                        if (NumberValue[i] == 0 && NumberValue[i + 1] == 0) {
                            out = out + hundreds[NumberValue[i - 1]] + ' الف ';
                        } else {
                            out = out + hundreds[NumberValue[i - 1]];
                        }

                    } else if (i == NumberLength - 4) {
                        if (NumberValue[i - 1] != 0) {

                            if (NumberValue[i - 1] == 1) {
                                out = out + ' و ' + tens[NumberValue[i]] + ' الف ';
                            } else {
                                if (NumberValue[i] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i]] + ' و ' + decs[NumberValue[i - 1]] + ' الف ';
                                } else {

                                    out = out + ' و ' + decs[NumberValue[i - 1]] + ' الف ';
                                }

                            }

                        } else {

                            if (NumberValue[i] != 0) {
                                out = out + ' و ' + unit[NumberValue[i]] + ' الف ';
                            }
                        }

                    } else if (i == NumberLength - 3) {

                        if (NumberValue[i] != 0) {
                            out = out + ' و ' + hundreds[NumberValue[i]];
                        }
                    } else if (i == NumberLength - 2) {

                        if (NumberValue[i] != 0) {
                            if (NumberValue[i] == 1) {
                                out = out + ' و ' + tens[NumberValue[i + 1]];
                            } else {
                                if (NumberValue[i + 1] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i + 1]] + ' و ' + decs[NumberValue[i]];
                                } else {
                                    out = out + ' و ' + decs[NumberValue[i]];
                                }
                            }

                        } else {
                            if (NumberValue[i + 1] != 0) {
                                out = out + ' و ' + unit[NumberValue[i + 1]]
                            }

                        }

                        i++;

                    }
                }

            } else if (NumberLength == 7) {
                for (var i = 1; i <= NumberLength; i++) {
                    if (i == NumberLength - 6) {
                        out = out + millions[NumberValue[i - 1]];
                    } else if (i == NumberLength - 5) {
                        if (NumberValue[i - 1] == 0 && NumberValue[i] == 0) {

                            out = out + hundreds[NumberValue[i - 1]];
                        } else {
                            if (NumberValue[i - 1] != 0) {
                                if (NumberValue[i] == 0) {
                                    out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' الف ';
                                } else {
                                    out = out + ' و ' + hundreds[NumberValue[i - 1]];
                                }

                            }

                        }
                    } else if (i == NumberLength - 4) {
                        if (NumberValue[i - 1] != 0) {
                            if (NumberValue[i - 1] == 1) {
                                out = out + ' و ' + tens[NumberValue[i]] + ' الف ';
                            } else {
                                if (NumberValue[i] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i]] + ' و ' + decs[NumberValue[i - 1]] + ' الف ';
                                } else {
                                    out = out + ' و ' + decs[NumberValue[i - 1]] + ' الف ';
                                }
                            }

                        } else {
                            if (NumberValue[i] != 0) {
                                out = out + ' و ' + unit[NumberValue[i]] + ' الف ';
                            }
                        }

                    } else if (i == NumberLength - 3) {

                        if (NumberValue[i] != 0) {
                            out = out + ' و ' + hundreds[NumberValue[i]];
                        }
                    } else if (i == NumberLength - 2) {
                        if (NumberValue[i] != 0) {
                            if (NumberValue[i] == 1) {
                                out = out + ' و ' + tens[NumberValue[i + 1]];
                            } else {
                                if (NumberValue[i + 1] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i + 1]] + ' و ' + decs[NumberValue[i]];
                                } else {
                                    out = out + ' و ' + decs[NumberValue[i]];
                                }
                            }

                        } else {
                            if (NumberValue[i + 1] != 0) {
                                out = out + ' و ' + unit[NumberValue[i + 1]];
                            }
                        }

                    }
                }

            } else if (NumberLength == 8) {
                for (var i = 1; i <= NumberLength; i++) {

                    if (i == NumberLength - 7) {
                        if (NumberValue[i - 1] != 0) {
                            if (NumberValue[i - 1] == 1) {
                                out = out + tens[NumberValue[i]] + ' مليون ';
                            } else {
                                if (NumberValue[i] != 0) {
                                    out = out + unit[NumberValue[i]] + ' و ' + decs[NumberValue[i - 1]] + ' مليون ';
                                } else {
                                    out = out + decs[NumberValue[i - 1]] + ' مليون ';
                                }
                            }
                        }

                    } else if (i == NumberLength - 6) {

                        if (NumberValue[i] != 0) {
                            if (NumberValue[i + 1] == 0 && NumberValue[i + 2] == 0) {
                                out = out + ' و ' + hundreds[NumberValue[i]] + ' الف ';
                            } else {
                                if (NumberValue[i + 1] != 0) {
                                    if (NumberValue[i + 1] == 1) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + tens[NumberValue[i + 2]] + ' الف ';
                                    } else {

                                        if (NumberValue[i + 2] != 0) {
                                            out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]] + ' الف ';
                                        } else {
                                            out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + decs[NumberValue[i + 1]] + ' الف ';
                                        }

                                    }

                                } else {
                                    out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]] + ' الف ';

                                }
                            }
                        } else {
                            if (NumberValue[i + 1] != 0) {
                                if (NumberValue[i + 1] == 1) {
                                    out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + tens[NumberValue[i + 2]] + ' الف ';
                                } else {

                                    if (NumberValue[i + 2] != 0) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]] + ' الف ';
                                    } else {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + decs[NumberValue[i + 1]] + ' الف ';
                                    }

                                }

                            } else {
                                if (NumberValue[i + 2] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i + 2]] + ' الف ';
                                }


                            }

                        }

                    } else if (i == NumberLength - 3) {

                        if (NumberValue[i] != 0) {

                            if (NumberValue[i + 1] == 0 && NumberValue[i + 2] == 0) {
                                out = out + ' و ' + hundreds[NumberValue[i]];
                            } else {
                                if (NumberValue[i + 1] != 0) {
                                    if (NumberValue[i + 1] == 1) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + tens[NumberValue[i + 2]];

                                    } else {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]];

                                    }

                                } else {
                                    if (NumberValue[i + 2] != 0) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]];
                                    }
                                }
                            }


                        } else {

                            if (NumberValue[i + 1] != 0) {
                                if (NumberValue[i + 1] == 1) {
                                    out = out + ' و ' + tens[NumberValue[i + 2]];

                                } else {
                                    if (NumberValue[i + 2] != 0) {
                                        out = out + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]];
                                    } else {
                                        out = out + ' و ' + decs[NumberValue[i + 1]];
                                    }


                                }

                            } else {
                                if (NumberValue[i + 2] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i + 2]];
                                }
                            }

                        }
                    }

                }

            } else if (NumberLength == 9) {
                for (var i = 1; i <= NumberLength; i++) {
                    if (i == NumberLength - 8) {
                        if (NumberValue[i - 1] != 0) {
                            if (NumberValue[i] == 0 && NumberValue[i + 1] == 0) {
                                out = out + hundreds[NumberValue[i - 1]] + ' مليون ';
                            } else {

                                if (NumberValue[i] != 0) {
                                    if (NumberValue[i] == 1) {
                                        out = out + hundreds[NumberValue[i - 1]] + ' و ' + tens[NumberValue[i + 1]] + ' مليون ';
                                    } else {
                                        if (NumberValue[i + 1] != 0) {
                                            out = out + hundreds[NumberValue[i - 1]] + ' و ' + unit[NumberValue[i + 1]] + ' و ' + decs[NumberValue[i]] + ' مليون ';
                                        } else {
                                            out = out + hundreds[NumberValue[i - 1]] + ' و ' + decs[NumberValue[i]] + ' مليون ';
                                        }
                                    }
                                } else {

                                    if (NumberValue[i + 1] != 0) {
                                        out = out + hundreds[NumberValue[i - 1]] + ' و ' + unit[NumberValue[i + 1]] + ' مليون ';
                                    }
                                }

                            }

                        }
                    } else if (i == NumberLength - 5) {

                        if (NumberValue[i - 1] != 0) {
                            if (NumberValue[i] == 0 && NumberValue[i + 1] == 0) {
                                out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' الف ';
                            } else {

                                if (NumberValue[i] != 0) {

                                    if (NumberValue[i] == 1) {
                                        out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' و ' + tens[NumberValue[i + 1]] + ' الف ';
                                    } else {
                                        if (NumberValue[i + 1] != 0) {
                                            out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' و ' + unit[NumberValue[i + 1]] + ' و ' + decs[NumberValue[i]] + ' الف ';
                                        } else {
                                            out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' و ' + decs[NumberValue[i]] + ' الف ';
                                        }

                                    }

                                } else {
                                    if (NumberValue[i + 1] != 0) {
                                        out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' و ' + unit[NumberValue[i + 1]] + ' الف ';
                                    }
                                }


                            }
                        } else {
                            if (NumberValue[i] != 0) {

                                if (NumberValue[i] == 1) {
                                    out = out + ' و ' + tens[NumberValue[i + 1]] + ' الف ';
                                } else {
                                    if (NumberValue[i + 1] != 0) {
                                        out = out + ' و ' + unit[NumberValue[i + 1]] + ' و ' + decs[NumberValue[i]] + ' الف ';
                                    } else {
                                        out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' و ' + decs[NumberValue[i]] + ' الف ';
                                    }

                                }

                            } else {
                                if (NumberValue[i + 1] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i + 1]] + ' الف ';
                                }
                            }
                        }
                    } else if (i == NumberLength - 3) {
                        if (NumberValue[i] != 0) {
                            if (NumberValue[i + 2] == 0 && NumberValue[i + 1] == 0) {
                                out = out + ' و ' + hundreds[NumberValue[i]];
                            } else {
                                if (NumberValue[i + 1] != 0) {
                                    if (NumberValue[i + 1] == 1) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + tens[NumberValue[i + 2]];
                                    } else {
                                        if (NumberValue[i + 2] != 0) {
                                            out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]];
                                        } else {
                                            out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + decs[NumberValue[i + 1]];
                                        }

                                    }
                                } else {
                                    if (NumberValue[i + 2] != 0) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]];
                                    }

                                }

                            }

                        } else {
                            if (NumberValue[i + 1] != 0) {
                                if (NumberValue[i + 1] == 1) {
                                    out = out + ' و ' + tens[NumberValue[i + 2]];
                                } else {
                                    if (NumberValue[i + 2] != 0) {
                                        out = out + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]];
                                    } else {
                                        out = out + ' و ' + decs[NumberValue[i + 1]];
                                    }

                                }
                            } else {
                                if (NumberValue[i + 2] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i + 2]];
                                }

                            }


                        }

                    }


                }
            } else if (NumberLength == 10) {
                for (var i = 1; i <= NumberLength; i++) {
                    if (i == NumberLength - 9) {
                        if (NumberValue[i - 1] != 0) {
                            out = out + billons[NumberValue[i - 1]];
                        }


                    } else if (i == NumberLength - 8) {
                        if (NumberValue[i - 1] != 0) {
                            if (NumberValue[i] == 0 && NumberValue[i + 1] == 0) {
                                out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' مليون ';
                            } else {

                                if (NumberValue[i] != 0) {
                                    if (NumberValue[i] == 1) {
                                        out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' و ' + tens[NumberValue[i + 1]] + ' مليون ';
                                    } else {
                                        if (NumberValue[i + 1] != 0) {
                                            out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' و ' + unit[NumberValue[i + 1]] + ' و ' + decs[NumberValue[i]] + ' مليون ';
                                        } else {
                                            out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' و ' + decs[NumberValue[i]] + ' مليون ';
                                        }
                                    }
                                } else {
                                    if (NumberValue[i + 1] != 0) {
                                        out = out + ' و ' + hundreds[NumberValue[i - 1]] + ' و ' + unit[NumberValue[i + 1]] + ' مليون ';
                                    }
                                }
                            }

                        } else {

                            if (NumberValue[i] != 0) {
                                if (NumberValue[i] == 1) {
                                    out = out + ' و ' + tens[NumberValue[i + 1]] + ' مليون ';
                                } else {
                                    if (NumberValue[i + 1] != 0) {
                                        out = out + ' و ' + unit[NumberValue[i + 1]] + ' و ' + decs[NumberValue[i]] + ' مليون ';
                                    } else {
                                        out = out + ' و ' + decs[NumberValue[i]] + ' مليون ';
                                    }
                                }
                            } else {
                                if (NumberValue[i + 1] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i + 1]] + ' مليون ';
                                }
                            }
                        }

                    } else if (i == NumberLength - 6) {
                        if (NumberValue[i] != 0) {
                            if (NumberValue[i + 1] == 0 && NumberValue[i + 2] == 0) {
                                out = out + ' و ' + hundreds[NumberValue[i]] + ' الف ';
                            } else {
                                if (NumberValue[i + 1] != 0) {
                                    if (NumberValue[i + 1] == 1) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + tens[NumberValue[i + 2]] + ' الف ';
                                    } else {
                                        if (NumberValue[i + 2] != 0) {
                                            out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]] + ' الف ';
                                        } else {
                                            out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + decs[NumberValue[i + 1]] + ' الف ';
                                        }
                                    }

                                } else {
                                    if (NumberValue[i + 2] != 0) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]] + ' الف ';
                                    }

                                }
                            }
                        } else {

                            if (NumberValue[i + 1] != 0) {
                                if (NumberValue[i + 1] == 1) {
                                    out = out + ' و ' + tens[NumberValue[i + 2]] + ' الف ';
                                } else {
                                    if (NumberValue[i + 2] != 0) {
                                        out = out + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]] + ' الف ';
                                    } else {
                                        out = out + ' و ' + decs[NumberValue[i + 1]] + ' الف ';
                                    }
                                }

                            } else {
                                if (NumberValue[i + 2] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i + 2]] + ' الف ';
                                }

                            }


                        }

                    } else if (i == NumberLength - 3) {

                        if (NumberValue[i] != 0) {
                            if (NumberValue[i + 1] == 0 && NumberValue[i + 2] == 0) {
                                out = out + ' و ' + hundreds[NumberValue[i]];
                            } else {
                                if (NumberValue[i + 1] != 0) {
                                    if (NumberValue[i + 1] == 1) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + tens[NumberValue[i + 2]];
                                    } else {
                                        if (NumberValue[i + 2] != 0) {
                                            out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]];
                                        } else {
                                            out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + decs[NumberValue[i + 1]];
                                        }
                                    }
                                } else {

                                    if (NumberValue[i + 2] != 0) {
                                        out = out + ' و ' + hundreds[NumberValue[i]] + ' و ' + unit[NumberValue[i + 2]];
                                    }
                                }

                            }
                        } else {

                            if (NumberValue[i + 1] != 0) {
                                if (NumberValue[i + 1] == 1) {
                                    out = out + ' و ' + tens[NumberValue[i + 2]];
                                } else {
                                    if (NumberValue[i + 2] != 0) {
                                        out = out + ' و ' + unit[NumberValue[i + 2]] + ' و ' + decs[NumberValue[i + 1]];
                                    } else {
                                        out = out + ' و ' + decs[NumberValue[i + 1]];
                                    }
                                }
                            } else {

                                if (NumberValue[i + 2] != 0) {
                                    out = out + ' و ' + unit[NumberValue[i + 2]];
                                }
                            }

                        }
                    }


                }


            }
            if (NumberValue % 10 == 0) {
                if (NumberValue == 30)

                    out = out.replace(" و ", "");


            }
            return out;

        }


        /// *** Added by Ayat Salman *** ///
        function setFlag(self) {
            flagg = 0;
            showCancellationModal(self);
        }


        function continu(self) {

            $('#cancelreas').modal('hide')
            $('#cancelinfo').modal('hide')
            if (flagg == 1) {
                requestToCancel(self);

            } else {
                allow = 1;
                var uid = $('#id').html();
                var available = $('#available').html();
                var csrf_token = $("meta[name=csrf_token]").attr("content");
                var url = site['uri']['public'] + '/unit/' + uid + '/reservation/delete/';
                var type = "Delete";

                if (available == 6) {

                    url = site['uri']['public'] + '/unit/changeSignedToAvailable';
                    type = "Post";
                }

                $.ajax({
                    type: type,
                    url: url,
                    data: {csrf_token: csrf_token, uid: uid, unitId: uid, reason: $('#cancelInfo2').val(), user: 'sale'}
                }).done(function (data) {
                    console.log(data);
                    saveHistory("", uid, "", "", "Cancellation Approved ");

                    $('.loader-modal-lg').modal('hide');
                    $('#unitTable').DataTable().ajax.reload(null, false);
                    $('.cancellation-modal-lg').modal('hide');
                    $('#cancelreas').modal('hide');
                    $('#cancelinfo').modal('hide');
                }).error(function (err) {
                    alert(_translate('error'));
                    $('.loader-modal-lg').modal('hide');
                });
                //cancelReservation(self);
                //showCancellationModal(self);
            }
        }


        // This function to show the reasons of canceling the units for the admin befor deciding to // approve or reject the cancelation
        function showReasonModal(self) {

            $('#cancelinfo').modal('show');
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var row = $(self).closest('tr');
            var rowData = $('#unitTable').DataTable().row(row).data();

            var available = rowData.available;
            var uid = rowData.id;
            var building = rowData.building;
            var neighborhood = rowData.neighborhood;
            var user_id, cancelID;
            var modal = $(self).closest('.modal');
            $('.modal').data('id', uid);
            var uidd = modal.data('id');

            // get the reason from the database for the unit
            var req = $.ajax({
                url: site['uri']['public'] + '/cancelreason/' + uid,
                type: "get"

            }).done(function (data) {
                var date, reason, user_name;
                data = JSON.parse(data);
                for (var i = 0; i < data.length; i++) {
                    if (data[i].flag == 1)  // if it's the last cancelation reason
                    {
                        user_id = data[i].user_id;
                        date = data[i].date;
                        reason = data[i].reason;
                        cancelID = data[i].id;

                        // get the user name of the user who canceld the resarvation
                        var req2 = $.ajax({
                            url: site['uri']['public'] + '/username/' + user_id,
                            type: "get"

                        }).done(function (data2) {

                            data2 = JSON.parse(data2);
                            user_name = data2[0].display_name;
                            // put the values on the cancelreason modal
                            $("#cancelInfo").html("" + user_name + "  " + _translate('requested_to_cancel_the_unit') + " <div> " + _translate('at_building') + " : " + building + "</div><div> " + _translate('at_neighborhood') + " : " + neighborhood + "</div><div> " + _translate('at_date') + "  : " + date + " . </div>");
                            $("#cancelInfo2").html("" + reason + "");
                            $("#id").html("" + uid + "");
                            $("#cancelId").html("" + cancelID + "");
                            $("#available").html("" + available + "");
                            $("#building").html("" + building + "");
                            $("#neighborhood").html("" + neighborhood + "");
                            // $("#cancelId").html(""+cancelID +"");

                        })
                    }
                }
            })
        }

        /** edited by Ayat Salman **/

        function rejectPending(self) {
            $('.loader-modal-lg').modal('show')
            var modal = $(self).closest('.modal');
            //var uid=$("#id").val();
            var uid = $('#id').html();
            var oldAvailable = $("#available").text();

            // pending cancellation
            var available = 0;

            // pending signed
            if (oldAvailable == 6) {
                available = 5;
            }

            // $('.modal').data('id',rowData.id)
            // change the status of the unit from pending to available
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {available: available, contract_type: 0, uid: uid, csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + "/unit/available/";
            // Append page CSRF token
            var req1 = $.ajax({
                type: "POST",
                url: url,
                data: params

            }).done(function (data) {
                $('.loader-modal-lg').modal('hide');
                $('#unitTable').DataTable().ajax.reload(null, false);
                saveHistory("", uid, "", "", "Reject Cancellation ");


                var req = $.ajax({
                    url: site['uri']['public'] + '/cancelreaso/' + uid,
                    type: "get"

                }).done(function (data) {
                    $('#cancelinfo').modal('hide');
                    $('#cancelreas').modal('hide')
                })
            })
                .fail(failureCallback);
        }

        function reserveNow(self) {
            /*
             0) clear form
             */
            $("#reservePrePage").addClass("hide");
            $("#tempSave").addClass("hide");
            $("#user_pass").parent().removeClass("valid has-error has-success");
            $("#discountPass").parent().removeClass("has-error");
            cancelReservationModal();
            var data = extractDataFromRow($(self).parent().parent()),
                unitId = data.id,
                fixed_collected_fees = $("#fixed_collected_fees").val();


            //Add Local Storage Variable so that if any other tab clicked same variable not allow it
            localStorage.setItem(unitId, "reserved");

            // Set unit id on data attribute at modal
            $('.reservation-modal-lg').data("Uid", unitId);

            $('.reservation-modal-lg').modal("show");
            //show Price in both customerModal and after continueBtn is pressed
            $("#price").val(data.price);
            //$("#priceVal").val(data.price);
            //Uncheck the UserSelection
            $('#isDicount').attr('checked', false);
            $('#isAddition').attr('checked', false);
            $('#additionDetails').prop('disabled', true);
            $('#selectDiscount').prop('disabled', true);
            $("#additiontDiv").hide();
            $('#discountDiv').hide();
            // initialize date picker
            $('#reservationDate').datetimepicker({
                format: 'YYYY/MM/DD'
            });
            $('#reservationDate').data("DateTimePicker").date(moment().format("YYYY-MM-DD"));
        }

        var discountIdPublic = "";
        var additionValPublic = "";

        function saveReservationModal() {

            localStorage.removeItem('userPassed');
            /**first show the totalCustomerPrice Detail div**/

            $('.save-btn:contains("Proceed")').html("Save");
            $("#openCustomerDetailsBtn").attr("onclick", "saveReservationModal()");
            $("#priceDetails").hide();
            $("#customerDetails").show();
            $("#totalPriceDiv").show();
            $("label[for='totalPrice']").text(_translate('total_price'));

            /*
             check first time is clicked change btn html
             */

            if (modalValidityCheck("#customerDetailsForm") && $('.save-btn:contains(' + _translate('save') + ')').length) {
                discountIdPublic = "";
                additionValPublic = "";
                $("#customerDetails").hide();
                $(".more-option").addClass("hide");
                // get unit id from data attribute at modal
                var uid = $('.reservation-modal-lg').data("Uid");
                reservation = getValuesFromContract('.reservation-modal');
                console.info(reservation)
                reservation['TotalPrice'] = $("#totalPrice").val();
                reservation['reservationEmailNote'] = $("#reservationEmailNote").val().trim();
                checkRowInsertedNumber = $('.checkTable tbody tr').length;
                console.log("PaymentMethod_select  " + reservation.PaymentMethod_select)
                console.log("directInstallmentAdded  " + reservation.directInstallmentAdded)
                //discountIdPublic = $("#selectDiscount  option:selected").val();
                var discount_elements = document.querySelectorAll('#DiscountTemp>ul>div>li');
                // var discountIdPublic = "" ;
                var discount_id_arr = [];
                for (var i = 0; i < discount_elements.length; i++) {
                    if (i == discount_elements.length - 1) {
                        discountIdPublic += (discount_elements[i].textContent).replace('×', '').trim();

                    } else {
                        discountIdPublic += (discount_elements[i].textContent).replace('×', '').trim() + " ,";
                    }
                }

                console.log("discountIdPublic  " + discountIdPublic)


                //additionValPublic = $("#additionDetails  option:selected").val();

                var Addition_elements = document.querySelectorAll('#additionalTemp>ul>div>li');

                for (var i = 0; i < Addition_elements.length; i++) {
                    if (i == Addition_elements.length - 1) {
                        additionValPublic += (Addition_elements[i].textContent).replace('×', '').trim();

                    } else {
                        additionValPublic += (Addition_elements[i].textContent).replace('×', '').trim() + " ,";
                    }
                }
                console.log("additionValPublic  " + additionValPublic)


                var csrf_token = $("meta[name=csrf_token]").attr("content");

                var reservationTemplateParams = {
                    customer_address: reservation.address,
                    customer_type_of_payment: reservation.typeofpayment,
                    customer_type_of_id: reservation.typeOfId,
                    customer_id: reservation.idNumber,
                    customer_name: reservation.customerName,
                    reservation_date: formatDateToDDMMYYYY(reservation['dateOfRes']),
                    reservation_email_note: reservation.reservationEmailNote,
                    collected_fees: reservation.collectedFees_select,
                    uid: uid,
                    phone_number: reservation.phoneNum,
                    mobile: reservation.Mobile,
                    issued_by: reservation.Issuedby,
                    total_price: reservation.TotalPrice,
                    origin_price: $('#price').val(),
                    addition_name: additionValPublic,
                    discount_name: discountIdPublic,
                    leadID: reservation.leadID,
                    PaymentMethod_select: reservation.PaymentMethod_select,
                    directInstallmentAdded: reservation.directInstallmentAdded,
                    currency: $('#currencies').val(),
                    csrf_token: encodeURIComponent(csrf_token)
                };

                console.log("PaymentMethod_select  " + reservationTemplateParams.PaymentMethod_select)
                console.log("directInstallmentAdded  " + reservationTemplateParams.directInstallmentAdded)

                var url = site['uri']['public'] + "/reservation/emailContent";
                $.ajax({
                    type: "POST",
                    url: url,
                    data: reservationTemplateParams
                }).success(function (response) {
                    $("#reservationEmailContent").html(response).show();
                    $(".more-option").addClass("hide");
                });
                //$("#reservationEmailContent").load(site['uri']['public'] + '/reservation/emailContent', reservationTemplateParams).show(); // change it to /reservation/emailContent
                $('.save-btn:contains(' + _translate('save') + ')').html(_translate('confirm_and_send_email'));
                return;
            }
            /*form validity Check and check if button is clicked twice by checking its html*/
            if (modalValidityCheck("#customerDetailsForm") && $('.save-btn:contains(' + _translate('confirm_and_send_email') + ')')) {
                /*hide reservation modal then open loader */
                $('.reservation-modal-lg').modal("hide");
                // openloader
                $('.loader-modal-lg').modal('show');

                /*
                 0) enable printing buttons
                 */
                enableButton($(self).closest('tr').find('.print-btn'))
                enableButton($(self).closest('tr').find('.receipt-btn'))

                // get unit id from data attribute at modal
                var uid = $('.reservation-modal-lg').data("Uid");
                //  /*
                //   1)update the availabe flag
                // */

                var csrf_token = $("meta[name=csrf_token]").attr("content");
                var params = {available: 0, contract_type: 0, uid: uid, csrf_token: encodeURIComponent(csrf_token)};
                var urlUA = site['uri']['public'] + "/unit/available/";
                // Append page CSRF token
                var req1 = $.ajax({
                    type: "POST",
                    url: urlUA,
                    data: params

                }).done(function (data) {
                    $('#unitTable').DataTable().ajax.reload(null, false);
                }).fail(failureCallback);

                /*
                 2)get values from form and format them to send to db
                 */
                var reservation = getValuesFromContract('.reservation-modal');
                console.log(reservation)
                reservation['TotalPrice'] = $("#totalPrice").val();
                reservation['reservationEmailNote'] = $("#reservationEmailNote").val().trim();
                var checkRowInsertedNumber = $('.checkTable tbody tr').length;
                var totalPrice = $("#priceVal").val();
                var discountName = $("#selectDiscount  option:selected").text();
                var additionName = $("#additionDetails  option:selected").text();


                console.log("PaymentMethod_select  " + reservation.PaymentMethod_select)
                console.log("directInstallmentAdded  " + reservation.directInstallmentAdded)

                console.log("discountIdPublic  " + discountIdPublic)


                console.log("additionValPublic  " + additionValPublic)
                var insertDB = {
                    customer_address: reservation.address,
                    customer_type_of_payment: reservation.typeofpayment,
                    customer_type_of_id: reservation.typeOfId,
                    customer_id: reservation.idNumber,
                    customer_name: reservation.customerName,
                    reservation_date: formatDateToYYYYMMDD(reservation['dateOfRes']),
                    reservation_email_note: reservation.reservationEmailNote,
                    collected_fees: reservation.collectedFees_select,
                    uid: uid, phone_number: reservation.phoneNum,
                    mobile: reservation.Mobile,
                    issued_by: reservation.Issuedby,
                    total_price: reservation.TotalPrice,
                    origin_price: $('#price').val(),
                    addition_name: additionValPublic,
                    discount_name: discountIdPublic,
                    leadID: reservation.leadID,
                    country: reservation.country,
                    city: reservation.city,
                    region: reservation.region,
                    street: reservation.street,
                    mailbox: reservation.Mailbox,
                    postalcode: reservation.postalcode,
                    workphone: reservation.workphone,
                    email: reservation.email,
                    PaymentMethod_select: $("#PaymentMethod_select").text().replace('Payment Method :', ''),
                    directInstallmentAdded: $("#directInstallmentAdded").text().replace('Direct Installment Added :', ''),
                    exchange_rate: $('#exchange_rate').val(),
                    currency: $('#currencies').val(),
                    discount_details: replaceAll($('#discount_details').text(), 'Discount Name :', ''),
                    addition_details: replaceAll($('#addition_details').text(), 'Addition Name :', ''),

                    csrf_token: encodeURIComponent(csrf_token)
                };

                console.log("PaymentMethod_select DB " + insertDB.PaymentMethod_select)
                console.log("directInstallmentAdded DB " + insertDB.directInstallmentAdded)

                var urlR = site['uri']['public'] + "/reservation/";
                var testUrl = site['uri']['public'] + "/unit/available";
                var params = {csrf_token: encodeURIComponent(csrf_token), uid: uid};
                var req2 = $.ajax({
                    type: "POST",
                    url: urlR,
                    data: insertDB,
                    statusCode: {
                        451: function (err) {
                            console.log('451 status code! user error', 451);
                        }
                    }
                }).done(function (data) {
                    /*close spinner on success*/
                    console.log(data)
                    var resDate = formatDateToYYYYMMDD(reservation['dateOfRes']);
                    var reservationID = data;


                    $('.loader-modal-lg').modal('hide');
                    if (data === "sorry this unit was reserved by another user") {
                        // $('.already-reserved-modal-lg').modal("show");
                        // return;

                        if (i === checkRowInsertedNumber - 1) {
                            /*
                             4) close loader
                             */
                            $.when(req1, req2).done(function (data1, data2, data3) {
                                cancelReservationModal();
                                $('.loader-modal-lg').modal('hide')
                            });
                        }
                    }

                    //Get the user name and prepare for the reservation history process
                    var Resdate = new Date(reservation['dateOfRes']);
                    var dateTime1 = moment(Resdate).format("YYYY-MM-DD");
                    saveHistory(reservation.customerName, uid, dateTime1, "", "Reserved");
                    $('.reservation-modal-lg').modal("hide");

                }).fail(failureCallback);
            }//end of validity check
        }

        function replaceAll(allString, replaceMatch, replaceWith) {
            let index = allString.indexOf(replaceMatch);
            while (index != -1) {
                let newClassName = allString.substring(0, index);
                newClassName += replaceWith;
                newClassName += allString.substring(index + replaceMatch.length, allString.length);
                allString = newClassName;
                index = allString.indexOf(replaceMatch);
            }

            return allString;
        }

        //Logg function
        function saveHistory(customerName, uid, resDate, user_name, action) {
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {
                customer_name: customerName,
                uid: uid,
                reservation_date: resDate,
                user_name: user_name,
                csrf_token: encodeURIComponent(csrf_token),
                action: action
            };

            var urlUA = site['uri']['public'] + "/unit/setHistory/";
            // Append page CSRF token
            var req1 = $.ajax({
                type: "POST",
                url: urlUA,
                data: params
            }).done(function (data) {
            }).fail(failureCallback);
        }

        function addToPurchase(paramCRFToken, unitID) {
            var currentDate = new Date();
            var refinedDate = currentDate.toISOString().slice(0, 10);
            var purchaseData = {
                dateOfPurchase: refinedDate,
                unit_id: unitID,
                csrf_token: paramCRFToken
            };
            var url = site['uri']['public'] + "/purchase/";
            $.ajax({
                type: "POST",
                url: url,
                data: purchaseData
            }).done(function (resp) {
                var table = $('#unitTable').DataTable();
                var info = table.page.info();
                //Sending purchase Email here

                // $('#unitTable').DataTable().ajax.reload();
                //table.page( 2 ).draw( 'page' );

                console.log(resp)

            }).fail(function (err) {
                console.log(err);
            });
        }

        function saveContract1() {

            var paymentsRowInsertedNumber = $('#paymentTable tbody tr').length;
            console.log("paymentsRowInsertedNumber " + paymentsRowInsertedNumber)
            if (paymentsRowInsertedNumber > 0) {
                $("#paymentAmount").removeClass(" -input");
                $("#paymentDate").removeClass(" -input");
                $("#error_msg").html("");
                $('.contract-modal-lg').modal('hide');
                $("#prePage").addClass("display-none");
                $('.loader-modal-lg').modal('show');

                var timer;
                /*
               1)update the availabe flag and contract_type
               */
                var uid = $('.contract-modal-lg').data("Uid");
                var csrf_token = $("meta[name=csrf_token]").attr("content");
                var params = {available: 3, contract_type: 1, uid: uid, csrf_token: encodeURIComponent(csrf_token)};
                var url = site['uri']['public'] + "/unit/available/";
                // Append page CSRF token
                var req1 = $.ajax({
                    type: "POST",
                    url: url,
                    data: params,

                }).done(function (data) {
                    $('#unitTable').DataTable().ajax.reload(null, false);
                    //send purchased email
                }).fail(failureCallback);

                clearTimeout(timer); // Clear the timer so we don't end up with dupes.
                timer = setTimeout(function () { // assign timer a new timeout
                    var values = getValuesFromContract('.form-horizontal');
                    console.log(values)
                    var $checkbox = $("#addPart6");
                    var $checkbox_delivery = $("#addPaidWithDelivery");
                    if ($checkbox.prop('checked')) {
                        //part 6 selected so add it to contract1
                        values.addPart6 = "1";
                    } else {
                        //part 6 not selected
                        values.addPart6 = "0";
                    }


                    if ($("#addSafqa").prop('checked')) {
                        values.addSafqa = "1";
                        if ($("#safqaDate").val().replace(/\s/g, '') != "") {
                            values.safqaDate = $("#safqaDate").val().trim();
                        }
                    } else {
                        values.addSafqa = "0";
                        values.safqaDate = "";
                    }


                    //console.log(values)
                    //console.log(values.CostPaidWithDelivery)
                    var radioValue = $("input[name='optradio']:checked").val();
                    values.addPartB = radioValue;
                    var paymentsInfo;
                    var csrf_token = $("meta[name=csrf_token]").attr("content");
                    // Edited By Ahmad Tome (based id instead of unit id)
                    var params = {
                        uid: uid,
                        //uid: values.uuid,
                        contractDate: formatDateToYYYYMMDD(values.contractDate),
                        companyNum: "562493072",
                        systemUser: values.systemUser,
                        purchaser1: values.purchaser1,
                        idType1: values.idType1,
                        idNum1: values.idNum1,
                        idPlace1: values.idPlace1,
                        idProDate1: formatDateToYYYYMMDD(values.idProDate1),
                        idExpDate1: formatDateToYYYYMMDD(values.idExpDate1),
                        regNo1: values.regNo1,
                        registered1: values.registered1,
                        passportNo1: values.passportNo1,
                        country1: values.country1,
                        city1: values.city1,
                        regionName1: values.regionName1,
                        streetName1: values.streetName1,
                        homePhone1: values.homePhone1,
                        workPhone1: values.workPhone1,
                        mobileNum1: values.mobileNum1,
                        faxNum1: values.faxNum1,
                        mailBox1: values.mailBox1,
                        postalCode1: values.postalCode1,
                        eMail1: values.eMail1,
                        purchaser2: values.purchaser2,
                        idType2: values.idType2,
                        idNum2: values.idNum2,
                        idPlace2: values.idPlace2,
                        idProDate2: formatDateToYYYYMMDD(values.idProDate2),
                        idExpDate2: formatDateToYYYYMMDD(values.idExpDate2),
                        regNo2: values.regNo2,
                        registered2: values.registered2,
                        passportNo2: values.passportNo2,
                        country2: values.country2,
                        city2: values.city2,
                        regionName2: values.regionName2,
                        streetName2: values.streetName2,
                        homePhone2: values.homePhone2,
                        workPhone2: values.workPhone2,
                        mobileNum2: values.mobileNum2,
                        faxNum2: values.faxNum2,
                        mailBox2: values.mailBox2,
                        postalCode2: values.postalCode2,
                        eMail2: values.eMail2,
                        unitNum: values.unitNum,
                        unitArea: values.unitArea,
                        haiName: values.haiName,
                        floorNum: values.floorNum,
                        landNum: values.landNum,
                        hawdNum: values.hawdNum,
                        hawdName: values.hawdName,
                        buildingNum: values.buildingNum,
                        buildingsNum: values.buildingsNum,
                        unitDesc: values.unitDesc,
                        damageFine: values.damageFine,
                        releaseDate: values.releaseDate,
                        priceTotal: values.priceTotal,
                        pricePart1: values.pricePart1,
                        pricePart2: values.pricePart2,
                        pricePart3: values.pricePart3,
                        delayPeriod: values.delayPeriod,
                        penaltyClause: values.penaltyClause,
                        companyName: values.companyName,
                        companyFor: values.companyFor,
                        haiArea: values.haiArea,
                        ownersUnionNum: values.HAO_num,
                        ownersUnionProDate: formatDateToYYYYMMDD(values.HAO_date),
                        checksNum: values.checksNum,
                        arabon: values.arabon,
                        remainingAmountDelay: values.remainingAmountDelay,
                        penefitCompensation: values.penefitCompensation,
                        addPart6: values.addPart6,
                        addPartB: values.addPartB,
                        addSafqa: values.addSafqa,
                        annexes: values.annexes,
                        safqaDate: formatDateToYYYYMMDD(values.safqaDate),
                        companyNum_reg: values.companyNum_reg,
                        csrf_token: encodeURIComponent(csrf_token)
                    };
                    var url = site['uri']['public'] + "/contract1/";
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: params
                    }).done(function (data) {

                        console.log(data);
                        var Resdate = new Date(values.contractDate);
                        var dateTime1 = moment(Resdate).format("YYYY-MM-DD HH:mm:ss");
                        saveHistory(values.purchaser1, values.uuid, dateTime1, "", "Purchase Contract 1");

                        for (var i = 1; i <= paymentsRowInsertedNumber; i++) {
                            // check if values not empty then add to db
                            if (values['payment' + i] > 0 || values['paymentAmount' + i] > 0 || values['paymentDate' + i]) {
                                paymentsInfo = {
                                    payment: values['payment' + i],
                                    paymentAmount: values['paymentAmount' + i],
                                    paymentDate: formatDateToYYYYMMDD(Date.parse(values['paymentDate' + i])),
                                    // Edited By Ahmad Tome (based id instead of unit id)
                                    uid: uid,
                                    //uid: values.uuid,
                                    csrf_token: encodeURIComponent(csrf_token)
                                };

                                console.log("paymentsInfo  " + i + " : " + paymentsInfo.paymentAmount)


                                //send the reason and storer it on the database
                                //  var params={date:date,user_id:user_id,uid:uid,reason:reason,flag:flag,csrf_token:encodeURIComponent(csrf_token)};
                                var url = site['uri']['public'] + "/payments1/";
                                var req3 = $.ajax({
                                    type: "POST",
                                    url: url,
                                    data: paymentsInfo
                                }).done(function (data) {
                                    console.log("success payment 1")
                                    console.log(data)
                                }).fail(function (err) {
                                    console.log("error payment 1")
                                    //failureCallback();
                                });
                            }//end of if that checks validity of input
                        } //end of for loop
                        $('.loader-modal-lg').modal('hide');
                        $('#unitTable').DataTable().ajax.reload(null, false);
                    })
                        .fail(function (err) {
                            console.log(_translate('error'));

                            var params = {
                                available: 0,
                                contract_type: 0,
                                uid: uid,
                                csrf_token: encodeURIComponent(csrf_token)
                            };
                            var url = site['uri']['public'] + "/unit/available/";
                            // Append page CSRF token
                            var req1 = $.ajax({
                                type: "POST",
                                url: url,
                                data: params

                            }).done(function (data) {
                                $('#unitTable').DataTable().ajax.reload(null, false);
                            })
                                .fail(failureCallback);
                        });
                    addToPurchase(encodeURIComponent(csrf_token), values.uuid);
                }, 700);
            } else {
                $("#paymentAmount").addClass(" -input");
                $("#paymentDate").addClass(" -input");
                $("#error_msg").html(_translate('payment_message'));
            }

        }

        function hideContract3Dates(checkingCondition) {
            return checkingCondition === 'on';
        }

        function saveContract2() {
            $('.contract-modal-lg').modal('hide');
            $("#prePage").addClass("display-none");
            $('.loader-modal-lg').modal('show');
            /*
             1)update the availabe flag and contract_type
             */
            var uid = $('.contract-modal-lg').data("Uid");
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {available: 3, contract_type: 2, uid: uid, csrf_token: encodeURIComponent(csrf_token)};

            var url = site['uri']['public'] + "/unit/available/";
            // Append page CSRF token
            var req1 = $.ajax({
                type: "POST",
                url: url,
                data: params

            }).done(function (data) {
                $('#unitTable').DataTable().ajax.reload(null, false);//review
            }).fail(failureCallback);
            var rent;
            var timer;
            clearTimeout(timer); // Clear the timer so we don't end up with dupes.
            timer = setTimeout(function () { // assign timer a new timeout
                var values = getValuesFromContract('.form-horizontal');
                //console.log(values)

                // Edited By Ahmad Tome (to add finishing price to total price)
                var additionprice = parseInt($('#extraAdditions').val());
                if (isNaN(additionprice) || additionprice == null) {
                    additionprice = 0;
                }

                localStorage.setItem('unitId', JSON.stringify(values.uuid));
                var currentSerial = [];
                var csrf_token = $("meta[name=csrf_token]").attr("content");
                rent = values.rentPeriod;

                // Edited By Ahmad Tome (based id instead of unit id)

                var params = {
                    uid: uid,
                    //uid: values.uuid,
                    contract2Date: formatDateToYYYYMMDD(values.contract2Date),
                    baytiCompanyNumber: values.baytiCompanyNumber,
                    systemUser2: values.systemUser2,
                    renter1: values.renter1,
                    r_idType1: values.r_idType1,
                    r_idNum1: values.r_idNum1,
                    r_idPlace1: values.r_idPlace1,
                    r_idProDate1: formatDateToYYYYMMDD(values.r_idProDate1),
                    r_idExpDate1: formatDateToYYYYMMDD(values.r_idExpDate1),
                    r_passportNo1: values.r_passportNo1,
                    r_country1: values.r_country1,
                    r_city1: values.r_city1,
                    r_regionName1: values.r_regionName1,
                    r_streetName1: values.r_streetName1,
                    r_homePhone1: values.r_homePhone1,
                    r_workPhone1: values.r_workPhone1,
                    r_mobileNum1: values.r_mobileNum1,
                    r_faxNum1: values.r_faxNum1,
                    r_mailBox1: values.r_mailBox1,
                    r_postalCode1: values.r_postalCode1,
                    r_eMail1: values.r_eMail1,
                    renter2: values.renter2,
                    r_idNum2: values.r_idNum2,
                    r_idType2: values.r_idType2,
                    r_idPlace2: values.r_idPlace2,
                    r_idProDate2: formatDateToYYYYMMDD(values.r_idProDate2),
                    r_idExpDate2: formatDateToYYYYMMDD(values.r_idExpDate2),
                    r_passportNo2: values.r_passportNo2,
                    r_country2: values.r_country2,
                    r_city2: values.r_city2,
                    r_regionName2: values.r_regionName2,
                    r_streetName2: values.r_streetName2,
                    r_homePhone2: values.r_homePhone2,
                    r_workPhone2: values.r_workPhone2,
                    r_mobileNum2: values.r_mobileNum2,
                    r_faxNum2: values.r_faxNum2,
                    r_mailBox2: values.r_mailBox2,
                    r_postalCode2: values.r_postalCode2,
                    r_eMail2: values.r_eMail2,
                    r_unitNum: values.r_unitNum,
                    r_unitArea: values.r_unitArea,
                    r_haiName: values.r_haiName,
                    r_floorNum: values.r_floorNum,
                    r_landNum: values.r_landNum,
                    r_hawdNum: values.r_hawdNum,
                    r_hawdName: values.r_hawdName,
                    r_buildingNum: values.r_buildingNum,
                    r_buildingsNum: values.r_buildingsNum,
                    r_unitDesc: values.r_unitDesc,
                    rentPeriod: values.rentPeriod,
                    rentPrice: values.rentPrice,
                    releasePeriod: values.releasePeriod,
                    startRentDate: formatDateToYYYYMMDD(values.startRentDate),
                    endRentDate: formatDateToYYYYMMDD(values.endRentDate),
                    // Edited By Ahmad Tome
                    r_totalPrice: parseInt(values.r_totalPrice) + additionprice,
                    yy: values.yy,
                    extraAdditions: additionprice,
                    paymentAPeriod: values.paymentAPeriod,
                    paymentA: Math.round(values.paymentA),
                    fromDateA: formatDateToYYYYMMDD(values.fromDateA),
                    toDateA: formatDateToYYYYMMDD(values.toDateA),
                    paymentBPeriod: values.paymentBPeriod,
                    paymentB: Math.round(values.paymentB),
                    fromDateB: formatDateToYYYYMMDD(values.fromDateB),
                    toDateB: formatDateToYYYYMMDD(values.toDateB),
                    paymentCPeriod: values.paymentCPeriod,
                    paymentC: Math.round(values.paymentC),
                    fromDateC: formatDateToYYYYMMDD(values.fromDateC),
                    toDateC: formatDateToYYYYMMDD(values.toDateC),
                    // Edited By Ahmad Tome
                    // checksNum: values.rentPeriod,
                    checksNum: values.r_checksNum,
                    contract2Day: values.contract2Day,
                    r_haiArea: values.r_haiArea,
                    r_HAO_num: values.r_HAO_num,
                    r_HAO_date: values.r_HAO_date,
                    r_companyName: values.r_companyName,
                    r_companyFor: values.r_companyFor,
                    r_companyNum: values.r_companyNum,
                    sponsorName: values.sponsorName,
                    sponsorIdNum: values.sponsorIdNum,
                    sponsorMobile: values.sponsorMobile,
                    sponsorAddress: values.sponsorAddress,
                    r_showContract3Dates: values.showContract3Dates,
                    csrf_token: encodeURIComponent(csrf_token)
                };

                // Check if showContract3Dates checked or not
                hideContract3Dates(params['r_showContract3Dates']) ? params['r_showContract3Dates'] = 1
                    : params['r_showContract3Dates'] = 0;

                var url = site['uri']['public'] + "/contract2/";
                $.ajax({
                    type: "POST",
                    url: url,
                    data: params

                }).done(function (data) {

                    $('.loader-modal-lg').modal('hide');
                    //Ajax request to save the purchase process in the history table
                    var req = $.ajax({
                        url: site['uri']['public'] + '/reservationUnit/' + values.uuid,
                        type: "get"

                    }).done(function (data) {
                        data = JSON.parse(data);
                        reservation_id = data[0].reservation_id;
                        var Resdate = new Date(values.contractDate);
                        var dateTime1 = moment(Resdate).format("YYYY-MM-DD HH:mm:ss");
                        saveHistory(values.renter1, values.uuid, dateTime1, "", "Purchased Contract 2");

                    });
                    var table = $('#unitTable').DataTable();
                    var info = table.page.info();

                    $('#unitTable').DataTable().ajax.reload(null, false);
                    // table.page( 1 ).draw( 'page' );
                    var previd, initial;

                    //For Serial Number

                    // get the last serial number from database //
                    $.ajax({
                        url: site['uri']['public'] + '/final/?',
                        type: "get"
                    }).done(function (data) {
                        data = JSON.parse(data);
                        initial = Number(data[0].serial);
                        /// Get The contract2 ID ///
                        $.ajax({
                            url: site['uri']['public'] + '/contract2/' + uid,
                            type: "get"
                        }).done(function (data) {
                            data = JSON.parse(data);
                            var uidd = data.id;
                            var date = new Date(data.contract2Date);

                            /// Calculate the final value of serial number  and store it in the data base///
                            var finall = Number(rent) + 2 + initial;
                            var params = {serial: finall, csrf_token: encodeURIComponent(csrf_token)};
                            var req1 = $.ajax({
                                url: site['uri']['public'] + '/finall/?',
                                type: "POST",
                                data: params,
                            }).done(function (data) {
                            });

                            var params = {
                                init: initial,
                                final: finall,
                                uid: uidd,
                                csrf_token: encodeURIComponent(csrf_token)
                            };

                            $.ajax({
                                url: site['uri']['public'] + '/contract2/serial/?',
                                type: "POST",
                                data: params
                            }).done(function (data) {
                            });
                        });
                    });
                })
                    .fail(function (err) {
                        console.log(_translate('error'));

                        var params = {
                            available: 0,
                            contract_type: 0,
                            uid: uid,
                            csrf_token: encodeURIComponent(csrf_token)
                        };
                        var url = site['uri']['public'] + "/unit/available/";
                        // Append page CSRF token
                        var req1 = $.ajax({
                            type: "POST",
                            url: url,
                            data: params

                        }).done(function (data) {
                            $('#unitTable').DataTable().ajax.reload(null, false);
                        })
                            .fail(failureCallback);
                    });
                addToPurchase(encodeURIComponent(csrf_token), values.uuid);
            }, 700);
        }

        function saveContract3() {

            $('.contract-modal-lg').modal('hide');
            $("#prePage").addClass("display-none");
            $('.loader-modal-lg').modal('show');
            var timer;
            /*
                 1)update the availabe flag and contract_type
                 */
            var uid = $('.contract-modal-lg').data("Uid");

            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var params = {available: 3, contract_type: 3, uid: uid, csrf_token: encodeURIComponent(csrf_token)};
            var url = site['uri']['public'] + "/unit/available/";
            // Append page CSRF token
            var req1 = $.ajax({
                type: "POST",
                url: url,
                data: params,

            }).done(function (data) {
                $('#unitTable').DataTable().ajax.reload(null, false);
                //send purchased email
            }).fail(failureCallback);

            clearTimeout(timer); // Clear the timer so we don't end up with dupes.
            timer = setTimeout(function () { // assign timer a new timeout
                var values = getValuesFromContract('.form-horizontal #contract3');

                var paymentsInfo;
                var csrf_token = $("meta[name=csrf_token]").attr("content");
                var extraAdditions = $('#extraAdditions3').val();
                // Edited By Ahmad Tome , take id insted of unit id
                var params = {
                    //uid:values.uuid3,
                    uid: uid,
                    contractDate: formatDateToYYYYMMDD(values.contract3Date),
                    companyNum: "562493072",
                    systemUser: values.systemUser3,
                    purchaser1: values.purchaser3,
                    buildingNum: values.buildingNum3,
                    buildingsNum: values.buildingsNum3,
                    floorNum: values.floorNum3,
                    homeSize: values.unitArea3,
                    haiName: values.hai3Name3,
                    haiArea: values.haiArea3,
                    unitDesc: values.unitDesc3,
                    buildingNum2: values.buildingNum3,
                    landNum: values.landNum3,
                    hawdNum: values.hawdNum3,
                    hawdName: values.hawdName3,
                    buildingsNum: values.buildingsNum3,
                    appendix: values.appendix,
                    moreInfo: values.moreInfo3,
                    during: values.during3,
                    price: values.price3Total,
                    ownerPart: values.price3Part1,
                    commonPrice: values.price3Part2,
                    signDate: formatDateToYYYYMMDD(values.HAO_date3),
                    fullName: values.purchaser13,
                    idNum: values.systemUserIDNo3,
                    companyName: values.companyName3,
                    addPart: values.appendix,
                    companyFor: values.companyFor3,
                    HAO_num: values.HAO_num3,
                    extraAdditions: extraAdditions,
                    csrf_token: encodeURIComponent(csrf_token)
                };
                var url = site['uri']['public'] + "/contract3/";
                $.ajax({
                    type: "POST",
                    url: url,
                    data: params
                }).done(function (data) {
                    console.log(data);
                    var Resdate = new Date(values.contract3Date);
                    var dateTime1 = moment(Resdate).format("YYYY-MM-DD HH:mm:ss");
                    saveHistory(values.purchaser3, values.uuid3, dateTime1, "", "Purchase Contract 3");

                    //end of for loop
                    $('.loader-modal-lg').modal('hide');
                    $('#unitTable').DataTable().ajax.reload(null, false); //ayatsalman
                })
                    .fail(function (err) {
                        console.log(_translate('error'));

                        var params = {
                            available: 0,
                            contract_type: 0,
                            uid: uid,
                            csrf_token: encodeURIComponent(csrf_token)
                        };
                        var url = site['uri']['public'] + "/unit/available/";
                        // Append page CSRF token
                        var req1 = $.ajax({
                            type: "POST",
                            url: url,
                            data: params

                        }).done(function (data) {
                            $('#unitTable').DataTable().ajax.reload(null, false);
                        })
                            .fail(failureCallback);


                    });
                addToPurchase(encodeURIComponent(csrf_token), values.uuid3);
            }, 700);


        }

        /** edited by Ayat Salman **/
        function showCancellationModal(self) {

            if ($('.cancellation-modal-lg').data('old-template')) {
                $(".cancellation-modal-lg").html($('.cancellation-modal-lg').data('old-template'))
            }
            if (flagg == 1) {
                var data = extractDataFromRow($(self).parent().parent()),
                    unitId = data.unit,
                    building = data.building,
                    neighborhood = data.neighborhood,
                    tapu_code = data.tapu_code,
                    rawabi_code = data.rawabi_code;
            }
            if (flagg == 0) {
                var modal = $(self).closest('.modal');
                var unitId = $('#id').html();
                var neighborhood = $('#neighborhood').html();
                var building = $('#building').html();
                var tapu_code = $('#tapu_code').html();
                var rawabi_code = $('#rawabi_code').html();
                ;
            }

            var template = $(".cancellation-modal-lg").html().replace(new RegExp('&lt;', 'g'), '<').replace(new RegExp('&gt;', 'g'), '>');

            var oldTemplate = template;

            var htmlReciptTempl = _.template(template)({
                unitId: unitId,
                building: building, neighborhood: neighborhood, tapu_code: tapu_code, rawabi_code: rawabi_code
            });


            $('.cancellation-modal-lg').html(htmlReciptTempl).modal("show")
            // save unit this to dialog to pass it to cancelReservation function
            $('.cancellation-modal-lg').data('parent-unit', self);
            $('.cancellation-modal-lg').data('old-template', oldTemplate);
        }

        /** edited by Ayat Salman **/
        function cancelReservation(self, cancelID) {
            /*hide reservation modal then open loader */
            if (flagg == 1) {
                // requestToCancel(self);
            }
            if (allow == 1) {
                allow = 0;
                // cancelID=$("#cancelId").text();
                $('.cancellation-modal-lg').modal("hide");
                // openloader
                $('.loader-modal-lg').modal('show');
                if (flagg == 1) {
                    var data = extractDataFromRow($(self).parent().parent());
                    var unitId = data.id;
                }
                /*
             update pdf print flag to 0 since cancelled reservation
             */
                if (flagg == 0) {
                    var modal = $(self).closest('.modal');
                    //var uid=$("#id").val();
                    var unitId = $('#id').html();
                }
                var csrf_token = $("meta[name=csrf_token]").attr("content");
                var params = {flag: 0, uid: unitId, csrf_token: encodeURIComponent(csrf_token)};
                var url = site['uri']['public'] + "/unit/pdfPrintFlag/";
                // Append page CSRF token
                var req1 = $.ajax({
                    type: "POST",
                    url: url,
                    data: params
                }).done(function (data) {
                    console.log('pdfPrintFlag done : ', data)
                    //$('#unitTable').DataTable().ajax.reload(null, false);
                    /*
                    1)update the availabe flag
                    */
                    if (flagg == 1) {
                        var data = extractDataFromRow($(self).parent().parent());
                        var unitId = data.id;
                    }
                    if (flagg == 0) {
                        var modal = $(self).closest('.modal');
                        //var uid=$("#id").val();
                        var unitId = $('#id').html();
                    }
                    var csrf_token = $("meta[name=csrf_token]").attr("content");
                    var params = {
                        available: 1,
                        contract_type: 0,
                        uid: unitId,
                        csrf_token: encodeURIComponent(csrf_token)
                    };
                    var url = site['uri']['public'] + "/unit/available/";
                    // Append page CSRF token
                    var req2;
                    var req1 = $.ajax({
                        type: "POST",
                        url: url,
                        data: params
                    }).done(function (data) {
                        console.log('/unit/available/ done : ', data)
                        $('#unitTable').DataTable().ajax.reload(null, false);
                        if (cancelID)
                            var params = {uid: unitId, cancelID: cancelID, csrf_token: encodeURIComponent(csrf_token)};
                        else
                            var params = {uid: unitId, cancelID: -1, csrf_token: encodeURIComponent(csrf_token)};

                        saveHistory("", unitId, "", "", "Approve Cancellation: The reservation unit cancelled");


                        var url = site['uri']['public'] + "/reservation/";
                        console.log(params)
                        // Append page CSRF token
                        req2 = $.ajax({
                            type: "delete",
                            url: url,
                            data: params,
                        }).done(function (data) {
                            console.log('reservation/ done : ', data)
                            $('#unitTable').DataTable().ajax.reload(null, false);
                            var req = $.ajax({
                                url: site['uri']['public'] + '/cancelreaso/' + unitId,
                                type: "get"
                            }).done(function (data) {
                                console.log('cancelreaso/ done : ', data)
                                $('#cancelreas').modal('hide')
                                $('.loader-modal-lg').modal('hide')
                                $('#cancelinfo').modal('hide')
                                $('#unitTable').DataTable().ajax.reload(null, false);
                            }).fail(function (err) {
                                $('.loader-modal-lg').modal('hide');
                                console.log('cancelreaso/ Err : ', err)
                            });
                        }).fail(function (err) {
                            $('.loader-modal-lg').modal('hide');
                            console.log('reservation/ Err : ', err)
                        });
                    }).fail(function (err) {
                        $('.loader-modal-lg').modal('hide');
                        console.log('unit/Available Err : ', err)
                    });
                    $.when(req1, req2).done(function (data1, data2, data3) {
                        //$('.loader-modal-lg').modal('hide') bbaacckk
                        /*remove item from local storage after cancellation*/
                        localStorage.removeItem(unitId);
                        /*remove item from local storage after cancellation*/
                        localStorage.removeItem(unitId);
                    });
                    /*
                 4) hide cancellation dialog
                 */
                    // $('.loader-modal-lg').modal('hide') bbaacckk
                }).fail(function (err) {
                    $('.loader-modal-lg').modal('hide');
                    console.log('pdfPrintFlag Err : ', err)
                });
                cancelCancellationModal();
            }
        }


        function formatDateToYYYYMMDD(date) {
            /*
             date has two form either string like 11/06/2016 11:38 AM or date  like 1478425080000.
             this function format both
             */

            if (!date instanceof Date) {

                var dateWithoutTime = date.split(" ")[0];
                date = new Date(dateWithoutTime);
            } else {
                date = new Date(date);
            }
            //return moment(date).format("MM-DD-YYYY");
            return moment(date).format("YYYY-MM-DD");
        }

        // to convert dateformat from 2015-06-17 to 2015/06/17
        function formatDate(date) {
            var date = new Date(date),
                month = '' + (date.getMonth() + 1),
                day = '' + date.getDate(),
                year = date.getFullYear();

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;

            return [year, month, day].join('/');
        }

        function formatDateToDDMMYYYY(date) {
            /*
           date has two form either string like 11/06/2016 11:38 AM or date  like 1478425080000.
           this function format both
           */

            if (!date instanceof Date) {

                var dateWithoutTime = date.split(" ")[0];
                date = new Date(dateWithoutTime);
            } else {
                date = new Date(date);
            }
            return moment(date).format("DD-MM-YYYY");
        }

        function getYear(date) {

            var date = new Date(date);
            var year;
            if (date == "Invalid Date") {
                year = " ";
            } else {
                year = date.getFullYear();
            }
            return year
        }

        function getMonth(date) {
            var date = new Date(date);
            var month;
            if (date == "Invalid Date") {
                month = " ";
            } else {
                month = '' + (date.getMonth() + 1);
                if (month.length < 2) month = '0' + month;
            }

            return month;
        }

        function getDay(date) {
            var date = new Date(date);
            var day;
            if (date == "Invalid Date") {
                day = " ";
            } else {
                day = '' + date.getDate();
                if (day.length < 2) day = '0' + day;
            }
            return day;
        }

        // to add commas after thousand to receiptPrice and receiptPrice
        function addCommas(price) {
            price += '';
            x = price.split('.');
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + ',' + '$2');
            }
            return x1 + x2;
        }

        // to set a 6 digits for receiptRid after thosand
        function zeroPad(receiptRid) {
            var places = 6;
            var zero = places - receiptRid.toString().length + 1;
            return Array(+(zero > 0 && zero)).join("0") + receiptRid;
        }

        // ended by Abdallah Rizeq
        function disableButton($this) {
            $this.addClass('disabled');
            $this.prop('disabled', true);
        }

        function enableButton($this) {
            $this.removeClass('disabled');
            $this.prop('disabled', false);
        }

        function getValuesFromForm(formSelector) {
            // get all the inputs into an array.
            var inputs = $(formSelector + ' :input');
            var values = {};
            var labelHtml = "";
            inputs.each(function () {
                labelHtml = $("label[for='" + $(this).attr('id') + "']").html();
                if (!labelHtml) {
                    return;
                }
                labelHtml = labelHtml.replace('*', '').split(" ").join("");
                values[labelHtml] = $(this).val();
            });

            return values
        }

        function getValuesFromContract(formSelector) {
            // get all the inputs into an array.
            var inputs = $(formSelector + ' :input, select');
            var values = {};
            inputs.each(function () {
                values[$(this).attr('id')] = $(this).val();
            });
            return values
        }

        function extractDataFromRow(self) {
            /*
             //this is the print icon
             //parent is td
             // grandparent is tr
             */
            var tr = $(self);
            return $('#unitTable').DataTable().row(tr).data();
        }

        function pdfFunctionality(self, option) {
            $('.loader-modal-lg').modal('show');
            /*extract data from row*/
            var trData = extractDataFromRow($(self).parents('tr'));
            if (trData == null) {
                trData = extractDataFromRow($(self).parent().closest('td').parent().prev());

            }

            var unitId = trData.id;
            window.location = site['uri']['public'] + '/ShowEditableReceipt/' + unitId;


        }

        function pdfFunctionalityForParking(self, option, parkingId) {
            //$('.loader-modal-lg').modal('show');
            /*extract data from row*/
            var trData = extractDataFromRow($(self).parents('tr'));
            if (trData == null) {
                trData = extractDataFromRow($(self).parent().closest('td').parent().prev());

            }

            var unitId = trData.id;
            window.location = site['uri']['public'] + '/ShowEditableParking/' + unitId;


        }

        function pdfFunctionalityForStorage(self, option, storageId) {
            //$('.loader-modal-lg').modal('show');
            /*extract data from row*/
            var trData = extractDataFromRow($(self).parents('tr'));
            if (trData == null) {
                trData = extractDataFromRow($(self).parent().closest('td').parent().prev());

            }

            var unitId = trData.id;
            window.location = site['uri']['public'] + '/ShowEditableStorage/' + unitId;


        }

        function extendPDF(options) {
            var output;

        }

        function failureCallback(err) {
            $('.loader-modal-lg').modal('hide');
            console.log("error occured");
            console.log(err.status);
            if (err && err.status === 401) {
                // Showing a dialog of reservation doesn't not exists.
                alert(_translate('no_reservation_with_ID_msg'));
            }
        }

        // convert canvas to element that we could print
        function printCanvas(dataUrl) {

            var screenWidth = window.innerWidth;
            var screenHeight = window.innerHeight;
            var windowContent = '<!DOCTYPE html>';
            windowContent += '<html>'
            windowContent += '<head><title>Print canvas</title></head>';
            windowContent += '<body>'
            windowContent += '<img src="' + dataUrl + '">';
            windowContent += '</body>';
            windowContent += '</html>';
            var printWin = window.open('', '', 'width=' + screenWidth + ',height=' + screenHeight);
            printWin.document.open();
            printWin.document.write(windowContent);
            printWin.document.close();
            printWin.focus();
            printWin.print();
            printWin.close();
        }

        function downloadPdf(imgURL) {
            var doc = new jsPDF();

            doc.addImage(imgURL, 'JPEG', 15, 40, 180, 160);
            doc.save("invoice.pdf");
        }

        ///////////////////////////////////////////////////////////////////////////////
        function downloadPdf2(images, canvasHeight, canvasWidth, fileName) {
            var imgWidth = 210;
            var pageHeight = 297;
            var position = 0;
            var imgHeight = canvasHeight * imgWidth / canvasWidth;

            var doc = new jsPDF('p', 'mm');

            //doc.addImage(images[0], 'PNG', 0, position, imgWidth, imgHeight);

            for (var i = 0; i < images.length; i++) {
                if (images[i] != null) {
                    if (i != 0) {
                        doc.addPage();
                    }
                    doc.addImage(images[i], 'JPEG', 0, position, imgWidth, pageHeight);
                }
            }
            doc.save(fileName + '.pdf');
        }

        function checkContractType(self) {
            var data = extractDataFromRow($(self).parent().parent());
            unitId = data.id;
            contract_type = data.contract_type;

            // print contract
            printContract(self);

        }

        function printContract(self) {
            $('.loader-modal-lg').modal('show');
            var data = extractDataFromRow($(self).parent().parent());
            if (data) {
                unitId = data.id
            } else {
                unitId = $('.contract-modal-lg').data("Uid")
            }
            window.location.href = site['uri']['public'] + '/ShowContact1/' + unitId;
            $('.loader-modal-lg').modal('hide');
        }

        function printContractIslamicBank(self) {
            $('.loader-modal-lg').modal('show');
            var data = extractDataFromRow($(self).parent().parent());
            if (data) {
                unitId = data.id;
            } else {
                unitId = $('.contract-modal-lg').data("Uid");
            }
            window.location.href = site['uri']['public'] + '/ShowContact3/' + unitId;
            $('.loader-modal-lg').modal('hide');
        }

        function checkDate(date) {
            if (date == "0000-00-00") {
                date = "";
            } else if (date != "لا يوجد") {
                date = formatDate(date);
            }
            return date;
        }

        function selectContract(self) {

            var data = extractDataFromRow($(self).parent().parent());
            var unitId = data.id;
            $(".modal-body").val(unitId);
            $('.print-modal-lg').modal('show');

        }

        function printContract2(self) {
            $('.loader-modal-lg').modal('show');

            window.location.href = site['uri']['public'] + '/ShowContact2/' + unitId;
            $('.loader-modal-lg').modal('hide');
        }

        function resetObjectParameter(element, strings) {
            strings.forEach(function (item) {
                element['' + item] = '';
            });
        }

        function printContract3() {
            $('.loader-modal-lg').modal('show');
            var previd;
            previd = unitId - 1;
            $.ajax({
                url: site['uri']['public'] + '/contract2/' + unitId,
                type: "get"
            }).done(function (data) {
                data = JSON.parse(data);
                var date = new Date(data.contract2Date);
                previd = (data.id) - 1;
                var objectArray = [],
                    objectDate = [];

                var fetchedElements = {
                    contract2Date: checkDate(data.contract2Date),
                    renter1: data.renter1,
                    r_idNum1: data.r_idNum1,
                    r_city1: data.r_city1,
                    r_mobileNum1: data.r_mobileNum1,
                    sponsorName: data.sponsorName,
                    sponsorIdNum: data.sponsorIdNum,
                    sponsorAddress: data.sponsorAddress,
                    sponsorMobile: data.sponsorMobile,
                    rentPrice: data.rentPrice,
                    paymentAPeriod: data.paymentAPeriod,
                    paymentBPeriod: data.paymentBPeriod,
                    paymentCPeriod: data.paymentCPeriod,
                    paymentA: data.paymentA,
                    paymentB: data.paymentB,
                    paymentC: data.paymentC,
                    rentPeriod: data.rentPeriod,
                    fromDateA: data.fromDateA,
                    fromDateB: data.fromDateB,
                    fromDateC: data.fromDateC,
                    serialNumberInit: data.serialNumberInit,
                    serialNumberFinal: data.serialNumberFinal,
                    yy: data.yy,
                    showContract3Dates: data.r_showContract3Dates
                };
                var serialNumberInit = Number(fetchedElements['serialNumberInit']),
                    serialNumberFinal = Number(fetchedElements['serialNumberFinal']),
                    rentPeriod = Number(fetchedElements['rentPeriod']);
                // Drafts logic
                /*
               1- Fetch the values from posted from that has these id's -> paymentAperiod, paymentBperiod
               and paymentCperiod -> these will represents the length for each one of the objects
               2- Fetch the amount of money for each time interval so it varies in those objects (3 of them)
               by using id's -> paymentA, paymentB, paymentC;
               3- Combine those objects in single large object and pass it to array.map and leave the rest for it ))

               Change amount will generate different sets of amount for new object
               Then push changes to array called objectArray to iterate over it
               In that case we got the array of different object with different sets of values
               */
                var contract2Splited = fetchedElements.contract2Date.split('/').reverse();

                fetchedElements['contract2Day'] = contract2Splited[0];
                fetchedElements['contract2Month'] = contract2Splited[1];
                fetchedElements['contract2Year'] = contract2Splited[2];

                var dateA = (fetchedElements.fromDateA).split('-').reverse(),
                    dateB = (fetchedElements.fromDateB).split('-').reverse(),
                    dateC = (fetchedElements.fromDateC).split('-').reverse();

                for (var i = 0; i < Number(fetchedElements.rentPeriod); i++) {
                    if (i < Number(fetchedElements.paymentAPeriod)) {
                        objectArray.push(fetchedElements.paymentA);
                    } else if (i >= Number(fetchedElements.paymentAPeriod) && i < (Number(fetchedElements.paymentAPeriod) + Number(fetchedElements.paymentBPeriod))) {
                        objectArray.push(fetchedElements.paymentB);
                    } else if (i >= (Number(fetchedElements.paymentAPeriod) + Number(fetchedElements.paymentBPeriod))) {
                        objectArray.push(fetchedElements.paymentC);
                    }

                }
                (function () {
                    for (var i = 0; i < fetchedElements.paymentAPeriod; i++) {
                        objectDate.push(checkMonth(dateA, i + 1, dateA[0], 1)[1]);
                    }
                })();
                (function () {
                    for (var i = 0; i < fetchedElements.paymentBPeriod; i++) {
                        objectDate.push(checkMonth(dateB, i + 1, dateB[0], 1)[1]);
                    }
                })();
                (function () {
                    for (var i = 0; i < Number(fetchedElements.paymentCPeriod) + 2; i++) {
                        objectDate.push(checkMonth(dateC, i + 1, dateC[0], 1)[1]);
                    }
                })();
                // Getting amount
                var totalAmount = Number(fetchedElements.yy) -
                    (
                        Number(fetchedElements.paymentA) * Number(fetchedElements.paymentAPeriod) +
                        Number(fetchedElements.paymentB) * Number(fetchedElements.paymentBPeriod) +
                        Number(fetchedElements.paymentC) * Number(fetchedElements.paymentCPeriod) +
                        Number(fetchedElements.rentPrice)
                    );
                // Formatting amount for special drafts -> we have 2 of them (one with remaining amount, last one is empty
                objectArray.push(totalAmount);
                objectArray.push(' ');
                var iterateeObject = [],
                    itemsToHide = ['currentMonth', 'currentDay', 'currentYear', 'contract2Day', 'contract2Month', 'contract2Year'];

                (function changeAmount(amountsArray, dateArray, srcObject) {
                    for (var i = 0; i < amountsArray.length; i++) {
                        //Clone different copy from object
                        var newObject = _.clone(srcObject);

                        newObject['currentDate'] = dateArray[i];
                        newObject['currentDay'] = dateArray[i].split('/')[0];
                        newObject['currentMonth'] = dateArray[i].split('/')[1];
                        newObject['currentYear'] = dateArray[i].split('/')[2];

                        if (i === amountsArray.length - 1) {
                            newObject['currentDate'] = ' ';
                            newObject['currentDay'] = ' ';
                            newObject['currentMonth'] = ' ';
                            newObject['currentYear'] = ' ';
                        }
                        // Adding amount to each instance of that object
                        var tempAmount = amountsArray[i];
                        newObject['amount'] = formatCurrencySign(addCommas(tempAmount));
                        newObject['arabicAmount'] = inWordsArabic(tempAmount, '$', 'ar');
                        newObject['serialNumber'] = changeFormat(serialNumberInit + i);

                        iterateeObject.push(newObject);
                    }
                }(objectArray, objectDate, fetchedElements));

                iterateeObject.forEach(function (element) {
                    if (typeof (element) === 'object' && fetchedElements['showContract3Dates'] === 1) {
                        resetObjectParameter(element, itemsToHide);
                    }
                });

                function generatePdfStub(initail, interval, name) {
                    for (var i = initail; i < interval; i++) {
                        var temp = [];
                        var template = $("#contract3Page1").html().replace(new RegExp('&lt;', 'g'), '<')
                            .replace(new RegExp('&gt;', 'g'), '>');

                        (function (index) {
                            var htmlReciptTempl = _.template(template)(iterateeObject[index]);
                            $("<canvas/>")
                                .attr({height: "1700", width: "1500", id: "canvas-" + index})
                                .css({'display': 'none'})
                                .addClass('canvasReceipt1')
                                .appendTo('body');

                            var canvas = $("#canvas-" + index).get(0);

                            rasterizeHTML.drawHTML(htmlReciptTempl, canvas, {
                                cache: 'repeated'
                            }).then(function (result) {
                                var myImage = canvas.toDataURL("image/png");
                                temp.push(myImage);

                                if (index === interval - 1) {
                                    //if(name =='Draft_Phase1')
                                    downloadPdf2(temp, 1700, 1500, name);
                                }
                            });
                        })(i);
                    }
                }

                async.parallel([
                    function (callback) {
                        generatePdfStub(0, Number(fetchedElements.paymentAPeriod), 'Check1');
                    },
                    function (callback) {
                        generatePdfStub(fetchedElements.paymentAPeriod,
                            Number(fetchedElements.paymentAPeriod) + Number(fetchedElements.paymentBPeriod),
                            'Check2');
                    },
                    function (callback) {
                        generatePdfStub(
                            (Number(fetchedElements.paymentAPeriod) +
                                Number(fetchedElements.paymentBPeriod)),
                            (Number(fetchedElements.paymentAPeriod) +
                                Number(fetchedElements.paymentBPeriod) +
                                Number(fetchedElements.paymentCPeriod) +
                                2
                            ),
                            'Check3');
                        setTimeout(function () {
                            $('.loader-modal-lg').modal('hide');
                            localStorage.removeItem('showContract3Dates');
                        }, 32000);
                    }
                ], function (err, result) {
                    if (err) {
                        console.log('The error occured ' + result, err);
                    }
                });
            });
        }

        var specialValues = {},
            $contractModal = $('#contract-lg-modal'),
            $window = $(window);

        // Select all input that has data-currency
        var dInput = $('input[data-currency="$"]');

        dInput.each(function () {
            // Get parent and add specific class
            $(this).parent().addClass('dIcon');

            // change class to get a 100% width
            $(this).removeClass('width-15').addClass('width-100');
        });

        $('#pricePart1,#pricePart2, #extraAdditions, #extraAdditions3, #r_totalPrice, #yy,#purchaser11, #systemUserIDNo, #r_renter11, #r_idNum11, #contract2Day').attr('disabled', true);
        // First of all -> add indication that its required
        var $items = $('#contractsForm input[required]');

        $items.each(function () {
            /*$(this).closest('.form-group').append('<span class="reqSpan">*</span>');*/
            $(this).addClass('reqBorder');
        });
        /*---------------------------------------------------------------------------*/
        $contractModal.on('keyup change', '#contract1Part1 input[required]', function () {
            if ($(this).val()) {
                $(this)
                    .attr('data-validity', 'valid')
                    .removeClass('reqBorder')
                    .closest('div[class*="form"]')
                    // adding has-success & has-error for parent not element itself
                    .addClass('has-success')
                    .removeClass('has-error');
            } else {
                $(this).attr('data-validity', '').closest('.form-group').addClass('has-error').removeClass('has-success');
            }
            if (
                $('#contract1Part1 input[data-validity="valid"]').length
                ===
                $('#contract1Part1 input[required]').length
            ) {
                $('#openSelectedContract').removeAttr('disabled');
            }
        });
        $contractModal.on('keyup change', '#contract2Part1 input[required]', function () {
            if ($(this).val()) {
                $(this)
                    .attr('data-validity', 'valid')
                    .removeClass('reqBorder')
                    .closest('div[class*="form"]')
                    .addClass('has-success')
                    .removeClass('has-error');
            } else {
                $(this).attr('data-validity', '').closest('.form-group').addClass('has-error').removeClass('has-success');
            }

            if (
                $('#contract2Part1 input[data-validity="valid"]').length
                ===
                $('#contract2Part1 input[required]').length
            ) {
                $('#openSelectedContract').removeAttr('disabled');
            }
        });
        $contractModal.on('keyup change', '#contract2Part4 input[required]', function () {
            if ($(this).val()) {
                $(this)
                    .attr('data-validity', 'valid')
                    .removeClass('reqBorder')
                    .closest('div[class*="form"]')
                    .addClass('has-success')
                    .removeClass('has-error');
            } else {
                $(this).attr('data-validity', '').closest('.form-group').addClass('has-error').removeClass('has-success');
            }

            if (
                $('#contract2Part4 input[data-validity="valid"]').length
                ===
                $('#contract2Part4 input[required]').length
            ) {
                $('#openSelectedContract').removeAttr('disabled');
            }
        });
        $contractModal.on('keyup change', '#contract2Part5 input[required]', function () {
            if ($(this).val()) {
                $(this)
                    .attr('data-validity', 'valid')
                    .removeClass('reqBorder')
                    .parent()
                    // adding has-success & has-error for parent not element itself
                    .addClass('has-success')
                    .removeClass('has-error');
            } else {
                $(this).attr('data-validity', '').closest('div').addClass('has-error').removeClass('has-success');
            }
            if (
                $('#contract2Part5 input[data-validity="valid"]').length
                ===
                $('#contract2Part5 input[required]').length
            ) {
                $('#openSelectedContract').removeAttr('disabled');
            }
        });
        $contractModal.on('keyup change', '#contract2Part6 input[required]', function () {
            if ($(this).val()) {
                $(this)
                    .attr('data-validity', 'valid')
                    .removeClass('reqBorder')
                    .closest('div[class*="form"]')
                    .addClass('has-success')
                    .removeClass('has-error');
            } else {
                $(this).attr('data-validity', '').closest('.form-group').addClass('has-error').removeClass('has-success');
            }

            if (
                $('#contract2Part6 input[data-validity="valid"]').length
                ===
                $('#contract2Part6 input[required]').length
            ) {
                $('#openSelectedContract').removeAttr('disabled');
            }
        });
        /*---------------------------------------------------------------------------*/
        $contractModal.on('blur', "#pricePart3", function () {
            var totalPrice = $('#priceTotal').val(),
                extraAmount = $(this).val();
            // var finalPrice = Number(totalPrice) + Number(extraAmount);
            var finalPrice = Number(totalPrice);


            // $('#pricePart1').val( Math.ceil(finalPrice * 0.7));

            //$('#pricePart2').val( Math.floor(finalPrice * 0.3));

            //Edited by Ahmad Tome (repeat sum)
            //$('#priceTotal').val(finalPrice);
        });

        $contractModal.on('blur', '#rentPeriod', function () {
            var $monthN = $('#monthN'),
                $yy = $('#yy'),
                $serialNumberInit = $('#serialNumberInit'),
                $serialNumberFinal = $('#serialNumberFinal');

            specialValues.key1 = $(this).val();

            $serialNumberInit.val(0);
            $serialNumberFinal.val($(this).val());

            $monthN.val($(this).val());
            $yy.val($(this).val() * 1250);
            // Modify check numbers to be number of months + 1;
            // $('#r_checksNum').val(Number($(this).val()) + 1);
        });

        $contractModal.on('blur', '#startRentDate, #rentPeriod', function () {
            var $splitD = $('#startRentDate').val().split('/'),
                $endDate = $('#endRentDate'),
                $monthN = $('#rentPeriod'),
                sDay = Number($splitD[1]);
            if ($("#contract2Part4 #startRentDate").val() != "") {
                $("#contract2Part4 #startRentDate").removeClass("reqBorder");
                $('#openSelectedContract').removeAttr('disabled');
            } else {
                $("#contract2Part4 #startRentDate").addClass("reqBorder");
                $('#openSelectedContract').attr('disabled', 'disabled');
            }
            $('#startRentDate').val()
                ? $endDate.val(checkMonth($splitD, Number($monthN.val()), sDay)[0])
                : $endDate.val('Please Enter Input Date');
            var value = $('#startRentDate').val();

            specialValues.key2 = value;
            $('#fromDateA').val(specialValues.key2);
        });

        $contractModal.on('blur', '#paymentAPeriod', function () {
            var $startDate = $('#fromDateA'),
                $splitD = $startDate.val().split('/'),
                $endDate = $('#toDateA'),
                sDay = Number($splitD[1]);
            $startDate.val()
                ? $endDate.val(checkMonth($splitD, Number($(this).val()), sDay)[1])
                : $endDate.val('Please Enter Input Date');

            $startDate.val()
                ? $('#fromDateB').val(checkMonth($splitD, Number($(this).val()) + 1, sDay)[1])
                : $('#fromDateB').val('Please Enter Input Date');


            if ($(this).val() > Number(specialValues.key1)) {
                $(this).val(0);
                $endDate.val(0);
            } else {
                specialValues.key3 = $(this).val();
            }
        });

        $contractModal.on('blur', "#paymentBPeriod", function () {
            var $startDate = $('#fromDateB'),
                $splitD = $startDate.val().split('/'),
                $endDate = $('#toDateB'),
                sDay = Number($splitD[1]);
            $startDate.val()
                ? $endDate.val(checkMonth($splitD, Number($(this).val()), sDay)[1])
                : $endDate.val('Please Enter Input Date');

            $startDate.val()
                ? $('#fromDateC').val(checkMonth($splitD, Number($(this).val()) + 1, sDay)[1])
                : $('#fromDateC').val('Please Enter Input Date');

            var tempVal = Number($(this).val()) + Number(specialValues.key3);

            if (tempVal > Number(specialValues.key1)) {
                $(this).val(0);
                $endDate.val(0);

            } else if (tempVal == Number(specialValues.key1)) {
                $('#paymentCPeriod').val(0);
                $('#toDateC').val(0);
                $('#fromDateC').val(0);
                $('#paymentC').val(0);
                $("#paymentC").prop('required', null);
                $("#paymentC").removeClass('reqBorder');
                $("#paymentCPeriod").removeClass('reqBorder');
                $("#openSelectedContract").prop('disabled', false);

            } else {
                specialValues.key4 = $(this).val();
            }
        });

        $contractModal.on('blur', "#paymentCPeriod", function () {
            var $startDate = $('#fromDateC'),
                $splitD = $startDate.val().split('/'),
                $endDate = $('#toDateC'),
                sDay = Number($splitD[1]);
            $startDate.val()
                ? $endDate.val(checkMonth($splitD, Number($(this).val()), sDay)[1])
                : $endDate.val('Please Enter Input Date');

            var tempVal = Number($(this).val()) + Number(specialValues.key4) + Number(specialValues.key3);
            if (tempVal > Number(specialValues.key1)) {
                $(this).val(0);
                $endDate.val(0);
            } else {
                specialValues.key5 = $(this).val();
            }
        });

        $('#purchaser1,#purchaser2, #idNum1, #idNum2, #renter1, #renter2, #r_idNum1, #r_idNum2')
            .attr('data-in', 'check');

        $contractModal.on('mouseenter', '#contract1', function () {
            if ($('#purchaser1').val()) {
                localStorage.setItem('' + $('#purchaser1')[0].id, JSON.stringify($('#purchaser1').val()));
            }

            if ($('#idNum1').val()) {
                localStorage.setItem('' + $('#idNum1')[0].id, JSON.stringify($('#idNum1').val()));
            }
        });

        $contractModal.on('mouseenter', '#contract2', function () {
            if ($('#renter1').val()) {
                localStorage.setItem('' + $('#renter1')[0].id, JSON.stringify($('#renter1').val()));
            }

            if ($('#r_idNum1').val()) {
                localStorage.setItem('' + $('#r_idNum1')[0].id, JSON.stringify($('#r_idNum1').val()));
            }
        });

        $contractModal.on('blur', 'input[data-in="check"]', function () {

            if ($(this).val()) {
                // set it to local storage
                var key = $(this)[0].id;
                var value = $(this).val();
                localStorage.setItem('' + key, JSON.stringify(value));
            }
            changeInnerV({
                item1: $('#purchaser1'),
                item2: $('#purchaser2'),
                output: $('#purchaser11')
            });
            changeInnerV({
                item1: $('#idNum1'),
                item2: $('#idNum2'),
                output: $('#systemUserIDNo')
            });
            changeInnerV({
                item1: $('#renter1'),
                item2: $('#renter2'),
                output: $('#r_renter11')
            });
            changeInnerV({
                item1: $('#r_idNum1'),
                item2: $('#r_idNum2'),
                output: $('#r_idNum11')
            });

        });

        // Function check month
        function checkMonth(splitD, nMonth, sDay, flag) {

            var month31 = [1, 3, 5, 7, 8, 10, 12],
                month30 = [4, 6, 9, 11],
                sYear = Number(splitD[2].split(' ')[0]),
                eDay = 0,
                incYear = 0,
                endMonth = 0,
                endYear = 0,
                output = "",
                outerOutput = "";
            var sMonth = 0;
            if (flag) {
                sMonth = Number(splitD[1]);
            } else {
                sMonth = Number(splitD[0]);
            }
            /*
             * The process as follows : first get the final date after adding number of entered months
             * Then do the magic -> decrease number of days by 1 and rock after that
             */
            if (nMonth % 12 === 0) {
                incYear = nMonth / 12;
                endYear = incYear + sYear;
                endMonth = sMonth;
            } else {
                var incMonth = nMonth % 12;
                endMonth = incMonth + sMonth;
                endYear = Math.floor(nMonth / 12) + sYear;

                if (endMonth > 12) {
                    endMonth %= 12;
                    endYear += 1;
                }
            }
            eDay = sDay - 1;
            // Hope this will solve what is supposed to solve ->
            if (eDay === 0 && endMonth === 1) {
                // This special case create a hs every time
                /*  Supposed we have the following
                 * 01/06/2017 -> formatted as DD/ MM/ YYYY then we added 7 months
                 * it will be 01/01/2018 -> but we reduce number of days by 1 so it must become 31/12/2017
                 */
                eDay = 31;
                endMonth = 12;

                // Now to the most boring thing
                endYear -= 1;
            }
            // Handle day issues
            if (eDay === 0) {
                endMonth -= 1;
                // check current month
                if ($.inArray(endMonth, month31) > -1) {
                    // Maybe 31
                    eDay = 31;
                } else if ($.inArray(endMonth, month30) > -1) {
                    // Or 30
                    eDay = 30;
                } else if (endMonth === 2) {
                    // If not one of them then it must be Feb with 29/ 28 days
                    if (endYear % 4 === 0 || (endYear % 100 !== 0 && endYear % 400 === 0)) {
                        // Feb has 29 days
                        eDay = 29;
                    } else {
                        // Feb has 28 days
                        eDay = 28;
                    }
                }
                // To check if month equals to 0 then it must be 12 ;
                if (endMonth === 0) {
                    endMonth = 12;
                    eDay = 31;
                }
            }
            // Solving February bug
            // We need to check if the current month is 2 && check if year gives us 29/ 28 Feb
            // After that -> don't forget to modify eDay to fit your needs
            // If we have both day and month are 1 then we have to decrease the year
            // so, if we have 01/01/2016 then the end date should be
            // 31/12/2015
            // We have to insure that nMonth also is equal to 0 in that case system won't
            // change endYear to false value
            // If we dropped extra check, we will have this case
            // 01/01/2017 -> adding 13 months it will give us 31/1/2017 which is completely wrong.
            if ((sDay === 1 && sMonth === 1) && nMonth === 0) {
                endYear -= 1;
            }
            // Formatting eDay
            if (eDay < 10) {
                eDay = "0" + eDay;
            }
            // Formatting endMonth
            if (endMonth < 10) {
                endMonth = "0" + endMonth;
            }
            // This is used as a special case for drafts date generation
            var fixedDay = "01";
            output = endMonth + ' /' + eDay + ' /' + endYear;
            outerOutput = endMonth + ' /' + fixedDay + ' /' + endYear;

            return [output, outerOutput];
        }

        // Function change format
        function changeFormat(serial) {
            // This function used to convert number to 4 digits string
            // don't forget to convert that number to string
            var cSerial = serial.toString();
            var output = '';

            switch (cSerial.length) {
                case 1:
                    output = '000' + serial;
                    break;
                case 2:
                    output = '00' + serial;
                    break;
                case 3:
                    output = '0' + serial;
                    break;
                case 4:
                    output = '' + serial;
                    break;
                default:
                    console.log('You have done that');
                    break;
            }
            return output;
        }

        // Function change innerValue
        function changeInnerV(options) {
            if (
                JSON.parse(localStorage.getItem(options.item1.attr('id')))
                &&
                JSON.parse(localStorage.getItem(options.item2.attr('id')))
            ) {
                options.output.val(JSON.parse(localStorage.getItem(options.item1.attr('id')))
                    + ' و '
                    + JSON.parse(localStorage.getItem(options.item2.attr('id')))
                )
            } else if (JSON.parse(localStorage.getItem(options.item1.attr('id')))) {
                options.output.val(JSON.parse(localStorage.getItem(options.item1.attr('id'))));
            } else if (JSON.parse(localStorage.getItem(options.item2.attr('id')))) {
                options.output.val(JSON.parse(localStorage.getItem(options.item2.attr('id'))));
            }
        }

        $('[data-toggle="tooltip"]').tooltip();

        function geTemplate(id, className, index, params) {
            var template = $(id).html().replace(new RegExp('&lt;', 'g'), '<').replace(new RegExp('&gt;', 'g'), '>');
            var htmlReciptTempl = _.template(template)(params);
            var canvas = $($(className)[index]).get(0);
            return rasterizeHTML.drawHTML(htmlReciptTempl, canvas);
        }

        function stringifyNumber(n) {
            var special = ['صفر', 'الأولى', 'الثانية', 'الثالثة', 'الرابعة', 'الخامسة',
                'السادسة', 'السابعة', 'الثامنة', 'التاسعة', 'العاشرة', 'الحادية عشر',
                'الثانية عشر', 'الثالثة عشر', 'الرابعة عشر', 'الخامسة عشر', 'السادسة عشر', 'السابعة عشر', 'الثامنة عشر', 'التاسعة عشر'];
            var deca = ['العشرون', 'الثلاثون', 'الأربعون', 'الخمسون', 'الستون',
                'السبعون', 'الثمانون', 'التسعون'];
            if ((n == 21) || (n == 31) || (n == 41) || (n == 51)) {
                special[1] = "الحادية";
            }
            if (n < 20) {
                return special[n];
            }
            if (n % 10 === 0) {
                return deca[Math.floor(n / 10) - 2];
            }
            return (special[n % 10] + 'و' + deca[Math.floor(n / 10) - 2]);
        }

        function generate(type) {
            if (type == "add") {
                var numOfPayments = parseInt($("#numOfPayments").val()) || 0;
                $("#numOfPayments").parent().removeClass("has-error");
                $("#error_msg").empty();
                if (isNaN(numOfPayments) || numOfPayments <= 0 || numOfPayments > 84) {
                    $("#numOfPayments").parent().addClass("has-error");
                    return;
                }
                var totalPrice = parseInt($("#priceTotal").val()) || 0;
                var arabon = parseInt($("#arabon").val()) || 0;
                var payment = ((totalPrice - arabon) / numOfPayments).toFixed(2);
                var contractDate = "";
                var summation_Of_payment = arabon;
                if (payment > 0) {
                    // Edited by Ahmad Tome
                    var sum = totalPrice;
                    $("#paymentTable tbody").empty();
                    for (var i = 1; i <= numOfPayments - 1; i++) {
                        contractDate = $("#contractDate").val().split("/");
                        contractDate = new Date(contractDate[2], parseInt(contractDate[0]) - 1, contractDate[1]);
                        var nextMonth = contractDate.setMonth((contractDate.getMonth()) + i);
                        nextMonth = formatDateToYYYYMMDD(nextMonth);
                        var rowToAdd = '<tr><td><input type="text" id="payment' + (i) + '" dir="auto" class="form-control" readonly="" value="' + (i) + '"></td><td><input type="text" id="paymentAmount' + (i) + '" dir="auto" class="form-control" value="' + (Math.round(payment)) + '"></td><td><input type="text" id="paymentDate' + (i) + '" class="form-control" value="' + (nextMonth) + '"></td><td></td></tr>';
                        $("#paymentTable").append(rowToAdd);
                        sum -= (Math.round(payment));
                        summation_Of_payment += (Math.round(payment));
                    }


                    contractDate = $("#contractDate").val().split("/");
                    contractDate = new Date(contractDate[2], parseInt(contractDate[0]) - 1, contractDate[1]);
                    var nextMonth = contractDate.setMonth((contractDate.getMonth()) + i);
                    nextMonth = formatDateToYYYYMMDD(nextMonth);
                    var rowToAdd = '<tr><td><input type="text" id="payment' + (i) + '" dir="auto" class="form-control" readonly="" value="' + (i) + '"></td><td><input type="text" id="paymentAmount' + (i) + '" dir="auto" class="form-control" value="' + (Math.round(sum - arabon)) + '"></td><td><input type="text" id="paymentDate' + (i) + '" class="form-control" value="' + (nextMonth) + '"></td><td></td></tr>';
                    $("#paymentTable").append(rowToAdd);
                    summation_Of_payment += (Math.round(sum - arabon));
                    console.log("summation_Of_payment")
                    console.log(summation_Of_payment);

                    $('#total-price').text(totalPrice);
                    $('#summation-payment').text(summation_Of_payment);
                    $('#showPriceModal').modal('show');

                }
            } else {
                var numOfPayments = parseInt($("#cnumOfPayments").val()) || 0;
                $("#cnumOfPayments").parent().removeClass("has-error");
                $("#error_msg").empty();
                if (isNaN(numOfPayments) || numOfPayments <= 0 || numOfPayments > 84) {
                    $("#cnumOfPayments").parent().addClass("has-error");
                    return;
                }
                var totalPrice = parseInt($("#contract-modal-1 .total-price").val()) || 0;
                var arabon = parseInt($("#carabon").val()) || 0;
                console.log("total price : ", totalPrice);
                console.log("arabon : ", arabon);
                var payment = ((totalPrice - arabon) / numOfPayments).toFixed(2);
                var contractDate = "";
                if (payment > 0) {
                    var sum = totalPrice;
                    $("#cpaymentTable tbody").empty();
                    for (var i = 1; i <= numOfPayments - 1; i++) {
                        contractDate = $("#contract-modal-1 .contract-date").val().split("/");
                        contractDate = new Date(contractDate[2], parseInt(contractDate[0]) - 1, contractDate[1]);
                        var nextMonth = contractDate.setMonth((contractDate.getMonth()) + i);
                        nextMonth = formatDateToYYYYMMDD(nextMonth);
                        var rowToAdd = '<tr class="new-apend"><td><input type="text" id="cpayment' + (i) + '" dir="auto" class="form-control" readonly="" value="' + (i) + '"></td><td><input type="text" id="cpaymentAmount' + (i) + '" dir="auto" class="form-control" value="' + (Math.round(payment)) + '"></td><td><input type="text" id="cpaymentDate' + (i) + '" class="form-control" value="' + (nextMonth) + '"></td><td></td></tr>';
                        $("#cpaymentTable").append(rowToAdd);
                        sum -= (Math.round(payment));
                    }
                    contractDate = $("#contract-modal-1 .contract-date").val().split("/");
                    contractDate = new Date(contractDate[2], parseInt(contractDate[0]) - 1, contractDate[1]);
                    var nextMonth = contractDate.setMonth((contractDate.getMonth()) + i);
                    nextMonth = formatDateToYYYYMMDD(nextMonth);
                    var rowToAdd = '<tr class="new-apend"><td><input type="text" id="cpayment' + (i) + '" dir="auto" class="form-control" readonly="" value="' + (i) + '"></td><td><input type="text" id="cpaymentAmount' + (i) + '" dir="auto" class="form-control" value="' + (Math.round(sum - arabon)) + '"></td><td><input type="text" id="cpaymentDate' + (i) + '" class="form-control" value="' + (nextMonth) + '"></td><td></td></tr>';
                    $("#cpaymentTable").append(rowToAdd);

                }
            }


        }

        function addRow() {
            var paymentAmount = $("#paymentAmount").val();
            var paymentDate = $("#paymentDate").val();
            if (
                ("" != paymentAmount)
                &&
                (paymentAmount > 0)
                &&
                ("" != paymentDate)
            ) {
                $('#paymentTable')
                    .append(
                        '<tr>' +
                        '<td><input type="text" id="payment' + paymentIndex + '" dir="auto" class="form-control" readonly value="' + paymentIndex + '"></td>' +
                        '<td><input type="text" id="paymentAmount' + paymentIndex + '" dir="auto" class="form-control" value="' + paymentAmount + '"></td>' +
                        '<td><input type="text" id="paymentDate' + paymentIndex + '" class="form-control" value="' + paymentDate + '"></td>' +
                        '<td></td>' +
                        '</tr>');
                paymentIndex++;
                $("#payment").val(paymentIndex);
                $("#paymentAmount").val("").removeClass(' -input');
                $("#paymentDate").val("").removeClass(' -input');
            } else {
                if ((paymentAmount == "") || (paymentAmount <= 0)) {
                    $("#paymentAmount").addClass(' -input');
                }
                if (paymentDate == "") {
                    $("#paymentDate").addClass(' -input');
                }

            }
        }

        function removeRow(self) {
            console.log("Deleted");
        }

        function addRowEditModal() {
            var paymentAmount = $("#cpaymentAmount").val();
            var paymentDate = $("#cpaymentDate").val();
            paymentIndex = $("#cpaymentTable #cpayment").val();
            if (("" != paymentAmount) && (paymentAmount > 0) && ("" != paymentDate)
            ) {
                $('#cpaymentTable')
                    .append(
                        '<tr class="new-apend">' +
                        '<td><input type="text" id="cpayment' + paymentIndex + '" dir="auto" class="form-control" readonly value="' + paymentIndex + '"></td>' +
                        '<td><input type="text" id="cpaymentAmount' + paymentIndex + '" dir="auto" class="form-control" value="' + paymentAmount + '"></td>' +
                        '<td><input type="text" id="cpaymentDate' + paymentIndex + '" class="form-control" value="' + paymentDate + '"></td>' +
                        '<td></td>' +
                        '</tr>');
                paymentIndex++;
                $("#cpayment").val(paymentIndex);
                $("#cpaymentAmount").val("").removeClass(' -input');
                $("#cpaymentDate").val("").removeClass(' -input');
            } else {
                if ((paymentAmount == "") || (paymentAmount <= 0)) {
                    $("#cpaymentAmount").addClass(' -input');
                }
                if (paymentDate == "") {
                    $("#cpaymentDate").addClass(' -input');
                }

            }
        }

        function checkContract(self) {
            $('.print-modal-lg').modal('hide');
            var contracts = $('#printcontract');
            switch (contracts.val()) {
                case "1":
                    $("#print").click(printContract2());
                    break;
                case "2":
                    $("#print").click(printContract3());

                    break;
                default:
            }
        }

        ///////////////////////////
        /* *** Added by Ayat Salman *** */
        ///////////////////////////
        function getDayW(date) {
            // Hint : you can check the full fromat without any need to use first 4 parameters
            // Split the full fromat then comapre day in english

            var dat = "Wed Feb 3 1996 09:56:24 GMT+0100 (W. Europe Standard Time)";
            var d2 = dat.substring(4, 14);
            var date2 = dat.replace(d2, date);
            var full = new Date(date2).toString();

            var dayE = ["Fri", "Sat", "Sun", "Mon", "Tue", "Wed", "Thu"];
            var dayA = ["الجمعة", "السبت", "الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس"];
            var x = full.toString();
            var y = x.substring(0, 3);

            var day_words;
            for (var i = 0; i < 7; i++) {
                if (!y.localeCompare(dayE[i])) {
                    day_words = dayA[i].toString();
                    break;
                }
            }
            return day_words;
        }

        function monthsWord(year, month) {
            var result = "";
            var yearw = year;
            switch (year) {
                case 0:
                    result += " ";
                    break;
                case 1:
                    result += "سنة واحدة";
                    break;
                case 2:
                    result += " سنتين ";
                    break;
                default:
                    result += inWordsArabic(year, $, "ar") + " " + " سنوات ";
                    break;
            }

            switch (month) {
                case 0:
                    result += "فقط";
                    break;
                case 1:
                    result += "وشهر واحد";
                    break;
                case 2:
                    result += "وشهرين";
                    break;
                default:
                    result += "و" + inWordsArabic(month, $, "ar") + " أشهر ";
                    break;
            }
            return result;
        }

        // Add next && prev buttons to new modals -> contract-modal-(1||2)
        var $editContractModalParent = $('.edit-contract-modal'),
            $editContractModal = $editContractModalParent.find('.in'),
            targetModals = ['contract-modal-1', 'contract-modal-2', 'contract-modal-3'],
            nextButtonParent = 'fieldset:not(:last) .group',
            previousButtonParent = 'fieldset:not(:first) .group',
            cancelButtonParent = 'fieldset .group',
            saveButtonParent = 'fieldset:last .group button.cancel';

        $editContractModalParent.find('.date').datetimepicker({
            viewMode: 'days',
            format: 'YYYY/MM/DD'
        });

        targetModals.forEach(function (element) {
            var $selector = $('#' + element),
                id = element.split('-')[2];

            $selector.find(nextButtonParent).append('<button type="button"  class="btn btn-primary next control-btn">التالي</button>');
            $selector.find(cancelButtonParent).append('<button type="button" class="btn btn-danger control-btn cancel" data-dismiss="modal">إلغاء</button>');
            $selector.find(previousButtonParent).prepend('<button type="button"  class="btn btn-default previous control-btn">السابق</button>');
            $selector.find(saveButtonParent).before('<button type="button" id="save' + id + '" class="btn btn-primary save control-btn" onclick="editSave' + id + '()">حفظ</button>');
        });

        $("body").on('click', '.modal.in  fieldset button.next,.modal.in  fieldset button.previous', function (e) {
            var currentTarget = e.currentTarget;
            if ($(currentTarget).hasClass("next")) {
                $(currentTarget).parents('fieldset').hide().next().show();
            } else {
                $(currentTarget).parents('fieldset').hide().prev().show();
            }
        });

        $editContractModalParent.find('div[class="form-group"]').addClass('cform-group class-margin');
        $editContractModal.on('blur', '#crentPeriod', function () {

            specialValues.key1 = $(this).val();
            if (Number($(this).val()) > 72) {
                $(this).val("0");
            } else {
                specialValues.key2 = $(this).val();
                $('#cmonthN').val($('#crentPeriod').val());
            }
        });
        $editContractModal.on('blur', '#cstartRentDate', function () {
            var $startDate = $('#cstartRentDate'),
                $splitD = $startDate.val().split('/'),
                $endDate = $('#cendRentDate'),
                sDay = Number($splitD[1]);

            $newSplit = [$splitD[2], $splitD[1], $splitD[0]];
            var numberVal = Number($('#crentPeriod').val());

            // We have to add $startDate to $(this) -> to fill another input;
            $startDate.val()
                ? $endDate.val(checkMonth($newSplit, numberVal, sDay)[1])
                : $endDate.val('Please Enter Input Date');

        });
        $editContractModal.on('blur', "#cpaymentAPeriod", function () {
            var $startDate = $('#cfromDateA'),
                $splitD = $startDate.val().split('/'),
                $endDate = $('#ctoDateA'),
                sDay = Number($splitD[1]);

            var numberVal = Number($('#cmonthN').val());
            if ($(this).val() > numberVal) {
                $(this).val(0);
                $endDate.val(0);
            } else {
                specialValues.key2 = $(this).val();
            }
            // We have to add $startDate to $(this) -> to fill another input;
            $newSplit = [$splitD[2], $splitD[1], $splitD[0]];
            $startDate.val()
                ? $endDate.val(checkMonth($newSplit, $(this).val(), sDay)[1])
                : $endDate.val('Please Enter Input Date');


            $startDate.val()
                ? $('#cfromDateB').val(checkMonth($newSplit, Number($(this).val()) + 1, sDay)[1])
                : $('#cfromDateB').val('Please Enter Input Date');
        });
        $editContractModal.on('blur', "#cpaymentBPeriod", function () {
            var $startDate = $('#cfromDateB'),
                $splitD = $startDate.val().split('/'),
                $endDate = $('#ctoDateB'),
                sDay = Number($splitD[1]);

            $newSplit = [$splitD[2], $splitD[1], $splitD[0]];
            // We have to add $startDate to $(this) -> to fill another input;
            $startDate.val()
                ? $endDate.val(checkMonth($newSplit, $(this).val(), sDay)[1])
                : $endDate.val('Please Enter Input Date');

            $startDate.val()
                ? $('#cfromDateC').val(checkMonth($newSplit, Number($(this).val()) + 1, sDay)[1])
                : $('#cfromDateC').val('Please Enter Input Date');


            var tempVal = Number($(this).val()) + Number($('#cpaymentAPeriod').val());

            if (tempVal > Number($('#cmonthN').val())) {
                $(this).val(0);
                $endDate.val(0);
            } else if (Number(tempVal) == Number($('#cmonthN').val())) {
                $('#cpaymentCPeriod').val(0);
                $('#cfromDateC').val(0);
                $('#ctoDateC').val(0);
                $('#cpaymentCPeriod').prop('disabled', true);
                $("#cpaymentC").prop('disabled', true);

            } else {
                specialValues.key3 = $(this).val();
                $('#cpaymentCPeriod').prop('disabled', false);
                $("#cpaymentC").prop('disabled', false);
            }
        });
        $editContractModal.on('blur', "#cpaymentCPeriod", function () {
            var $startDate = $('#cfromDateC'),
                $splitD = $startDate.val().split('/'),
                $endDate = $('#ctoDateC'),
                sDay = Number($splitD[1]);

            $newSplit = [$splitD[2], $splitD[1], $splitD[0]];
            // We have to add $startDate to $(this) -> to fill another input;
            $startDate.val()
                ? $endDate.val(checkMonth($splitD, $(this).val(), sDay)[1])
                : $endDate.val('Please Enter Input Date');

            var tempVal = Number($(this).val()) + Number(specialValues.key3) + Number($('#cpaymentAPeriod').val());

            if (tempVal > Number($('#cmonthN').val())) {
                $(this).val(0);
                $endDate.val(0);
            } else {
                specialValues.key5 = $(this).val();
            }
        });

        function editSave1() {
            var addSafqa = "0";
            if ($("#contract-modal-1.in #caddSafqa").prop('checked')) {
                addSafqa = "1";
            }
            $('#contract-modal-1').modal('hide');

            //Give some indication for loading
            $('.loader-modal-lg').modal('show');
            var values = getValuesFromContract("#contract-modal-1 form");
            var unitID = JSON.parse(localStorage.getItem('unitC1'));
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var selctedUnit = JSON.parse(localStorage.getItem('unitID'));
            var Resdate = new Date(values.cidProDate1);
            var dateTime1 = moment(Resdate).format("YYYY-MM-DD HH:mm:ss");
            saveHistory(values.cpurchaser1, selctedUnit, dateTime1, "", "Edition for contract 1");

            var params = {
                uid: unitID,
                purchaser1: values.cpurchaser1,
                idType1: values.cidType1,
                idNum1: values.cidNum1,
                idPlace1: values.cidPlace1,
                idProDate1: formatDateToYYYYMMDD(values.cidProDate1),
                idExpDate1: formatDateToYYYYMMDD(values.cidExpDate1),
                regNo1: values.cregNo1,
                registered1: values.cregistered1,
                country1: values.ccountry1,
                city1: values.ccity1,
                regionName1: values.cregionName1,
                streetName1: values.cstreetName1,
                homePhone1: values.chomePhone1,
                workPhone1: values.cworkPhone1,
                mobileNum1: values.cmobileNum1,
                faxNum1: values.cfaxNum1,
                mailBox1: values.cmailBox1,
                postalCode1: values.cpostalCode1,
                eMail1: values.ceMail1,
                purchaser2: values.cpurchaser22,
                idType2: values.cidType2,
                idNum2: values.cidNum22,
                idPlace2: values.cidPlace22,
                idProDate2: formatDateToYYYYMMDD(values.cidProDate22),
                idExpDate2: formatDateToYYYYMMDD(values.cidExpDate22),
                regNo2: values.cregNo2,
                registered2: values.cregistered2,
                country2: values.ccountry,
                city2: values.ccity,
                regionName2: values.cregionName22,
                streetName2: values.cstreetName22,
                homePhone2: values.chomePhone22,
                workPhone2: values.cworkPhone22,
                mobileNum2: values.cmobileNum22,
                faxNum2: values.cfaxNum,
                mailBox2: values.cmailBox22,
                postalCode2: values.cpostalCode22,
                eMail2: values.ceMail,
                damageFine: values.cdamageFine,
                releaseDate: values.creleaseDate,
                delayPeriod: values.cdelayPeriod,
                penaltyClause: values.cpenaltyClause,
                companyName: values.ccompanyName,
                companyFor: values.ccompanyFor,
                companyNum: values.ccompanyNum,
                checksNum: values.cchecksNum,
                arabon: values.carabon,
                remainingAmountDelay: values.cremainingAmountDelay,
                addSafqa: addSafqa,
                annexes: values.cannexes,
                safqaDate: values.csafqaDate,
                csrf_token: encodeURIComponent(csrf_token)
            };
            var url = site['uri']['public'] + "/contract1/edit/";
            $.ajax({
                type: "POST",
                url: url,
                data: params
            }).done(function (data) {
                console.log(data)
                var paymentsRowInsertedNumber = $('#cpaymentTable tbody tr.new-apend').length;
                var allNewpayments = $('#cpaymentTable tbody tr').length;
                if (paymentsRowInsertedNumber == 0) {
                    $('.loader-modal-lg').modal('hide');
                } else {
                    var urlEdit = site['uri']['public'] + "/payments1Edit/";
                    var paymentsEdit = {
                        uid: JSON.parse(localStorage.getItem('unitID')),
                        csrf_token: encodeURIComponent(csrf_token)
                    };
                    var req3 = $.ajax({
                        type: "POST",
                        url: urlEdit,
                        data: paymentsEdit
                    }).done(function (data) {
                        for (var i = 1; i <= allNewpayments; i++) {
                            // check if values not empty then add to db
                            if (values['cpayment' + i] > 0 || values['cpaymentAmount' + i] > 0 || values['cpaymentDate' + i]) {
                                paymentsInfo = {
                                    payment: values['cpayment' + i],
                                    paymentAmount: values['cpaymentAmount' + i],
                                    paymentDate: formatDateToYYYYMMDD(Date.parse(values['cpaymentDate' + i])),
                                    uid: JSON.parse(localStorage.getItem('unitID')),
                                    csrf_token: encodeURIComponent(csrf_token)
                                };

                                var url = site['uri']['public'] + "/payments1/";
                                var req3 = $.ajax({
                                    type: "POST",
                                    url: url,
                                    data: paymentsInfo
                                }).done(function (data) {
                                    $(".new-apend").removeClass("new-apend");
                                    $('.loader-modal-lg').modal('hide');
                                }).fail(function (err) {
                                    failureCallback();
                                });
                            }//end of if that checks validity of input
                        } //end of for loop
                    }).fail(function (err) {
                        failureCallback();
                    });

                }

            }).fail(function (err) {
                console.log(_translate('error'), err);
            });
        }

        function editSave2() {
            $('#contract-modal-2').modal('hide');
            $('.loader-modal-lg').modal('show');

            var values = getValuesFromContract("#contract-modal-2 form"),
                unitID = JSON.parse(localStorage.getItem('unitC2')),
                csrf_token = $("meta[name=csrf_token]").attr("content"),
                selctedUnit = JSON.parse(localStorage.getItem('unitID')),
                url = site['uri']['public'] + "/contract2/edit/";

            var params = {
                uid: unitID,
                systemUser2: values.csystemUser2,
                baytiCompanyNumber: values.cbaytiCompanyNumber,
                renter1: values.crenter1,
                r_idType1: values.cr_idType1,
                r_idNum1: values.cr_idNum1,
                r_idProDate1: formatDateToYYYYMMDD(values.cr_idProDate1),
                r_idPlace1: values.cr_idPlace1,
                r_idExpDate1: formatDateToYYYYMMDD(values.cr_idExpDate1),
                r_city1: values.cr_city1,
                r_country1: values.cr_country1,
                r_streetName1: values.cr_streetName1,
                r_regionName1: values.cr_regionName1,
                r_workPhone1: values.cr_workPhone1,
                r_homePhone1: values.cr_homePhone1,
                r_faxNum1: values.cr_faxNum1,
                r_mobileNum1: values.cr_mobileNum1,
                r_mailBox1: values.cr_mailBox1,
                r_eMail1: values.cr_eMail1,
                r_postalCode1: values.cr_postalCode1,
                purchaser2: values.cpurchaser2,
                r_idType2: values.cr_idType2,
                r_idNum2: values.cidNum2,
                r_idProDate2: formatDateToYYYYMMDD(values.cidProDate2),
                r_idPlace2: values.cidPlace2,
                r_idExpDate2: formatDateToYYYYMMDD(values.cidExpDate2),
                r_city2: values.ccity2,
                r_country2: values.ccountry2,
                r_regionName2: values.cregionName2,
                r_streetName2: values.cstreetName2,
                r_workPhone2: values.cworkPhone2,
                r_homePhone2: values.chomePhone2,
                r_faxNum2: values.cfaxNum2,
                r_mobileNum2: values.cmobileNum2,
                r_mailBox2: values.cmailBox2,
                r_eMail2: values.ceMail2,
                r_postalCode2: values.cpostalCode2,
                rentPeriod: values.crentPeriod,
                releasePeriod: values.creleasePeriod,
                startRentDate: formatDateToYYYYMMDD(values.cstartRentDate),
                endRentDate: formatDateToYYYYMMDD(values.cendRentDate),
                r_totalPrice: values.cr_totalPrice,
                additions: values.cadditions,
                yy: values.cyy,
                rentPrice: values.crentPrice,
                paymentAPeriod: values.cpaymentAPeriod,
                paymentA: values.cpaymentA,
                fromDateA: formatDateToYYYYMMDD(values.cfromDateA),
                toDateA: formatDateToYYYYMMDD(values.ctoDateA),
                paymentBPeriod: values.cpaymentBPeriod,
                paymentB: values.cpaymentB,
                fromDateB: formatDateToYYYYMMDD(values.cfromDateB),
                toDateB: formatDateToYYYYMMDD(values.ctoDateB),
                paymentCPeriod: values.cpaymentCPeriod,
                paymentC: values.cpaymentC,
                fromDateC: formatDateToYYYYMMDD(values.cfromDateC),
                toDateC: formatDateToYYYYMMDD(values.ctoDateC),
                r_companyName: values.cr_companyName,
                r_companyNum: values.cr_companyNum,
                r_companyFor: values.cr_companyFor,
                sponsorName: values.csponsorName,
                sponsorIdNum: values.csponsorIdNum,
                sponsorMobile: values.csponsorMobile,
                sponsorAddress: values.csponsorAddress,
                checksNum2: values.checksNum2,
                csrf_token: encodeURIComponent(csrf_token)
            };
            params['r_showContract3Dates'] = localStorage.getItem('showContract3Dates');
            hideContract3Dates(params['r_showContract3Dates']) ? params['r_showContract3Dates'] = 1
                : params['r_showContract3Dates'] = 0;

            $.ajax({
                type: "POST",
                url: url,
                data: params
            }).done(function (data) {
                $('.loader-modal-lg').modal('hide');

                var Resdate = new Date(values.cr_idProDate1),
                    dateTime1 = moment(Resdate).format("YYYY-MM-DD HH:mm:ss");

                saveHistory(values.crenter1, selctedUnit, dateTime1, "name", "Edition for contract 2");

            }).fail(function (err) {
                console.log(_translate('error'), err);
            });
        }

        function editSave3() {
            $('#contract-modal-3').modal('hide');

            //Give some indication for loading
            $('.loader-modal-lg').modal('show');
            var values = getValuesFromContract("#contract-modal-3 form");
            var unitID = JSON.parse(localStorage.getItem('unitC3'));
            var csrf_token = $("meta[name=csrf_token]").attr("content");
            var selctedUnit = JSON.parse(localStorage.getItem('unitID'));
            var Resdate = new Date(values.cidProDate3);
            var dateTime3 = moment(Resdate).format("YYYY-MM-DD HH:mm:ss");
            saveHistory(values.cpurchaser3, selctedUnit, dateTime3, "", "Edition for contract 1");

            var params = {
                uid: unitID,
                contractDate: formatDateToYYYYMMDD(values.cidProDate3),
                companyNum: values.ccompanyNum3,
                systemUser: values.cpurchaser32,
                purchaser1: values.cpurchaser3,
                haiName: values.chai3Name3,
                haiArea: values.chaiArea3,
                appendix: values.cappendix,
                moreInfo: values.cmoreInfo3,
                during: values.cduring3,
                price: values.cprice3Total,
                ownerPart: values.cprice3Part1,
                commonPrice: values.cprice3Part2,
                signDate: formatDateToYYYYMMDD(values.cHAO_date3),
                fullName: values.cpurchaser13,
                idNum: values.ccompanyNum3,
                companyName: values.ccompanyName3,
                addPart: values.cappendix,
                companyFor: values.ccompanyFor3,
                HAO_num: values.cHAO_num3,
                csrf_token: encodeURIComponent(csrf_token)
            };

            var url = site['uri']['public'] + "/contract3/edit/";
            $.ajax({
                type: "POST",
                url: url,
                data: params
            }).done(function (data) {
                $('.loader-modal-lg').modal('hide');

            }).fail(function (err) {
                console.log(_translate('error'), err);
            });
        }

        //function to confirm the sign process
        function showSignModel(self) {

            var $this = $(self);
            // Extracting Date from DataTable row itself ->
            var data = extractDataFromRow($(self).parent().parent()),
                contractType = data.contract_type,
                unitId = data.id;
            $('#signModal').modal('show');
            $('.datepicker').datetimepicker({
                viewMode: 'days',
                format: 'MM/DD/YYYY'
            });

            $('#isSigned').change(function () {
                if (this.checked) {
                    $('#signContract').prop('disabled', false);

                    $('#signContract').on('click', function () {

                        var Resdate = new Date($('#signDate').val());
                        var dateTime1 = moment(Resdate).format("YYYY-MM-DD");

                        //1.Change the available flag
                        //2.Save to the history
                        var csrf_token = $("meta[name=csrf_token]").attr("content");
                        var params = {
                            available: 5,
                            contract_type: contractType,
                            uid: unitId,
                            csrf_token: encodeURIComponent(csrf_token)
                        };
                        var urlUA = site['uri']['public'] + "/unit/available/";
                        // Append page CSRF token
                        var req1 = $.ajax({
                            type: "POST",
                            url: urlUA,
                            data: params,
                            beforeSend: function () {
                                $('.loader-modal-lg').modal('show');
                            }

                        }).done(function (data) {
                            // $('#signModal').modal("hide");
                            saveHistory("", unitId, dateTime1, "", "Signed");
                            setTimeout(function () {
                                $('.loader-modal-lg').modal('hide');
                                $('#signModal').modal('hide');
                                $('#unitTable').DataTable().ajax.reload();
                            }, 2250)
                        }).fail(failureCallback);


                    });

                } else {
                    $('#signContract').prop('disabled', true);
                }

            });


        }

        // Editing Contracts function
        function editContracts(self) {
            $('#contract-modal-1 fieldset:first,#contract-modal-2 fieldset:first')
                .show() // Show only first one
                .siblings() // select all brothers
                .hide(); // hide them all
            var $this = $(self);
            // Extracting Date from DataTable row itself ->
            var data = extractDataFromRow($(self).parent().parent()),
                contractType = data.contract_type,
                unitId = data.id,
                rawabi_code = data.rawabi_code,
                currentURL = "",
                items1 = {},
                items2 = {},
                items3 = {},
                $inputsC1 = $('#contract-modal-1 input, select'),
                $inputsC2 = $('#contract-modal-2 input, select');
            $inputsC3 = $('#contract-modal-3 input, select,#contract-modal-3 textarea');
            localStorage.setItem('unitID', JSON.stringify(unitId));
            /*
             * Create form based on contract type -> In this case we will use single modal for inject
             * this concept -> so We can fetch the whole form inputs based on contract type
             */
            if (contractType === 1) {
                // open edit Contract1 modal
                $this.attr('data-target', '#contract-modal-1');
                // Modify URL
                currentURL = site['uri']['public'] + '/contract1/' + unitId;
            } else if (contractType === 3) {
                $this.attr('data-target', '#contract-modal-3');
                currentURL = site['uri']['public'] + '/contract3/' + unitId;
            } else {
                $this.attr('data-target', '#contract-modal-2');
                currentURL = site['uri']['public'] + '/contract2/' + unitId;
            }

            $.ajax({
                url: currentURL,
                type: "get"
            }).done(function (data) {

                data = JSON.parse(data);

                if (contractType === 1) {
                    var payments = JSON.parse(data.payments);
                    if (data.addSafqa == 1) {
                        $("#caddSafqa").prop("checked", true);
                        $('#csafqasDate').removeClass('hidden');
                    } else {
                        $("#caddSafqa").prop("checked", false);
                        $('#csafqasDate').addClass('hidden');
                        if (data.safqaDate.trim() == "0000-00-00") {
                            data.safqaDate = "";
                        }
                    }
                    $("#cpaymentTable tr").each(function (index) {
                        if (index > 1) {
                            $(this).remove();
                        }
                    });
                    // $("#cpaymentTable #cpayment").val(payments.length + 1);
                    $("#cnumOfPayments").val(payments.length);
                    if (payments.length > 0) {
                        for (var i = 0; i < payments.length; i++) {
                            var rowToAdd = '<tr><td><input type="text" id="cpayment' + (i + 1) + '" dir="auto" class="form-control" readonly="" value="' + (payments[i].paymentNum) + '"></td><td><input type="text" id="cpaymentAmount' + (i + 1) + '" dir="auto" class="form-control" value="' + (payments[i].paymentAmount) + '"></td><td><input type="text" id="cpaymentDate' + (i + 1) + '" class="form-control" value="' + (payments[i].paymentDate) + '"></td><td></td></tr>';
                            $("#cpaymentTable").append(rowToAdd);
                        }
                    }
                    $("#contract-modal-1 .total-price").val(data.priceTotal);
                    var cDate = moment(new Date(data.contractDate)).format("MM/DD/YYYY");
                    $("#contract-modal-1 .contract-date").val(cDate);
                    items1 = {
                        ccontractDate: checkDate(data.contractDate),
                        ccompanyNum: data.companyNum,
                        csystemUser: data.systemUser,
                        cpurchaser1: data.purchaser1,
                        cpurchaser11: data.purchaser1,
                        cidType1: data.idType1,
                        cidNum1: data.idNum1,
                        cidPlace1: data.idPlace1,
                        cidProDate1: checkDate(data.idProDate1),
                        cidExpDate1: checkDate(data.idExpDate1),
                        cregistered1: data.registered1,
                        cregNo1: data.regNo1,
                        ccountry1: data.country1,
                        ccity1: data.city1,
                        cregionName1: data.regionName1,
                        cstreetName1: data.streetName1,
                        chomePhone1: data.homePhone1,
                        cworkPhone1: data.workPhone1,
                        cmobileNum1: data.mobileNum1,
                        cfaxNum1: data.faxNum1,
                        cmailBox1: data.mailBox1,
                        cpostalCode1: data.postalCode1,
                        ceMail1: data.eMail1,
                        cpurchaser22: data.purchaser2,
                        cidType2: data.idType2,
                        cidNum22: data.idNum2,
                        cidPlace22: data.idPlace2,
                        cidProDate22: checkDate(data.idProDate2),
                        cidExpDate22: checkDate(data.idExpDate2),
                        cregistered2: data.registered2,
                        cregNo2: data.regNo2,
                        ccountry: data.country2,
                        ccity: data.city2,
                        cregionName22: data.regionName2,
                        cstreetName22: data.streetName2,
                        chomePhone22: data.homePhone2,
                        cworkPhone22: data.workPhone2,
                        cmobileNum22: data.mobileNum2,
                        cfaxNum: data.faxNum2,
                        cmailBox22: data.mailBox2,
                        cpostalCode22: data.postalCode2,
                        ceMail: data.eMail2,
                        cunitNum: data.unitNum,
                        cunitArea: data.unitArea,
                        chaiName: data.haiName,
                        chaiName2: data.haiName,
                        cfloorNum: data.floorNum,
                        clandNum: data.landNum,
                        chawdNum: data.hawdNum,
                        chawdName: data.hawdName,
                        cbuildingNum: data.buildingNum,
                        cbuildingsNum: data.buildingsNum,
                        cunitDesc: data.unitDesc,
                        creleaseDate: data.releaseDate,
                        cdelayPeriod: data.delayPeriod,
                        cpurchaser: data.purchaser,
                        ccontractYear: getYear(data.contractDate),
                        ccontractMonth: getMonth(data.contractDate),
                        ccontractDay: getDay(data.contractDate),
                        cdamageFine: data.damageFine,
                        cpenaltyClause: data.penaltyClause,
                        cpassportNo1: data.passportNo1,
                        ccompanyName: data.companyName,
                        ccompanyFor: data.companyFor,
                        chaiArea: data.haiArea,
                        chaiArea2: data.haiArea,
                        csystemUserIDNo: data.idNum1,
                        cownersUnionNum: data.ownersUnionNum,
                        cownersUnionProDate: formatDate(data.ownersUnionProDate),
                        cchecksNum: data.checksNum,
                        carabon: (data.arabon),
                        cannexes: data.annexes,
                        cremainingAmountDelay: data.remainingAmountDelay,
                        csafqaDate: data.safqaDate,
                        unitId: data.id
                    };
                    localStorage.setItem('unitC1', JSON.stringify(items1.unitId));
                    $inputsC1.each(function () {
                        for (key in items1) {
                            if (this.id === key) {
                                $(this).val(items1[key]);
                            }
                        }
                    });
                } else if (contractType === 3) {

                    var assigneeInput = document.querySelector('#cpurchaser32'),
                        generatedInput = document.createElement('input');

                    generatedInput.type = 'text';
                    generatedInput.id = 'cpurchaser32';
                    generatedInput.className = 'form-control';
                    generatedInput.value = 'محمد محمود عبدالله سحويل';
                    generatedInput.setAttribute('value', 'محمد محمود عبدالله سحويل');
                    assigneeInput.parentNode.replaceChild(generatedInput, assigneeInput);

                    items3 = {
                        cidProDate3: checkDate(data.contractDate),
                        ccompanyNum3: data.companyNum,
                        cpurchaser3: data.purchaser1,
                        cpurchaser32: data.fullName,
                        cmoreInfo3: data.moreInfo,
                        cappendix: data.appendix,
                        cduring3: data.during,
                        cpurchaser13: data.fullName,
                        csystemUserIDNo3: data.idNum,
                        cprice3Total: data.price,
                        cprice3Part1: data.ownerPart,
                        cprice3Part2: data.commonPrice,
                        ccompanyName3: data.companyName,
                        ccompanyFor3: data.companyFor,
                        chaiArea3: data.haiArea,
                        cHAO_num3: data.HAO_num,
                        cHAO_date3: data.signDate,
                        chaiName3: data.haiName,
                        unitId: data.id
                    };

                    localStorage.setItem('unitC3', JSON.stringify(items3.unitId));

                    items3['cpurchaser32'] = generatedInput.value;

                    $inputsC3.each(function () {
                        for (key in items3) {
                            if (this.id === key) {
                                $(this).val(items3[key]);
                            }
                        }
                    });
                } else {
                    items2 = {
                        csystemUser2: data.systemUser2,
                        cbaytiCompanyNumber: data.baytiCompanyNumber,
                        crenter1: data.renter1,
                        cr_idType1: data.r_idType1,
                        cr_idNum1: data.r_idNum1,
                        cr_idProDate1: data.r_idProDate1,
                        cr_idPlace1: data.r_idPlace1,
                        cr_idExpDate1: data.r_idExpDate1,
                        cr_city1: data.r_city1,
                        cr_country1: data.r_country1,
                        cr_streetName1: data.r_streetName1,
                        cr_regionName1: data.r_regionName1,
                        cr_workPhone1: data.r_workPhone1,
                        cr_homePhone1: data.r_homePhone1,
                        cr_faxNum1: data.r_faxNum1,
                        cr_mobileNum1: data.r_mobileNum1,
                        cr_mailBox1: data.r_mailBox1,
                        cr_eMail1: data.r_eMail1,
                        cr_postalCode1: data.r_postalCode1,
                        cpurchaser2: data.renter2,
                        cr_idType2: data.r_idType2,
                        cidNum2: data.r_idNum2,
                        cidProDate2: data.r_idProDate2,
                        cidPlace2: data.r_idPlace2,
                        cregNo2: data.r_regionName2,
                        cidExpDate2: data.r_idExpDate2,
                        ccity2: data.r_city2,
                        ccountry2: data.r_country2,
                        cregionName2: data.r_regionName2,
                        cstreetName2: data.r_streetName2,
                        cworkPhone2: data.r_workPhone2,
                        chomePhone2: data.r_homePhone2,
                        cfaxNum2: data.r_faxNum2,
                        cmobileNum2: data.r_mobileNum2,
                        cmailBox2: data.r_mailBox2,
                        ceMail2: data.r_eMail2,
                        cpostalCode2: data.r_postalCode2,
                        crentPeriod: data.rentPeriod,
                        creleasePeriod: data.releasePeriod,
                        cstartRentDate: formatDate(data.startRentDate),
                        cendRentDate: formatDate(data.endRentDate),
                        cr_totalPrice: data.r_totalPrice,
                        cadditions: data.additions,
                        cmonthN: data.rentPeriod,
                        cyy: data.yy,
                        crentPrice: data.rentPrice,
                        cpaymentAPeriod: data.paymentAPeriod,
                        cpaymentA: data.paymentA,
                        cfromDateA: formatDate(data.fromDateA),
                        ctoDateA: formatDate(data.toDateA),
                        cpaymentBPeriod: data.paymentBPeriod,
                        cpaymentB: data.paymentB,
                        cfromDateB: formatDate(data.fromDateB),
                        ctoDateB: formatDate(data.toDateB),
                        cpaymentCPeriod: data.paymentCPeriod,
                        cpaymentC: data.paymentC,
                        cfromDateC: formatDate(data.fromDateC),
                        ctoDateC: formatDate(data.toDateC),
                        cr_renter11: data.renter1,
                        cr_idNum11: data.r_idNum1,
                        cr_companyName: data.r_companyName,
                        cr_companyNum: data.r_companyNum,
                        cr_companyFor: data.r_companyFor,
                        csponsorName: data.sponsorName,
                        csponsorIdNum: data.sponsorIdNum,
                        csponsorMobile: data.sponsorMobile,
                        csponsorAddress: data.sponsorAddress,
                        haiArea2: data.r_haiArea,
                        haiArea22: data.r_haiArea,
                        HAO_num2: data.r_HAO_num,
                        HAO_date2: formatDate(data.r_HAO_date),
                        haiName2: data.r_haiName,
                        haiName3: data.r_haiName,
                        checksNum2: data.checksNum,
                        unitId: data.id,
                        showContract3DatesEdit: data.r_showContract3Dates
                    };
                    var contract2EditModal = document.getElementById('contract-modal-2'),
                        $targetCheckBox = $(contract2EditModal).find('#showContract3DatesEdit');

                    // Init the value of checkbox
                    items2['showContract3DatesEdit'] === 1 ? $targetCheckBox.attr('checked', true) : $targetCheckBox.attr("checked", false);
                    //Route To get the value for the extra additions form another DB
                    //1.Do ajax request to get the server configuration
                    //2.Do ajax request to get the total price
                    var serverURL = site['uri']['public'] + '/mssqlConfig/getPrice/?';
                    var csrf_token = $("meta[name=csrf_token]").attr("content");
                    var params = {rwabicode: rawabi_code, uid: unitId, csrf_token: encodeURIComponent(csrf_token)};

                    $.ajax({
                        type: "POST",
                        url: serverURL,
                        data: params
                    }).done(function (data) {

                        if (data == "FALSE" || data == "") {
                            $("#cadditions").prop('disabled', true);
                            $("#cadditionsError").html("<p>" + _translate('finishing_system_not_connected') + "!</p>");
                            $("#cadditions").val("0");
                        } else {
                            $("#cadditions").prop('disabled', true);
                            $('#cadditions').val(data);
                        }
                    })
                        .fail(function (err) {
                            console.log("Could not rercieve server configurations right!" + err);
                        });
                    localStorage.setItem('unitC2', JSON.stringify(items2.unitId));
                    $inputsC2.each(function () {
                        for (key in items2) {
                            if (this.id === "showContract3DatesEdit") {
                                continue;
                            }
                            if (this.id === key) {
                                $(this).val(items2[key]);
                            }
                        }
                    });
                }
            });
            // change default input values -> fetch them from created items object
        }

        // Adding a small effect for text in all fieldset -> text-muted to give some focus
        // on current selected Item
        var $fieldInputs = $('.edit-contract-modal fieldset input');

        $editContractModalParent.on('click', $fieldInputs, function (e) {
            var currentTarget = e.target;

            $(currentTarget)
                .closest('.form-group')
                .parent()
                .removeClass('mutedElement')
                .siblings(':not(":last")')
                .addClass('mutedElement');
            $(currentTarget).parents('fieldset').removeClass('mutedElement');
        });

        // Adding RTL to all datatimepicker inputs
        var $dateInputs = $('.datepicker input');
        $dateInputs.addClass('rtl');

        //DiscountAndAdditionSelection
        $("#selectDiscount").change(function () {
            var id = $(this).val();
            $('#discountPass').val("");
            $('#priceVal').val("");
            getSelectedCategory();
        });

        $("#additionDetails").change(function () {
            var id = $(this).val();
            if (parseInt($(this).val()) == 0) {
                $('#priceVal').val("");
            } else
                getSelectedCategory();
        });

        $('#cancelReason').keyup(function () {

            if ($('#cancelReason').val() == "") {
                $('#sendReason').prop('disabled', true);
                $("#cancelReason").addClass("reqBorder");
            } else {
                $('#sendReason').prop('disabled', false);
                $("#cancelReason").removeClass("reqBorder");
            }

        });

        $('#cancelSignedReason').keyup(function () {

            if ($('#cancelSignedReason').val() == "") {
                $('#sendSignedReason').prop('disabled', true);
                $("#cancelSignedReason").addClass("reqBorder");
            } else {
                $('#sendSignedReason').prop('disabled', false);
                $("#cancelSignedReason").removeClass("reqBorder");
            }

        });

        // function to calculate DiscountPrice after User input Pass
        var typingTimer;
        var doneTypingInterval = 1000;
        $('#discountPass').on('keyup', function () {
            clearTimeout(typingTimer);
            typingTimer = setTimeout(getSelectedCategory, doneTypingInterval);
        });
        $('#discountPass').on('keydown', function () {
            clearTimeout(typingTimer);

        });

        //know what the user chooses from the priceDetails Modal
        $('#isDicount').change(function () {
            if (this.checked) {
                $('#selectDiscount').prop('disabled', false);
            } else {
                $('#selectDiscount').prop('disabled', true);
                $('#discountPass').val("");
                $("#selectDiscount").val("25");
                $('#priceVal').val("");
                $("#password-alerts").html("");
            }

        });
        $('#isAddition').change(function () {
            if (this.checked) {
                $('#additionDetails').prop('disabled', false);
            } else {
                $('#additionDetails').prop('disabled', true);
                //additionDetails
                $("#additionDetails").val("0");
                $('#priceVal').val("");
            }
        });

        function addSafqaClick() {
            if ($("#addSafqa").prop('checked')) {
                $('#safqasDate').removeClass('hidden');
            } else {
                $('#safqaDate').val("");
                $('#safqasDate').addClass('hidden');
            }
        }

        function caddSafqaClick() {
            if ($("#caddSafqa").prop('checked')) {
                $('#csafqasDate').removeClass('hidden');
            } else {
                $('#csafqaDate').val("");
                $('#csafqasDate').addClass('hidden');
            }
        }

        function formatCurrencySign(item) {
            //Edited By Ahmad Tome , add comma to price
            return item === 'لا يوجد' ? 'لا يوجد' : `${item.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")} $`;

        }

        document.addEventListener('click', function (event) {
            if (event.target.id === 'showContract3DatesEdit' || event.target.id === 'showContract3Dates') {
                var $this = $(this);
                if ($this.attr('checked')) {
                    $(this).attr('checked', false);
                    $(this).val('off');
                } else {
                    $(this).attr('checked', true);
                    $this.val('on');
                }
                if (event.target.id === 'showContract3DatesEdit') {
                    localStorage.setItem('showContract3Dates', $this.val());
                }
            }
        }, false);

        var userPasswordInput = document.getElementById('user_pass');
        userPasswordInput.addEventListener('keyup', function () {
            var $this = $(this);
            checkUser($this);
        }, false);


        $('#user_pass').on('click touchend', function (e) {
            if (e.type == 'click')
                console.log('Mouse Click user_pass');
            else
                console.log('Touch');
        });

        $('#discountPass').on('click touchend', function (e) {
            if (e.type == 'click')
                console.log('Mouse Click discountPass');
            else
                console.log('Touch');
        });

        $("#priceDetails").keydown(function (event) {
            if (event.keyCode == 9) {
                event.preventDefault();
                return false;
            }
        });

        function calculateDiscount() {
            var ele = (document.getElementById('checkboxes')).getElementsByTagName('input');
            var str = "";
            for (var i = 0; i < ele.length; i++) {
                if (ele[i].checked == true) {
                    str += ele[i].value + ",";

                }
            }

            alert(str)
        }


        /* For Export Buttons available inside jquery-datatable "server side processing" - Start
- due to "server side processing" jquery datatble doesn't support all data to be exported
- below function makes the datatable to export all records when "server side processing" is on */

        function newexportaction(e, dt, button, config) {
            // debugger
            var self = this;
            var oldStart = dt.settings()[0]._iDisplayStart;
            dt.one('preXhr', function (e, s, data) {
                // Just this once, load all data from the server...
                data.start = 0;
                data.length = 2147483647;
                dt.one('preDraw', function (e, settings) {
                    // Call the original action function
                    if (button[0].className.indexOf('buttons-copy') >= 0) {
                        $.fn.dataTable.ext.buttons.copyHtml5.action.call(self, e, dt, button, config);
                    } else if (button[0].className.indexOf('buttons-excel') >= 0) {
                        $.fn.dataTable.ext.buttons.excelHtml5.available(dt, config) ?
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(self, e, dt, button, config) :
                            $.fn.dataTable.ext.buttons.excelFlash.action.call(self, e, dt, button, config);
                    } else if (button[0].className.indexOf('buttons-csv') >= 0) {
                        $.fn.dataTable.ext.buttons.csvHtml5.available(dt, config) ?
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(self, e, dt, button, config) :
                            $.fn.dataTable.ext.buttons.csvFlash.action.call(self, e, dt, button, config);

                    } else if (button[0].className.indexOf('buttons-pdf') >= 0) {
                        $.fn.dataTable.ext.buttons.pdfHtml5.available(dt, config) ?
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(self, e, dt, button, config) :
                            $.fn.dataTable.ext.buttons.pdfFlash.action.call(self, e, dt, button, config);
                    } else if (button[0].className.indexOf('buttons-print') >= 0) {
                        $.fn.dataTable.ext.buttons.print.action(e, dt, button, config);
                    }
                    dt.one('preXhr', function (e, s, data) {
                        // DataTables thinks the first item displayed is index 0, but we're not drawing that.
                        // Set the property to what it was before exporting.
                        settings._iDisplayStart = oldStart;
                        data.start = oldStart;
                    });
                    // Reload the grid with the original page. Otherwise, API functions like table.cell(this) don't work properly.
                    setTimeout(dt.ajax.reload, 0);
                    // Prevent rendering of the full data to the DOM
                    return false;
                });
            });
            // Requery the server with the new one-time export settings
            dt.ajax.reload();
        };

        //For Export Buttons available inside jquery-datatable "server side processing" - End


        function _generate(type) {
            if (type == "add") {

                var paymentsDuration = 1;
                var paymentsStartDate = new Date($("#_paymentStartDate").val());
                var numOfPayments = parseInt($("#_numOfPayments").val()) || 0;

                // var firstPayment = parseInt($('#r_firstPayment').val()) || 0;

                $("#_numOfPayments").parent().removeClass("has-error");
                $("#_paymentStartDate").parent().removeClass("has-error");

                $("#error_msg").empty();
                if (isNaN(numOfPayments) || numOfPayments <= 0 || numOfPayments > 84) {
                    $("#_numOfPayments").parent().addClass("has-error");
                    return;
                }

                if (isNaN(paymentsStartDate)) {
                    $("#_paymentStartDate").parent().addClass("has-error");
                    return;
                }

                const totalPrice = parseInt($("#_totalPrice").val()) || 0;

                var tds = $('#_paymentTable>tbody>tr>td');
                var summationOfPreviousPayments = 0;
                for (var i = 1; i < tds.length; i += 4) {
                    summationOfPreviousPayments += parseFloat(((tds[i]).querySelector('input').value).replaceAll(',', '')) || 0;
                }
                const arabon = summationOfPreviousPayments;
                const payment = ((totalPrice - arabon) / numOfPayments).toFixed(2);
                let contractDate = "";
                let summation_Of_payment = arabon;

                if (payment > 0) {
                    // Edited by Ahmad Tome
                    var sum = totalPrice;
                    contractDate = new Date(paymentsStartDate);
                    var lastIndex = 1;//$('#paymentTable>tbody>tr').length;
                    // let rowToAdd =
                    //     '<tr> <td> <input type="text" id="payment" value=" " class="form-control" readonly="" name="payment">' +
                    //     '</td> <td> <input type="number" id="paymentAmount" class="form-control" name="paymentAmount">' +
                    //     '</td> <td> <div class="input-group date datepicker">' +
                    //     '<input type="text" class="form-control rtl" id="paymentDate" name="paymentDate">' +
                    //     '<span class="input-group-addon"> <span class="glyphicon glyphicon-calendar"></span> </span>' +
                    //     '</div></td><td><button type="button" class="btn btn-primary" id="checkNewRow" onclick="addRow()"><strong> Add Payment </strong></button></td></tr>';
                    let rowToAdd = '';
                    // $("table#paymentTable").find("tr:gt(1)").remove();

                    for (var i = 1; i <= numOfPayments - 1; i++) {

                        var nextMonth = contractDate.setMonth((contractDate.getMonth()) + (i == 1 ? 0 : paymentsDuration));
                        nextMonth = formatDateToYYYYMMDD(nextMonth);

                        rowToAdd = '<tr>' +
                            '<td>' +
                            '<input type="text" id="payment' + (lastIndex) + '" dir="auto" class="form-control" readonly="" value="' + (lastIndex) + '">' +
                            '</td>' +
                            '<td><input type="text" id="paymentAmount' + (lastIndex) + '" dir="auto" class="form-control" value="' + addCommaToTheNumber(Math.round(payment)) + '"></td>' +
                            '<td><input type="text" id="paymentDate' + (lastIndex) + '" class="form-control" value="' + (nextMonth) + '"></td>' +
                            '<td><button onclick="$(this).parent().parent().remove()" class="btn btn-danger">Delete</button></td>' +
                            '</tr>';
                        $("#_paymentTable").append(rowToAdd);
                        sum -= (Math.round(payment));
                        summation_Of_payment += (Math.round(payment));
                        lastIndex++;
                    }

                    var nextMonth = contractDate.setMonth((contractDate.getMonth()) + paymentsDuration);
                    nextMonth = formatDateToYYYYMMDD(nextMonth);
                    let rowToAdd2 = '<tr><td><input type="text" id="payment' + (lastIndex) + '" dir="auto" class="form-control" readonly="" value="' + (lastIndex) + '"></td><td><input type="text" id="paymentAmount' + (lastIndex) + '" dir="auto" class="form-control" value="' + addCommaToTheNumber(Math.round(sum - arabon)) + '"></td><td><input type="text" id="paymentDate' + (lastIndex) + '" class="form-control" value="' + (nextMonth) + '"></td><td><button onclick="$(this).parent().parent().remove()" class="btn btn-danger">Delete</button></td></tr>';
                    $("#_paymentTable").append(rowToAdd2);
                    summation_Of_payment += (Math.round(sum - arabon));
                    console.log("summation_Of_payment")
                    console.log(summation_Of_payment);

                    $('#total-price').text(totalPrice);
                    $('#summation-payment').text(summation_Of_payment);

                }
            }
        }

        function _addRow() {

            var paymentAmount = $("#_paymentAmount").val();
            var lastIndex = $('#_paymentTable>tbody>tr').length;
            var paymentDate = $('#_paymentDate').val();

            if (
                ("" != paymentAmount)
                &&
                (paymentAmount > 0)
                &&
                ("" != paymentDate)
            ) {
                $('#_paymentTable')
                    .append(
                        '<tr>' +
                        '<td><input type="text" id="_payment' + lastIndex + '" dir="auto" class="form-control" readonly value="' + lastIndex + '"></td>' +
                        '<td><input type="text" id="_paymentAmount' + lastIndex + '" dir="auto" class="form-control" value="' + addCommaToTheNumber(paymentAmount) + '"></td>' +
                        '<td><input type="text" id="_paymentDate' + lastIndex + '" class="form-control" value="' + paymentDate + '"></td>' +
                        '<td><button onclick="$(this).parent().parent().remove()" class="btn btn-danger">Delete</button></td>' +
                        '</tr>');
                lastIndex++;
                $("#_payment").val(lastIndex);
                $("#_paymentAmount").val("").removeClass(' -input');
                $("#_paymentDate").val("").removeClass(' -input');
            } else {
                if ((paymentAmount == "") || (paymentAmount <= 0)) {
                    $("#_paymentAmount").addClass(' -input');
                }
                if (paymentDate == "") {
                    $("#_paymentDate").addClass(' -input');
                }

            }
        }


        function savePayments() {
            $totalPrice = parseInt($("#_totalPrice").val());

            var paymentObj = [];
            var paymentTable = $('#_paymentTable>tbody>tr');
            for (var i = 1; i < paymentTable.length; i++) {
                paymentObj.push({
                    payment: (paymentTable[i].querySelectorAll('td>input')[0]).value,
                    paymentAmount: removeCommaFromNumber((paymentTable[i].querySelectorAll('td>input')[1]).value),
                    paymentDate: (paymentTable[i].querySelectorAll('td>input')[2]).value,
                });
            }

            $totalPayments = paymentObj.reduce(function (accumulator, currentValue) {
                return accumulator + (parseFloat(currentValue.paymentAmount) || 0);
            }, 0.0);

            var msg = "The Total Price is " + (parseInt($totalPrice)) + " \n The Total payments Price is " + (parseInt($totalPayments));
            if (confirm(msg)) {

                var paymentsRowInsertedNumber = $('#_paymentTable tbody tr').length;

                if (paymentsRowInsertedNumber > 0) {
                    $("#_paymentAmount").removeClass(" -input");
                    $("#_paymentDate").removeClass(" -input");
                    $("#error_msg").html("");
                    $("#prePage").addClass("display-none");
                    $('.loader-modal-lg').modal('show');


                    var target = '';
                    var target_id = 0;
                    var selection = $('#ParkingStorageSelect').val();

                    if (selection == "parking") {
                        var selectedParking = $('#ParkingSelect').val();
                        target = "parking";
                        target_id = selectedParking;

                    } else if (selection == "extra-parking") {
                        var selectedParking = $('#ParkingSelect').val();
                        target = "parking";
                        target_id = selectedParking;

                    } else if (selection == "storage") {
                        var selectedStorage = $('#StorageSelect').val();
                        target = "storage";
                        target_id = selectedStorage;
                    }


                    const csrf_token = $("meta[name=csrf_token]").attr("content");

                    $.ajax({
                        type: "POST",
                        url: site['uri']['public'] + "/parkingStorage/payments",
                        data: {
                            payments_array: paymentObj,
                            csrf_token: encodeURIComponent(csrf_token),
                            target: target,
                            target_id: target_id,

                        }
                    }).done(function (data) {

                        $("#_payments_save_success").removeClass("display-none");

                    }).fail(function (err) {

                        $("#_payments_save_error").removeClass("display-none");
                    });

                    $('.loader-modal-lg').modal('hide');

                }
            }
        }

    </script>
{% endblock %}
{# TODO: review all events attached on contractModals that used for validation #}
{# TODO: if the required filed has aleready value in the input it must be passed and no need to trigger an action on #}
{# TODO: that field #}
{# TODO: convert all modal to separate files and include them in index.twig #}
{# TODO: check the side effects of removing all assets importing in generation and printing of different contracts #}
